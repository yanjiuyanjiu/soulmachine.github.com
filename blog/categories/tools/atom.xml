<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | 研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2013-11-08T20:48:21+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LaTeX的各种发行版和编辑器的比较]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130412"/>
    <updated>2013-04-12T11:01:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/latex-distributions-and-editors</id>
    <content type="html"><![CDATA[<h2 id="distribution">发行版(distribution)</h2>
<p>TeX类似于Linux，有很多不同的发行版(distribution)。</p>

<p>先看看各个发行版的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center"><a href="http://www.tug.org/texlive/">http://www.tug.org/texlive/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">2012-07-01</td>
      <td style="text-align: center">43</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center"><a href="http://miktex.org/">http://miktex.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">188,485</td>
      <td style="text-align: center">1.3.2 2012-09-24</td>
      <td style="text-align: center">54</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center"><a href="http://www.ctex.org/">http://www.ctex.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">252,657</td>
      <td style="text-align: center">2.9.2 2012-03-30</td>
      <td style="text-align: center">344</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center"><a href="http://www.tug.org/protext/">http://www.tug.org/protext/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">3.1.1 2012-07-23</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>其中CTeX和proTeXt都是基于MiKTeX的，再次进行了打包。国内估计用CTeX比较多。</p>

<h2 id="editor">编辑器(editor)</h2>
<p>编辑器大概分为两种，一种为WYSIWYG，所见即所得，实时预览，类似于Word，另一种是纯文本编辑器，有语法高亮，没有预览功能，需要另外安装一个发行版，编译成PDF后才能预览。</p>

<p>先看看各个编辑器的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>预览类型</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center"><a href="http://www.xm1math.net/texmaker/">http://www.xm1math.net/texmaker/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">289,311</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">4.0.1 2013-03-16</td>
      <td style="text-align: center">60</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center"><a href="http://www.tug.org/texworks/">http://www.tug.org/texworks/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">90,230</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">0.4.4  2012-04</td>
      <td style="text-align: center">23</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center"><a href="http://texstudio.sourceforge.net/">http://texstudio.sourceforge.net/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">2.5.2 2013-01-08</td>
      <td style="text-align: center">15</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center"><a href="http://www.texniccenter.org/">http://www.texniccenter.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">884,570</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">v2.0 beta1 2012-11-03</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center"><a href="http://www.lyx.org/">http://www.lyx.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">261,649</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">2.0.5.1 2013-01-08</td>
      <td style="text-align: center">56</td>
      <td style="text-align: center">42</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center"><a href="http://www.bakoma-tex.com/">http://www.bakoma-tex.com/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">1,327,901</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">10.10 2013-01-13</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center"><a href="http://www.texmacs.org">http://www.texmacs.org</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">1,525,373</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">1.0.7.19 2013-03-27</td>
      <td style="text-align: center">27</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center"><a href="http://www.latexeditor.org/">http://www.latexeditor.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">624,564</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">0.53 2009-10-09</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<!--more-->

<h2 id="section">跨平台</h2>
<p>下面看看各个发行版和编辑器的跨平台支持程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center">Windows</th>
      <th style="text-align: center">Mac</th>
      <th style="text-align: center">Linux</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">编辑器</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">WYSIWYG</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">发行版</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
  </tbody>
</table>

<p>Tex Live在Mac上，叫做MacTex，见<a href="http://www.tug.org/mactex/newfeatures.html">官网的一段话</a>：</p>

<blockquote>
  <p>MacTeX-2012 installs a completely unmodified copy of the full TeX Live 2012 distribution. This is exactly the same distribution that runs on OS X, Windows, GNU/Linux, various BSD Unix systems, and other systems.</p>
</blockquote>

<h2 id="section-1">如何选择</h2>
<p>四个发新版，只有 Tex Live 是跨平台的，故使用Tex Live，其他发行版抛弃。</p>

<p>TeXmaker, TeXstudio, TeXworks 来进行比较<br />
中文支持的程度，打开.tex文件是否有乱码</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>打开GB18030的tex文件</strong></th>
      <th style="text-align: center"><strong>打开UTF8编码的文件</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">无乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
  </tbody>
</table>

<p>TeXmaker 界面丑陋，且中文支持不好，功能没有多，抛弃之。
TeXmaker 和 TeXstudio 界面比较美观，而且二者界面风格很类似。因为TeXstudio是在TeXmaker的基础上而来的，<a href="http://en.wikipedia.org/wiki/TeXstudio">见wikipedia的描述</a>：</p>

<blockquote>
  <p>Originally called TexMakerX, TeXstudio was started as a fork of Texmaker that tried to extend it with additional features while keeping its look and feel.</p>
</blockquote>

<p>TeXnicCenter 安装时不会自动探测，第一次运行时会要求你指定 latex.exe 的路径。TeXnicCenter 界面风格是office的风格，很现代化。TeXnicCenter 只有 windows版，故放弃。</p>

<p>LyX 安装时会自动探测到TeX Live。这点比较方便，无需配置。<br />
LyX可以导入.tex文件，导入后，不能直接修改.tex源码，只能在上方的可视化区域直接输入内容，即LyX强迫你用类似word的方式来输入内容。因此抛弃LyX。</p>

<p>Bakoma 是商业软件，30天试用期，网上搜了一下，没有破解版，故放弃。</p>

<p>TeXmacs 1.0.7.19 在windows上安装完成后，双击后启动界面会闪退，完全没法用，换了1.0.7.18，可以启动了，目前发现两个问题：1. 打开（使用文件–&gt;打开或导入）一个含有中文的.tex文件会崩溃；2. 关闭程序管不了，需要用任务管理器杀掉才行，可见TeXmacs 还很不完善，其次TeXmacs 有着自己的语法，不是一个标准的TeX发行版，因此放弃 TeXmacs 。</p>

<p>LEd已经很久不更新，且只有windows版，放弃。</p>

<p>大牛陈硕用的是Tex Live，他的书使用Tex Live来排版的。<br />
<img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/04/chenshuo_texlive.png" alt="" /></p>

<h2 id="section-2">安装和配置</h2>
<p>在windows下安装 Tex Live 2012，先下载DVD ISO，然后安装即可。假设安装到<code>D:\texlive</code>。</p>

<p>安装完后，将<code>D:\texlive\2012\bin\win32</code>添加到PATH环境变量。这样Texmaker，Texstudio就不用配置了，安装后即可正常编译。如果没有添加到PATH环境变量，则在Texmaker，Texstudio中指定一些exe文件的绝对路径。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Octopress配置]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130402"/>
    <updated>2013-04-02T15:35:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/my-octopress-configuration</id>
    <content type="html"><![CDATA[<h2 id="section">实时预览</h2>
<p>使用如下命令可以实现实时预览：</p>

<p><code>bash
rake preview  
</code></p>

<p><code>rake preview</code> 会自动监视文件的变化，重新生成静态页面。因此修改markdown文件后，只需要在浏览器里刷新一下页面，就立刻可以看到效果。不过如果修改了_config.yml的话，则需要Ctrl+C终止，用<code>rake generate</code>重新生成，才能看到效果。</p>

<h2 id="section-1">嵌入代码块</h2>
<p>见官方文档<a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a>。</p>

<p>Octopress是一款为hacker量身定制的博客系统，当然内置了代码高亮的功能！它的代码高亮功能是通过Pygments实现的，配色方案用的是Solarized，堪称完美。</p>

<p>Octopress支持多种方式嵌入代码，可以直接嵌入代码，也可以引用github上的gist 。</p>

<p>我喜欢用<strong>三个反引号</strong>直接嵌入代码，比 <code>codeblock</code>要简洁。</p>

<h3 id="mathjax">启用MathJax</h3>
<p>在<code>source/_includes/custom/footer.html</code>的第一行加入如下代码：</p>

<p><code>javascript
&lt;!-- mathjax config similar to math.stackexchange --&gt;
&lt;script type="text/x-mathjax-config"&gt;
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
&lt;/script&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;
</code></p>

<p>这样就引入了MathJax的JS包，可以直接在markdown文件里直接写公式了，例如 $\dfrac {\pi}{2}$。</p>

<p>上面的代码也可以在<code>source/_includes/custom/header.html</code>里添加，不过这样会使得页面的加载速度变慢。还可以在<code>source/_layouts/default.html</code>里添加。</p>

<!--more-->

<p>有一个问题，rdiscount这个解析器，对 mathjax 大部分支持，某些细节处理的不好，举个例子，它会在动把公式中的 <code>^n</code>转换成<code>&lt;sup&gt;n&lt;/sup&gt;</code>，例如<code>$2^n$</code>会解析成<code>$2&lt;sup&gt;n&lt;/sup&gt;$</code>，这样就破坏了整个公式，导致公式无法解析。参考<a href="http://christopherpoole.github.io/using-mathjax-on-github-pages/">这里</a>一段话：
&gt; as discount for example automatically replaces <code>x^2</code> with <code>x&lt;sup&gt;2&lt;/sup&gt;</code> which interrupts the MathJax rendering.</p>

<p>因此要换一个解析器，<a href="http://maruku.rubyforge.org/">Maruku</a> 和 <a href="http://kramdown.rubyforge.org/">Kramdown</a> 都可以，由于Maruku主页PR=4，Kramdown的主页PR=5，我选择了Kramdown。</p>

<p><strong>用Kramdown代替Rdiscount</strong><br />
修改Gemfile，增加一行：</p>

<p><code>
gem 'kramdown', '~&gt; 0.14'
</code>
很多博客都说要配套安装coderay这个gem，其实是没有必要的，只要代码块以 ``` 开始和结束，自带的pygments就能实现代码高亮。</p>

<p>在Git Bash输入如下命令：</p>

<p><code>bash
bundle install
</code>
就会自动安装kramdown。</p>

<p>然后在_config.yml 文件中，见markdown: rdiscount 修改为  markdown: kramdown。</p>

<p>使用kramdown，感觉它的语法要求比rdiscout严格，例如每个代码块开头，必须有一个空行，否则高亮就会失败，大家可以试试看。每个标题掐面，也必须有一个开头。</p>

<p>kramdown的两种公式，display和inline，都是以<code>$$</code>开头和结尾的，display模式时，<code>$$</code>要单独占一行。这跟标准的LaTex有点不一样。参考<a href="http://kqueue.org/blog/2012/01/05/hello-world/">这里</a>。</p>

<p><strong>右击公式全屏空白</strong>：这时候右击公式，全屏空白。解决这个问题很简单，只需在 <code>sass/base/_theme.scss</code>添加”#main”即可：</p>

<p><code>
body {
  &gt; div#main {
    background: $sidebar-bg $noise-bg;
</code></p>

<p>本节参考了<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Writing Math Equations on Octopress</a> 和 <a href="http://jasonllinux.github.com/blog/2012/11/06/write-latex-in-octopress/">在Octopress中使用Latex公式</a>。</p>

<h2 id="kramdown">kramdown的扩展语法</h2>
<p>kramdown扩展了标准markdown的语法，有很多使用的功能。<a href="http://kramdown.rubyforge.org/syntax.html">语法见官网文档</a>。这里选一些我常用的。</p>

<p><strong>脚注(footnote)</strong><br />
脚注定义是：<code>[^1]:</code>，数字可以改变，引用语法是<code>[^1]</code>。没有被引用到的参考文献，会被忽略掉。</p>

<p><strong>表格</strong><br />
一下是一个示例：</p>

<pre><code>|-----------------+------------+-----------------+----------------|
| Default aligned |Left aligned| Center aligned  | Right aligned  |
|-----------------|:-----------|:---------------:|---------------:|
| First body part |Second cell | Third cell      | fourth cell    |
| Second line     |foo         | **strong**      | baz            |
| Third line      |quux        | baz             | bar            |
|-----------------+------------+-----------------+----------------|
</code></pre>

<p>更详细说明见官网。</p>

<h2 id="excerpts">首页只显示部分正文(Excerpts)</h2>
<p>Octopress中，可以使用 <code>&lt;!--more--&gt;</code>，这样首页只显示一部分正文，并在每篇文章底下加一个Read on超链接。</p>

<h2 id="section-2">插入图片</h2>
<p>使用<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>。</p>

<p>语法</p>

<p><code>
<img class="[class names]" src="/path/to/image" title="[width] [height] [title text [alt text]]" >
</code></p>

<p>例子</p>

<p><code>
<img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">
</code></p>

<h2 id="about-me-">添加about me 边栏</h2>
<p>编辑 source_includes\custom\asides\about.html，内容如下：</p>

<p>```</p>
<section>
  <h1>About Me</h1>
  <p>一句话自我介绍.</p>
  <p>新浪微博: <a href="http://weibo.com/soulmachine">@soulmachine</a><br />
     Twitter: <a href="https://twitter.com/#!/soulmachine">@soulmachine</a><br />
     Other: <a href="https://github.com/soulmachine">Github</a>, <a href="https://plus.google.com/103519507226474510310">Google+</a>, <a href="http://www.linkedin.com/in/soulmachine">LinkedIn</a>, <a href="http://www.quora.com/Jason-Day-2">Quora</a></p>
  
</section>
<p>```
在 _config.yml 的 default_asides 里添加 custom/asides/about.html。</p>

<h2 id="about">添加about页面</h2>

<p><code>
rake new_page[about]
</code>
会生成 source/about/index.markdown 文件。</p>

<p>编辑该文件的内容。</p>

<p>然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h2 id="section-3">社会化分享</h2>
<p>使用addthis.com的分享按钮，在网站上获取代码，粘贴到<code>source/_includes/post/sharing.html</code>中，例如我的代码如下：</p>

<p><code>html
&lt;div class="sharing"&gt;
  &lt;!-- AddThis Button BEGIN --&gt;
  &lt;div class="addthis_toolbox addthis_default_style addthis_32x32_style"&gt;
    &lt;a class="addthis_button_sinaweibo"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_facebook"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_twitter"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_google_plusone_share"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_delicious"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_digg"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_reddit"&gt;&lt;/a&gt;
    &lt;a class="addthis_button_compact"&gt;&lt;/a&gt;&lt;a class="addthis_counter addthis_bubble_style"&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;script type="text/javascript" src="http://www.yanjiuyanjiu.com//s7.addthis.com/js/300/addthis_widget.js#pubid=undefined"&gt;&lt;/script&gt;
  &lt;!-- AddThis Button END --&gt;
</code></p>

<p>在_config.yml 中，将twitter, google+ 和facebook like的按钮设置为false，取消显示，因为 AddThis 已经集成了这三者。</p>

<h2 id="section-4">社会化评论</h2>
<p><del>启用Disqus，填入 short name即可。</del>Disqus在国外流行，在国内的加载速度太慢，而且只有twitter, facebook, g+，没有照顾到国内的用户习惯，因此替换成国内的<a href="www.duoshuo.com">多说</a>。参考这篇博客 <a href="http://ihavanna.org/Internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">为 Octopress 添加多说评论系统</a>。<code>source/_includes/post/duoshuo_thread.html</code>的代码略有不同，添加了<code>data-title="Category: tools"</code>，否则侧边栏的最近评论，标题为空白，感谢<a href="http://yrzhll.com/blog/2012/12/12/comment/">碟姐 - 在octopress中添加多说的最近评论</a>指出了这一点，代码如下：</p>

<p><code>javascript
&lt;!-- Duoshuo Comment BEGIN --&gt;
&lt;div class="ds-thread" data-title="Category: tools"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var duoshuoQuery = {short_name:"yanjiuyanjiu"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = 'http://static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0] 
		|| document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
&lt;/script&gt;
&lt;!-- Duoshuo Comment END --&gt;
</code></p>

<p>_config.yml 中的配置也略有不同： </p>

<p><code>
duoshuo_comments: true
duoshuo_short_name: yanjiuyanjiu
duoshuo_asides_num: 5      # 侧边栏评论显示条目数
duoshuo_asides_avatars: 1   # 侧边栏评论是否显示头像
duoshuo_asides_time: 1      # 侧边栏评论是否显示时间
duoshuo_asides_title: 1     # 侧边栏评论是否显示标题
duoshuo_asides_admin: 0     # 侧边栏评论是否显示作者评论
duoshuo_asides_length: 32   # 侧边栏评论截取的长度
</code></p>

<h2 id="section-5">设置固定链接</h2>
<p>在 _config.yml 里，找到 permalink，设置如下：</p>

<p><code>
permalink: /blog/:year:month:day/ 
</code>
效果就是<code>www.example.com/blog/20130403/</code>。模仿的是豆瓣的URL格式。</p>

<p>参考官方文档<a href="https://github.com/mojombo/jekyll/wiki/Permalinks">jekyll Permalinks</a>。</p>

<h2 id="section-6">侧边栏显示分类目录</h2>
<p>使用第三方插件 <a href="https://github.com/tokkonopapa/octopress-tagcloud">octopress-tagcloud</a>。</p>

<h2 id="section-7">友情链接</h2>
<p>在<code>source\_includes\custom\asides</code> 目录下添加一个blogroll.html文件，模仿about.html，添加一些友情链接，例如：</p>

<p>```</p>
<section>
  <h1>友情链接</h1>
  <ul>
    <li>
      <a href="http://coolshell.cn/">酷壳CoolShell</a>
    </li>
    <li>
      <a href="http://mindhacks.cn/">刘未鹏MIND HACKS</a>
    </li>
    <li>
      <a href="http://blog.codingnow.com/">云风</a>
    </li>
    <li>
      <a href="http://www.cnblogs.com/Solstice/">陈硕</a>
    </li>
  </ul>
</section>
<p>```
然后在 _config.yml 文件中，在 default_asides 的数组中添加 <code>custom/asides/blogroll.html</code>。</p>

<h2 id="section-8">中文目录</h2>
<p>TODO</p>

<h2 id="section-9">修改字体</h2>
<p>Octopresss默认使用的是 google webfonts，见<code>source/_includes/custom/head.html</code>里的两行代码。Google Webfonts是个好东西，但遗憾的是它没有中文字体。所以你用<strong>粗体</strong>，发现并没有变粗，就是这个原因。</p>

<p>首先，将head.html中的两行代码注释掉，省去了加载字体，加快网页加载速度。</p>

<p>```
<!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<!-- <link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"> -->
<!-- <link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"> --></p>

<p>```
参考 这篇博客 <a href="http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/">最佳 Web 中文默认字体</a>，在<code>sass/custom/_fonts.scss</code>中添加如下三行代码：</p>

<p><code>
$heading-font-family: arial, sans-serif;
$header-title-font-family: arial, sans-serif;
$header-subtitle-font-family: arial, sans-serif;
</code>
刷新网页，可以看见中文的粗体变黑了。</p>

<h2 id="section-10">一些汉化工作</h2>
<p>在 _config.yml中，把 <code>Read on</code> 改为 “继续阅读”。
在 <code>source/_includes/custom/asides</code>目录下，将”Recent Comments”改为“最新评论”，”Categories”改为“分类目录”，将<code>source/_includes/asides/recent_posts.html</code>中”Recent Posts”改为“最新文章”。</p>

<h2 id="section-11">添加统计代码</h2>
<p>在_config.yml填入 Google Analytics Tracking ID，例如 <code>UA-7583537-4</code>。</p>

<h2 id="section-12">第三方主题和插件</h2>
<p>主题：<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a><br />
插件：<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd party plugins</a></p>

<h2 id="section-13">在一台新电脑上恢复</h2>
<p>如果换了一台电脑，怎样迅速恢复环境呢？参考 <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a>。 <strong>注意，在windows上，要首先安装python，否则，虽然所有操作可以成功，不报错误，但是你发现打开后首页一篇空白，我当时百思不得其解，因为没有任何错误信息，最后去看生成的文件，所有index.html都是0字节，就猜测应该是编译出了问题。安装python就好了，linux默认是有Python的，就没有这个问题，windows真是坑爹！以后只在windows下做编辑类的工作，编译和运行都放到Linux下。</strong></p>

<h2 id="todo">TODO</h2>
<p>修改字体大小</p>

<p>添加TAG支持</p>

<h2 id="section-14">参考资料</h2>
<ol>
  <li><a href="http://shanewfx.github.com/blog/2012/08/13/improve-blog-theme/">Octopress主题改造</a></li>
  <li></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用github + Octopress 搭建免费博客]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130401"/>
    <updated>2013-04-01T15:14:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-github-and-octoperss-to-create-a-free-blog</id>
    <content type="html"><![CDATA[<h3 id="section">前提条件</h3>
<p>注册一个github账号。</p>

<p>任何资料，都不如<a href="http://octopress.org/docs/">Octopress</a> 和<a href="https://help.github.com/categories/20/articles">Github Pages</a>的官方文档，建议首先阅读官方文档。</p>

<h3 id="github-pages">GitHub Pages快速体验</h3>
<p>在GitHub网站上，点击右上角的+号图标，创建一个新的Repo，Repository 的名字必须为 username.github.com。然后点击Settings进入该Repo的设置页面。看到”Automatic Page Generator”，说明这个Repo已经启用了GitHub Page。点击按钮进入设置。</p>

<p>在”Create a GitHub User Page”填写一些基本信息，点击右下角的”Continue to Layout”。布局就用默认的，点击绿色的”Publish”按钮。</p>

<p>大功告成，输入”username.github.com”，看到一个页面没？这就是你刚刚创建的一个页面。</p>

<!--more-->

<p>GitHub Pages分为两种类型，一种是”User and Org Pages”，一种是”Project Pages”。前者是用户的主页，一个用户仅有一个。后者是每个项目的主页。见github page官方的文档 <a href="https://help.github.com/articles/user-organization-and-project-pages">Creating Pages with the automatic generator</a>。</p>

<p>本文创建的是第一种类型。</p>

<p>这篇博客 <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 - 阮一峰的网络日志</a>  很通俗易懂，不过它创建的是第二种类型，在一个Repo上新建了一个branch，并命名为gh-pages。</p>

<p>下面正式开始折腾。</p>

<h3 id="msysgit">安装 msysgit并配置</h3>

<ul>
  <li>下载<a href="http://msysgit.github.com/">msysgit</a>, 然后双击exe文件开始安装。</li>
  <li>双击桌面图标Git Bash，启动一个shell，输入如下命令进行配置：</li>
</ul>

<p>产生公钥ssh key，默认全部回车</p>

<p><code>bash
    ssh-keygen -C github-account-email -t rsa
</code></p>

<p>Note: username@email.com需要更换成你自己的在Github上注册的Email地址。
这样会在用户目录(C:\Documents and Settings\UserName)下产生一个.ssh文件夹，里面为对应的SSH Keys，其中id_rsa.pub是Github需要的SSH公钥文件。</p>

<p>在Github的Account Settings里选择SSH Keys，在其中将id_rsa.pub文件里内容拷贝至 其中的Key里。</p>

<p>这样以后就可以直接使用Git和GitHub了。  </p>

<p>测试一下</p>

<p><code>bash  
ssh -T git@github.com
</code>  </p>

<p>如果出现 hi xxx! You’ve successfully authenticated, bug GitHub does not povide shell access。说明SSH链接成功。</p>

<p>接下来配置其他信息。</p>

<p><code>bash  
	git config --global user.name github-username  
	git config --global user.email github-account-email  
	git config --global github.user github-username  
	git config --global credential.helper cache  
	git config --global credential.helper 'cache --timeout=3600'
</code>
本节参考了 <a href="http://www.cnblogs.com/kysnail/archive/2012/03/16/2399589.html">msysGit 安装后的配置</a>。</p>

<h3 id="octopress">安装Octopress</h3>
<p>参考官方文档<a href="http://octopress.org/docs/setup/">setup</a>.<br />
<strong>安装Ruby</strong><br />
Octopress 2.0 需要 Ruby 1.9.3，安装其他版本的Ruby可能会行不通。</p>

<p>如果是Linux，使用RVM来安装Ruby，如果是Windows，则使用<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>。在这个<a href="http://rubyinstaller.org/downloads/">下载页面</a>下载Ruby 1.9.3-p392和DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe)，双击exe文件进行安装。<br />
<strong>安装DevKit</strong><br />
双击DevKit的exe文件，解压到C:\DevKit，在CMD下执行如下命令</p>

<p><code>bash  
cd C:\DevKit
ruby dk.rb init
ruby dk.rb install
gem install rdiscount --platform=ruby
</code></p>

<p><strong>安装Octopress</strong><br />
下载Octopress。</p>

<p><code>bash  
cd d:\github  
git clone git://github.com/imathis/octopress.git octopress  
cd octopress  
ruby --version  # Should report Ruby 1.9.3
rbenv rehash  # 可选，如果安装了rbenv，就需要执行这一步
</code>  </p>

<p><strong>注意</strong>: rubygems.org在中国的下载速度很慢，会导致bundle install这一步下载gems的速度很慢，可能需要等待几个小时。因此需要事先切换到国内的镜像源。</p>

<p>用记事本打开octopress目录下的Gemfile，将第一行修改为</p>

<blockquote>
  <p>source “http://ruby.taobao.org”</p>
</blockquote>

<p>然后可以开始安装依赖的gems了。</p>

<p><code>bash  
bundle install
</code><br />
正常的话应该可以看到一行行的Installing xxx，表示正在安装所需要的gem。</p>

<p>安装默认的Octopress主题。</p>

<p><code>bash  
rake install
</code><br />
如果这一步出现问题，则试一下 bundle update再执行 rake install。</p>

<h3 id="github">部署到GitHub</h3>
<p>将Octopress和自己的Repo关联起来</p>

<p><code>bash  
rake setup_github_pages
</code><br />
编译生成JeKyll所需要的静态文件</p>

<p><code>bash  
rake generate
</code><br />
这个命令主要是根据source目录的内容，编译生成JeKyll所需要的静态文件，存放到public目录下。source 目录对应着git上的source分支。</p>

<p><strong>UTF-8 编码</strong><br />
Windows预设是Big5编码,所以要想’rake generate’的时候不报编码错误,我们需要设置一下编码! 方法有两个,一个是直接在Git Bash中设置环境:</p>

<p><code>bash  
set LANG=zh_CN.UTF-8  
set LC_ALL=zh_CN.UTF-8
</code><br />
还有一个是在环境变量中加入这两个变量: 右击电脑-&gt;属性，新添加LANG和LC_ALL两个环境变量，值为为zh_CN.UTF-8.</p>

<p>然后在Git Bash中做如下设置:</p>

<p><code>bash  
echo "export LANG LC_ALL" &gt; ~/.bash_profile
</code></p>

<p>预览</p>

<p><code>bash  
rake preview
</code>
用浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a>，就可以看到效果了。</p>

<p>部署到github</p>

<p><code>bash  
rake deploy
</code><br />
该命令首先清空_deploy目录，然后将public目录整个拷贝过来，然后commit到github。_deploy 目录对应着master分支。</p>

<p>备份source到github</p>

<p><code>
git add .
git commit -m 'your message'
git push origin source
</code>
source 目录下保存了所有的markdown源文件，是博客的原始数据，以及一些模板文件。因此很有必要备份。用上述命令提交到github，这样就用git管理起来了，再也不用担心数据丢失了。</p>

<p><strong>终止预览</strong><br />
启用<code>rake preview</code>后，直接按<code>ctrl+c</code>无法正常终止该进程，老提示<code>终止批处理操作吗（Y/N）？</code>，这时候可以另开一个Git Bash窗口，使用<code>ps aux | grep ruby</code>命令找出<code>pid(第一个数值)</code>，然后执行<code>kill &lt;pid&gt;</code>来停止该进程(参考<a href="http://linuxabc.heroku.com/blog/octopress-on-heroku-2">octopress on heroku (二)</a>)。  </p>

<h3 id="section-1">绑定域名</h3>
<p>参考官方文档<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>。</p>

<p>非常简单，在master分支的根目录，添加一个文本文件，名字为CNAME，里面的内容就是要绑定的域名，例如本博客CNAME文件的内容是：</p>

<blockquote>
  <p>www.yanjiuyanjiu.com</p>
</blockquote>

<p>然后去DNSPod，添加一条CNAME，指向 username.github.com。例如我的为：</p>

<p><code>
www	CNAME	默认	soulmachine.github.com.		-	600
</code></p>

<p>很多人喜欢去掉www，用xxx.com的形式来访问，不过大家去试一下，在浏览器输入qq.com, douban.com, baidu.com，发现都会自动跳转到www，也就是说这些大网站，目前也是用www.example.com的域名为主，因此建议大家也这样做。</p>

<p>用www, blog之类的二级域名，还有个好处是方便升级，比如新版本用www1指向，等测试完成后，改成www指向，无缝切换。</p>

<p>如何让example.com 自动变成www.example.com呢？需要用 301重定向，在DNSPod上非常简单，添加一条显性URL即可，例如我的是：</p>

<p><code>
@	显性URL	默认	http://www.yanjiuyanjiu.com	-	600
</code></p>

<p>在使用Octopress的时候，每次<code>rake generate</code>, <code>rake deploy</code>后，master分支下面的CNAME文件消失了。正确的做法是，把CNAME文件放到在 source 目录下，其余的都删掉，<code>rake generate</code> 会自动拷贝到public目录下，<code>rake deploy</code>再拷贝public目录内容到_deploy目录，并提交到master分支。</p>

<h3 id="section-2">参考资料</h3>
<ol>
  <li><a href="http://corey600.github.com/blog/2013/02/28/use-github-and-octopress-create-blog/">【原创】用Github和Octopress搭建博客</a></li>
  <li><a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">试用Octopress</a></li>
  <li><a href="http://rubyer.me/blog/134/">windows下安装DevKit</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/12/21/recover-octopress/">在新Windows系统中重新部署Octopress</a></li>
  <li><a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VisualVM连接 tomcat 服务器时，如何配置tomcat启动JMX]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120811"/>
    <updated>2012-08-11T21:37:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/configure-tomcat-jmx-to-allow-visualvm-connect-tomcat</id>
    <content type="html"><![CDATA[<p>用VisualVM连接 tomcat 服务器时，需要让tomcat启动JMX，在catalina.sh 中添加一行代码即可：</p>

<p><code>bash
JAVA_OPTS=”$JAVA_OPTS -Djava.rmi.server.hostname=192.168.0.123 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=8086 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false
</code>
注意，用hostname -i 查看是否为127.0.01，这步非常重要,否则会连接失败，如果是，必须要配置-Djava.rmi.server.hostname。</p>

<p>参考： <br />
<a href="http://blog.tty.nl/2010/09/03/using-visualvm-to-fix-live-tomcat-and-jvm-problems/">Using VisualVM to fix live Tomcat and JVM problems</a><br />
<a href="http://blog.csdn.net/linghunhong/article/details/6438572">JVM内存监控:visualVM jconsole jstatd jmap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装和配置CentOS服务器的详细步骤]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120423"/>
    <updated>2012-04-23T20:43:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/install-and-configure-a-centos-server-from-scratch</id>
    <content type="html"><![CDATA[<p>这是我安装CentOS服务器的过程，记录下来，与大家一起分享。</p>

<h2 id="section">安装操作系统</h2>
<p>CentOS 6.2 ，CentOS-6.2-i386-bin-DVD1.iso（32位） ，CentOS-6.2-x86_64-bin-DVD1.iso（64位）</p>

<p>安装 CentOS时，选择 “Basic Server”<br />
root密码：root123<br />
CentOS 自带了ssh  </p>

<p>安装完操作系统后，添加一个用户 dev</p>

<p>``` bash
[root@localhost ~]$ useradd dev</p>

<p>```
然后密码设为 dev123</p>

<p><code>bash
[root@localhost ~]$ passwd dev
</code></p>

<p>给予 sudo 权限</p>

<p><code>bash
[root@localhost ~]$ chmod u+w /etc/sudoers
[root@localhost ~]$ vim /etc/sudoers
# 在root ALL=(ALL) ALL 下 添加dev ALL=(ALL) ALL
[root@localhost ~]$ chmod u-w /etc/sudoers 
</code></p>

<h2 id="section-1">设置上网</h2>
<p>安装完操作系统后，还不能上网，配置DHCP方式上网：</p>

<p><code>bash
vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
HWADDR="00:0C:29:BD:E1:19"
NM_CONTROLLED="yes"
ONBOOT="yes"
BOOTPROTO=dhcp
USECTL=no
TYPE=Ethernet
PEERDNS=yes
#保存退出
sudo service network restart
</code></p>

<!-- more -->

<p>或者，配置静态IP</p>

<p><code>bash
DEVICE="eth0"
HWADDR="00:0C:29:10:F4:4C"
ONBOOT="yes"
BOOTPROTO=static
TYPE=Ethernet
IPADDR=192.168.0.162
NETMASK=255.255.255.0
BROADCAST=192.168.0.255
NETWORK=192.168.0.0
#保存退出  
#修改/etc/sysconfig/network
sudo vim /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=localhost.localdomain
GATEWAY=192.168.0.1
#保存退出，重启网络
sudo service network restart
</code>
如果失败，比如IP已被占用，换一个IP试试</p>

<p>修改DNS，即时生效</p>

<p><code>bash
sudo vim /etc/resolv.conf
nameserver 192.168.0.1
# google提供的域名服务器
nameserver 8.8.8.8
search localhost
</code></p>

<h2 id="section-2">安装常用软件</h2>
<p>有两种方式，方法一，去官网下载已经编译好的二进制文件，或源代码，编译安装
方法二，用yum 命令安装，安装官方yum源里已经编译好的程序包。<br />
第一种方式要敲很多命令，比yum麻烦，但是可以预先下载好文件，省略了下载的时间，整体速度比yum安装方式快很多，而且可以安装最新版。推荐第一种方式</p>

<p>第二种方式操作简单，敲打的命令少，但是往往yum源的更新速度跟不上各个软件的官网速度，用Yum安装的版本经常比较旧。</p>

<p>yum的命令形式一般是如下：<code>yum [options] [command] [package ...]</code>，其中的[options]是可选的，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。[command]为所要进行的操作，[package …]是操作的对象。</p>

<p><code>bash
#yum search package-name # 在线搜索包 
#yum list installed # 列出所有已经安装的包
#
#sudo yum install package-name # 安装程序包 
#sudo yum groupinsall group-name 安装程序组
#
#sudo yum remove package-name 删除程序包
#sudo yum groupremove group-name 删除程序组
#
#yum update #全部更新
#yum update package-name #更新程序包
#sudo yum groupupdate groupn-name 升级程序组
#sudo yum upgrade # 更新源列表
#yum upgrade package-name #升级程序包
#sudo yum clean all # 清除缓存
#更新
sudo yum update
#清理缓存
sudo yum clean all &amp;&amp; yum clean metadata &amp;&amp; yum clean dbcache
</code></p>

<h2 id="section-3">安装编译工具</h2>

<h3 id="section-4">方法一</h3>
<p>去 http://gcc.gnu.org/ 下载源码</p>

<p><code>bash
# TODO
</code></p>

<h3 id="section-5">方法二</h3>

<p><code>bash
sudo yum groupinstall "Development Tools"
</code>
该命令类似于 Ubuntu 下的<code>apt-get install build-essential</code>，会自动安装一下软件包：autoconf automake bison byacc cscope ctags diffstat doxygen flex gcc gcc-c++ gcc-gfortran git indent intltool libtool patchutils rcs redhat-rpm-config rpm-build subversion swig systemtap，同时安装了以下依赖包：apr, apr-util, 等等。</p>

<h2 id="jdk">安装JDK</h2>

<p><code>bash
#删除旧的JDK
yum list installed | grep jdk
#复制显示出来的JDK，卸载
sudo yum remove java-1.6.0-openjdk.x86_64
#安装新的jdk
</code></p>

<h3 id="section-6">方法一</h3>

<p><code>bash
#从官网下载最新版的，当前是jdk6u32
#开始安装
chmod u+x chmod u+x jdk-6u32-linux-x64-rpm.bin
sudo ./jdk-6u32-linux-x64-rpm.bin
#设置环境变量，.bash_profile是当前用户，/etc/profile是所有用户的
sudo vim /etc/profile
#在末尾添加
export JAVA_HOME=/usr/java/default
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# 保存退出，输入以下命令使之立即生效：
source /etc/profile
# 测试
java -version
</code></p>

<h3 id="section-7">方法二</h3>

<p><code>bash
yum search jdk
# java-1.6.0-openjdk只包含了JRE，如果在这台机器上开发java程序，则需要安装JDK，
# 要选择 java-1.6.0-openjdk-devel，在服务器上我们只需要运行java程序，因此选择前者
sudo yum install java-1.6.0-openjdk-devel
# 使用 alternatives 工具设置默认JDK，参考：Installing a Java Development Kit on Red Hat Enterprise Linux
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
# 设置环境变量
# 查询JDK路径
whereis java
ll /usr/bin/java
ll /etc/alternatives/java #这是可以看到JDK路径了
sudo vim /etc/profile
# 在末尾添加
export JAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
#保存退出，输入以下命令使之立即生效：
# source /etc/profile
# 测试
java -version
</code></p>

<h2 id="apache">安装 apache</h2>

<h3 id="section-8">方法一</h3>
<p>源码在官网 http://httpd.apache.org/ 下载。<br />
先下载apt, apr-util, pcre三个库，httpd 在编译时需要用到这三个库<br />
apr, apr-util官网 http://apr.apache.org , pcre官网为 <a href="http://pcre.org">http://pcre.org </a></p>

<p>``` bash
# 编译，安装 apr
tar -jxf apr-1.4.6.tar.bz2
cd apr-1.4.6
./configure
make
sudo make install    # 默认会安装到 /usr/local/apr/
cd ~
#编译，安装 apr-util
tar -jxf apr-util-1.4.1.tar.bz2
cd apr-util-1.4.1
./configure –with-apr=/usr/local/apr/
make
sudo make install    # 默认会安装到 /usr/local/apr/
cd ~
#编译，安装 pcre
tar -jxf pcre-8.30.tar.bz2
cd  pcre-8.30
./configure –with-apr=/usr/local/apr/
make
# By default, <code>make install' installs the package's commands under
#</code>/usr/local/bin’, include files under `/usr/local/include’, etc. 
sudo make install
cd ~
#编译，安装 apache
tar -jxf httpd-2.2.22.tar.bz2
cd httpd-2.2.22
./configure
make
sudo make install    # 默认会安装到/usr/local/apache2/
cd ~
#添加防火墙规则，让防火墙允许 apache的端口 80通过
sudo vim /etc/sysconfig/iptables
#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 “REJECT –reject-with” 的行的前面
-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT
sudo service iptables restart
#测试
sudo /usr/local/apache2/bin/apachectl start
#在浏览器输入 http://ip地址 ，如果看到“It works”，说明安装成功
/usr/local/apache2/bin/apachectl stop</p>

<h1 id="section-9">设置为开机启动</h1>
<p>#将httpd注册为服务，通过chkconfig实现开机启动
#以apachectl 为模板
sudo cp /usr/local/apache2/bin/apachectl /etc/init.d/httpd
sudo vim /etc/init.d/httpd
# 在第一行 #!/bin/sh，添加如下一行，使其支持chkconfig命令
# chkconfig: 2345 85 15
# 保存，退出VIM编辑器
sudo chmod u+x /etc/init.d/httpd
sudo chkconfig –add httpd
sudo chkconfig httpd on
#检查一下，是否添加成功
chkconfig –list httpd 
```</p>

<h3 id="section-10">方法二</h3>

<p><code>bash
sudo yum install httpd
#可选？sudo yum install httpd-devel
#测试
#启动 apache http server
sudo service httpd start
#添加规则，让防火墙允许 apache的端口 80
sudo vim /etc/sysconfig/iptables
#添加如下一行，位置必须要放在 含有 "REJECT --reject-with" 的行的前面
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
sudo service iptables restart
#可以在浏览器输入 http://ip地址 测试了
#设置为开机启动
sudo chkconfig httpd on
</code></p>

<h2 id="mysql">安装 mysql</h2>

<h3 id="section-11">方法一</h3>

<p><code>bash
#去官网下载 Oracle &amp; Red Hat 6的安装包，64位为MySQL-5.5.23-1.el6.x86_64.tar，
#32位为 MySQL-5.5.23-1.el6.i686.tar
tar -xf MySQL-5.5.23-1.el6.x86_64.tar
#加 --force 是因为可能会与mysqllib库冲突
sudo rpm -ivh --force  MySQL-server-5.5.23-1.el6.x86_64.rpm
sudo rpm -ivh MySQL-client-5.5.23-1.el6.x86_64.rpm
# 启动 mysql 服务器
sudo service mysql start
#设置为开机启动
sudo chkconfig mysql on
</code></p>

<h3 id="section-12">方法二</h3>

<p><code>bash
sudo yum install mysql-server
sudo chgrp -R mysql /var/lib/mysql
sudo chmod -R 770 /var/lib/mysql
# 启动 mysql 服务器
sudo service mysqld start
#设置为开机启动
sudo chkconfig mysqld on
</code></p>

<h3 id="section-13">公共的操作</h3>

<p><code>bash
# root 初始密码为空，修改root密码
mysql -u root
mysql&gt; use mysql;
mysql&gt; update user set password=password('root123') where user='root' AND host='localhost';
mysql&gt; flush privileges;
# 打开MySQL中root账户的远程登录，参考：如何打开MySQL中root账户的远程登录mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";
mysql&gt; update user set password=password('root123') where user='root' AND host='%';
mysql&gt; flush privileges;
mysql&gt; quit;
#添加防火墙规则，让防火墙允许 mysql 的端口 3306通过
sudo vim /etc/sysconfig/iptables
#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 "REJECT --reject-with" 的行的前面
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
sudo service iptables restart
</code></p>

<h2 id="php5">安装 php5</h2>

<h3 id="section-14">方法一</h3>
<p>TODO</p>

<h3 id="section-15">方法二</h3>

<p>``` bash
sudo yum install php php-pear
#重启 apache，以确保apache 加载PHP模块
sudo service httpd restart
# 在 /var/www/html/下新建一个index.php文件，用于测试
cd /var/www/html
sudo vim index.php
# 添加如下一行
<?php phpinfo(); ?>
# 在浏览器输入 http://xxx.xxx.xxx.xxx/index.php ，测试PHP是否成功安装</p>

<h1 id="phpmysql-php-mysql-">如果需要在PHP中支持mysql，则需要安装 php-mysql 模块</h1>
<p>sudo yum install php-mysql
# 如果需要在PHP中支持memcached，则需要安装 php-pecl-memcache 模块
sudo yum install php-pecl-memcache
#安装一些常用的PHP扩展模块
sudo yum install php-devel php-gd php-mbstring php-xml</p>

<h1 id="wordpress">可以安装一个wordpress进行测试，注意要修改文件夹权限</h1>
<p>sudo chown -R apache.apache /var/www/html
```</p>

<h2 id="memcached">安装 memcached</h2>

<h3 id="section-16">方法一</h3>

<p>``` bash
# memcached依赖libevent，首先要安装 libevent
# 去 http://libevent.org/ 下载libevent源码，然后编译，安装
tar -zxf libevent-2.0.18-stable.tar.gz
cd libevent-2.0.18-stable
./configure
make
sudo make install
# 对于64位操作系统(32位不需要)，还需要配置：
sudo ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64//libevent-2.0.so.5
# 去 http://www.memcached.org/ 下载 memcached，然后编译，安装
tar -zxf memcached-1.4.13.tar.gz
cd memcached-1.4.13
./configure
make
sudo make install
# 启动, -p，端口,-m，内存, -u
memcached -p 11211 -m 512m -u root -d
# 开机启动
# centos设置开机启动有两种方式，一是把启动程序的命令添加到/etc/rc.d/rc.local文件中，二是把写好的启动脚本添加到目录/etc/rc.d/init.d/，然后使用命令chkconfig设置开机启动。第二种方式可以用 service xxx start|stop来启动或停止，所以推荐第二种。
#将 memcached启动命令注册为一个服务
cd /etc/init.d/
sudo vim memcached
#代码如下，参考：Linux中将memcached注册成服务并可以随机器启动时启动服务
#chkconfig: 345 60 60
#!/bin/bash</p>

<p>start()
{
        echo -n $”Starting memcached: “
        /usr/local/bin/memcached -p 11211 -m 512m -u root -d
        echo “[OK]”
}
stop()
{
        echo -n $”Shutting down memcached: “
        memcached_pid_list=<code>pidof memcached</code> 
        kill -9 $memcached_pid_list
        echo “[OK]”
}
case “$1” in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        sleep 3
        start
        ;;
    *)
             echo $”Usage: $0 {start|stop|restart}”
        exit 1
esac
exit 0
#保存退出
sudo chmod u+x memcached
sudo chkconfig –add memcached
sudo chkconfig  memcached on
```</p>

<h3 id="section-17">方法二</h3>
<p>TODO</p>

<h2 id="tomcat6">安装 tomcat6</h2>

<h3 id="section-18">方法一</h3>

<p>``` bash
# 去 http://tomcat.apache.org 下载 apache-tomcat-6.0.35.tar.gz
tar -zxf apache-tomcat-6.0.35.tar.gz
sudo mv apache-tomcat-6.0.35 /usr/local/
cd /usr/local/apache-tomcat-6.0.35/bin
#【可选】添加环境变量
sudo vim /etc/profile
export CATALINA_HOME=/usr/local/apache-tomcat-6.0.35
#启动 tomcat 
sudo ./startup.sh
# 在浏览器输入 http://xxx.xxx.xxx.xxx:8080/ ，如果能看见tomcat页面，则表示安装成功了
#设置开机启动
#将 tomcat启动命令注册为一个服务
cd /etc/init.d/
sudo vim tomcatd
#代码如下
#chkconfig: 345 60 60
#!/bin/bash
CATALINA_HOME=/usr/local/apache-tomcat-6.0.35</p>

<p>start()
{
        echo -n $”Starting Tomcat: “
        $CATALINA_HOME/bin/startup.sh
        echo “[OK]”
}
stop()
{
        echo -n $”Shutting down Tomcat: “
        $CATALINA_HOME/bin/shutdown.sh
        echo “[OK]”
}
case “$1” in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        sleep 3
        start
        ;;
    *)
             echo $”Usage: $0 {start|stop|restart}”
        exit 1
esac
exit 0
#保存退出
sudo chmod u+x tomcatd
sudo chkconfig –add tomcatd
sudo chkconfig tomcatd on</p>

<h1 id="tomcat--8080-">添加防火墙规则，让防火墙允许 tomcat 的端口 8080 通过</h1>
<p>sudo vim /etc/sysconfig/iptables
#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 “REJECT –reject-with” 的行的前面
-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT
sudo service iptables restart
```</p>

<h3 id="section-19">方法二</h3>

<p><code>bash
#搜索一下 tomcat包的名字
yum search tomcat
sudo yum search tomcat6.noarch
</code></p>

<h2 id="python">安装Python</h2>

<h3 id="httpwwwpythonorg">方法一：去<a href="http://www.python.org">官网</a>下载源码，编译，安装</h3>

<p><code>bash
#开始解压，编译，安装
tar -jxf Python-3.2.3.tar.bz2
cd Python-3.2.3
# 查看一下说明, vim README
sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
./configure
make
#为了加快安装速度，这步可以省略
make test
#卸载旧的python，注意，不能用 yum remove python，这会卸载几百个包，最终损坏系统
sudo rpm -evf --nodeps python
sudo make install
#默认安装在 /usr/local/bin/python3
</code></p>

<h3 id="section-20">方法二</h3>

<p><code>bash
sudo yum install python
</code></p>

<h2 id="ruby">安装ruby</h2>

<h3 id="section-21">方法一</h3>

<p><code>bash
# http://www.ruby-lang.org/en/downloads/ ，选择 "Stable Snapshot"
tar -zxf ruby-1.9-stable.tar.gz
cd  cd ruby-1.9.3-p194/
./configure
make
sudo make install
</code></p>

<h3 id="section-22">方法二</h3>

<p><code>bash
sudo yum install ruby
</code></p>

<h2 id="go">安装go</h2>

<p><code>bash
#去官网 http://code.google.com/p/go/downloads 下载，go1.0.1.linux-i386.tar.gz (32位)，go1.0.1.linux-amd64.tar.gz（64位）
tar -zxf go1.0.1.linux-amd64.tar.gz
sudo mv go/ /usr/local/
#设置环境变量
sudo vim /etc/profile
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
source /etc/profile
#测试一下
go version
</code></p>

<h2 id="lua">安装lua</h2>

<p><code>bash
# 去官网下载源码，编译，安装。由于官网仅提供源码，故推荐源码编译安装方式。
# 去官网 http://www.lua.org/ 下载源码，lua-5.2.0.tar.gz
tar -zxf lua-5.2.0.tar.gz 
cd lua-5.2.0
# lua 依赖 readline.h 头文件
sudo yum install  readline-devel
make linux
sudo make install
#安装 google protobuf
#去官网 http://code.google.com/p/protobuf/下载
tar -jxf protobuf-2.4.1.tar.bz2
cd protobuf-2.4.1
./configure
make
sudo make install
#测试
protoc
</code></p>

<h2 id="section-23">清理安装包</h2>

<p><code>bash
cd ~
rm * -rf
</code></p>

<h2 id="section-24">压缩打包</h2>
<p>安装完后，可以Clone，压缩打包成一个zip文件，方便分享给别人。</p>

<p>在关机之前，有一件事需要做，</p>

<pre><code>sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0, 把HWADDR=.... 这行删掉
sudo rm /etc/udev/rules.d/70-persistent-net.rules
sudo shutdown -h now
</code></pre>

<p>如果没有执行上述命令，克隆后的虚拟机，开机后无法上网，重启网络，<code>sudo service network restart</code>也没有效果，会出现错误“Device eth0 does not seem to be present, delaying initialization.” </p>

<p>这是因为克隆后的虚拟机，它的MAC地址变了，即在它的.vmx文件里，MAC地址变了（<code>ethernet0.generatedAddress</code>这项），但是linux不知道这个变化，网络配置文件还是旧的，这样跟它的而真实mac不匹配，网络就无法启动。</p>

<p>执行上述命令，删除了<code>70-persistent-net.rules</code>后，相当于删除了旧的配置文件，在开机时会生成新的配置文件。</p>

<p>关机后，右击标签，选择”Manage-&gt;Clone”，选择”Create a full clone”，克隆完成后，关闭这台虚拟机的标签（否则文件夹里有一些临时垃圾文件），然后把文件夹压缩打包。以后就可以把这个zip包拷贝给周围的人，别人就不用经历一遍重装的过程了。</p>

<h2 id="section-25">参考资料</h2>
<p><a href="http://library.linode.com/lamp-guides/centos-6">LAMP Server on CentOS 6</a></p>

<p><a href="http://articles.slicehost.com/2008/2/6/centos-installing-apache-and-php5">CentOS - Installing Apache and PHP5</a></p>

<p><a href="http://fedorasolved.org/server-solutions/lamp-stack">Setting up a LAMP stack</a></p>

<p><a href="http://myohmy.blog.51cto.com/140917/327310">CentOS5.5使用yum来安装LAMP</a></p>

<p><a href="http://it.megocollector.com/?p=1719">Install Java JDK on CentOS without prompts using an automated script!</a></p>
]]></content>
  </entry>
  
</feed>
