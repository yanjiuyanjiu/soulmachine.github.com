<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language | 研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/blog/categories/language/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2014-01-27T02:31:26+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简洁的Scala]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130829"/>
    <updated>2013-08-29T21:38:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/concise-scala</id>
    <content type="html"><![CDATA[<p>Scala语言是很注重一致性(consistency)的，Scala的简洁性(concision)都是由其一致性带来的。</p>

<p>Scala的看上去很复杂，但是它在概念上是非常一致的。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。</p>

<h1 id="oo--fp">1. OO + FP</h1>

<h2 id="section">1.1 一切都是对象</h2>

<p>更精确地说，应该是“一切值都是对象”。</p>

<ul>
  <li>
    <p>整数, 浮点数等基本类型(primitive type)是对象  </p>

    <pre><code>  123.toByte
  3.14.toInt
</code></pre>

    <p>在Java中，primitive type不是对象，打破了一致性。</p>
  </li>
  <li>
    <p>函数是对象</p>

    <pre><code>  val compare = (x: Int, y: Int) =&gt; x &gt; y
  compare(1, 2)
</code></pre>
  </li>
  <li>
    <p>不再有静态方法(static method)和静态属性(static field)。Java中的静态方法(static method)和静态属性(static field)，有点打破了面向对象，因为它们不属于一个实例，而是属于类。在Scala中，静态方法和静态属性也属于对象，具体来说，属于Scala中的单例object。这样，静态成员和普通成员统一了起来，都附属于某个实例(instance)。</p>

    <pre><code>  object Dog {
    val sound = "wang wang" //static field
  }
</code></pre>
  </li>
</ul>

<h2 id="section-1">1.2 函数是值</h2>

<p>函数是一等公民，跟普通的值没区别</p>

<ul>
  <li>
    <p>可以当作参数传递</p>

    <pre><code>  val  compare = (x: Int , y: Int ) =&gt; x &gt;  y
  list sortWith compare
</code></pre>
  </li>
  <li>
    <p>不管它是实例的方法</p>

    <pre><code>  class AComparator  {
    def  compare(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith ( new  AComparator ).compare
</code></pre>
  </li>
  <li>
    <p>还是匿名子句</p>

    <pre><code>  object  annonymous extends scala.Function2[Int , Int , Boolean] {
    override  def  apply(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith annonymous 
</code></pre>
  </li>
</ul>

<h2 id="section-2">1.3 一切操作都是函数调用</h2>
<!-- more -->

<ul>
  <li>
    <p>运算符是函数调用</p>

    <pre><code>  1 +  1
  1.+(1)
  1.&gt;(0)
  1 &gt;  0
  (1 &gt;  0).&amp;(2 &gt;  1)
  (1 &gt;  0) &amp; 2 &gt;  1
  stack.push(10)
  stack push  10
  stack.pop
  stack pop
</code></pre>

    <p>注意，上述代码中，只有一个参数或零个参数的方法在调用时可以省略”.” 和”()”。</p>
  </li>
  <li>
    <p>更多的符号需要用作方法名</p>

    <pre><code>  def  !@#%^&amp;*\-&lt;=&gt;?|~:/ = println("noop" )
  def  √(x: Double ) = Math.sqrt( x)
  val  Π =  Math.Pi
  val  r =  √( 9*Π)
</code></pre>
  </li>
  <li>
    <p>‘&lt;’, ‘&gt;’ 更适合作方法名，所以用’[’ 和‘]’ 来表示类型参数</p>
  </li>
  <li>
    <p>for语句是函数调用</p>

    <pre><code>  for  (i &lt;- List(1, 2)) {
    println(i)
  }
  List(1, 2) foreach { i =&gt; println(i)}
  for  (i &lt;- List(1, 2))  yield {
    i +  10
  }
  List(1, 2) map {i =&gt; i +  10}
</code></pre>
  </li>
  <li>
    <p>更多的例子</p>

    <pre><code>  // synchronized is function call instead of keyword
  def  check = synchronized {
    // isInstanceOf is function call instead of keyword
    100.isInstanceOf[ String ] 
  }
</code></pre>
  </li>
  <li>
    <p>额外的好处：自左向右顺序书写语句</p>

    <pre><code>  stack.pop.asInstanceOf[ Int ] // (Integer) stack.pop() in Java
</code></pre>
  </li>
</ul>

<h2 id="section-3">1.4 一切操作都有返回值</h2>

<ul>
  <li>
    <p>默认返回最后一条语句的值，也可以用return 显式返回</p>

    <pre><code>  val  r1 = { // return 3
    val  a =  1
    val  b =  2
    a +  b
  }
  val  r2 =  if (true) 1 else 2
  val  r3 =  // return (): Unit
    for  (i &lt;- List(1, 2)) {
      println(i)
    }
  val  r4 =  // return List(11, 12)
    for  (i &lt;- List(1, 2))  yield {
       i +  10
    }
  val  r5 =  // return java.io.File
  try  {
     val  f =  new  File("afile")
     f
  }  catch {
     case ex: IOException  =&gt; null
  }
</code></pre>
  </li>
</ul>

<p>Scala里不再像C/C++, Java，区分语句(statement)和表达式(expression)。Scala里没有statement，只有expression，因此一切操作都是表达式，都有返回值。Scala可以说是<strong>expression-oriented</strong>。</p>

<p>关于语句和表达式的区别，可以看”Scala in depth”一书中的比较:</p>

<blockquote>
  <p><strong>Statement Versus Expression</strong> A statement is something that execute; an expression is something that evaluates to a value.</p>
</blockquote>

<h2 id="oo--fp-1">1.5 总结：一切都是对象+数据即操作，操作即数据 = OO + FP</h2>

<h1 id="type-system">2. 一致的类型系统(type system)</h1>

<h2 id="scala-class-hierarchy">2.1 scala class hierarchy</h2>

<p><img src="http://www.scala-lang.org/old/sites/default/files/images/classhierarchy.png"></p>

<h2 id="any">2.2 根类 Any</h2>

<p>Scala 上有一个共同的根类<strong>Any</strong>。Any统一了基本类型和引用类型。</p>

<h2 id="nullnothing">2.3 两个尾类Null和Nothing。</h2>

<p>JVM上的null是Null类，它是所有AnyRef的子类。</p>

<p>Nothing是所有类型（包括AnyVal和AnyRef）的子类。它没有值（实例），用于处理一些特殊情况，例如出错时返回该类型。</p>

<h2 id="invariant-covariant-contravariant">2.4 Invariant, Covariant, Contravariant</h2>

<h2 id="type-parameter-vs-abstract-type-member">2.5 类型参数(type parameter) VS. 抽象类型成员(abstract type member)</h2>

<pre><code>trait Pair[K, V] {
  def get(key: K): V
  def set(key: K, value: V)
}
class PairImpl extends Pair[Dog, Fox] {
  def get(key: Dog): Fox
  def put(key: Dog, value: Fox)
}
</code></pre>

<p>类型参数的名字会发散到所有子类和引用的类，因此改变类型名字时需要修改很多地方</p>

<pre><code>trait Pair{
  type K // deferred type
  type V // deferred type
  defget(key: K): V
  defset(key: K, value: V)
}
class PairImpl extends Pair{
  type K= Dog
  type V= Fox
  defget(key: K): V
  defset(key: K, value: V)
}
</code></pre>

<p>抽象类型成员，改变类型名字时，只需要修改一处地方</p>

<h1 id="section-4">4. 一些牛人的讨论</h1>

<p><a href="http://dcaoyuan.iteye.com/blog/502730">2 楼 dcaoyuan 2009-10-25</a>  </p>

<blockquote>
  <p>这次会上讲PPT时间有点不够，但这个PPT中提到的每句话都是仔细想过的，强调的是Scala中一些概念的一致性，比如，有关Scala的文章中常提到“值都是对象”，准确地说，应该是“值都是对象的实例”，还有，“操作、函数、参数可以互相转化，都是值，都是实例的对象”，这其实是Scala可以扩展的关键，也是OO+FP能够比较好地在Scala中结合的关键。 </p>

  <p>还有就是Scala的类型体系，看上去复杂，其实是为了修正Java中类型体系的一些问题，并且带了了一个JVM上的完整一致的类型体系。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。 </p>

  <p>总之，我看到的Scala的简单性都是由其一致性带来的，虽然设计者为了开发人员的习惯作了一点点妥协，但还是非常坚持他的设计理念。 </p>

  <p>Martin不是一个简单的人，为了在JVM上实现他的设计理念，其后台的具体实现其实是相当复杂和困难的，但他坚持并不断实践，有时候甚至不惜把原来的实现推倒重来，终于在2.6以后有了我们现在看到的相当理想的结果。</p>
</blockquote>

<h1 id="section-5">参考资料</h1>

<ol>
  <li><a href="http://www.slideshare.net/dcaoyuan/scalajava">2009. 邓草原. 对Java的修正和超越</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用javac命令行编译多个java文件]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20110623"/>
    <updated>2011-06-23T17:22:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-javac-to-compile-multi-java-files</id>
    <content type="html"><![CDATA[<ol>
  <li>CLASSPATH一定要具体到jar路径，例如</li>
</ol>

<p><code>bash
export CLASSPATH=/usr/lib/jvm/java-6-sun/lib/commons-codec.jar:/usr/lib/jvm/java-6-sun/lib/commons-httpclient-3.1.jar:/usr/lib/jvm/java-6-sun/lib/commons-logging-1.1.jar:/usr/lib/jvm/java-6-sun/lib/dt.jar:/usr/lib/jvm/java-6-sun/lib/htmlconverter.jar:/usr/lib/jvm/java-6-sun/lib/jconsole.jar:/usr/lib/jvm/java-6-sun/lib/junit-4.1.jar:/usr/lib/jvm/java-6-sun/lib/mysql-connector-java-5.1.16-bin.jar:/usr/lib/jvm/java-6-sun/lib/sa-jdi.jar:/usr/lib/jvm/java-6-sun/lib/tools.jar
</code></p>

<ol>
  <li>
    <p>每个java文件给出路径，最常见的是用通配符*，不支持目录递归。</p>
  </li>
  <li>
    <p>最好加上 -d，这样会在这个目录下生成class文件，而不会和java文件混在一起</p>
  </li>
</ol>

<p>看我的一个具体的例子</p>

<p><code>
javac -d /home/dfq/crawler/bin crawler/*.java weibo4j/*.java weibo4j/org/json/*.java weibo4j/*.java weibo4j/util/*.java weibo4j/http/*.java
</code></p>

<p>运行时用如下命令：</p>

<p><code>
cd /home/dfq/crawler/bin
java -cp .:$CLASSPATH crawler.ManagerThread
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java命令行下运行class文件]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20100215"/>
    <updated>2010-02-15T16:27:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/run-class-file-in-java-command-line</id>
    <content type="html"><![CDATA[<p>今天碰到了一个很变态的问题，写了一个很简单的HelloWord.java，内容如下：</p>

<p>``` java
package com.yanjiuyanjiu;</p>

<p>public class HelloWorld {
public static void main(String args[]) {
System.out.println(“Hello World!”);
}
}
```
在eclipse中运行是可以的，但是在命令行下运行总是失败。我的工程位置为 d:workspaceHelloWorld。</p>

<p>尝试了很多次，如下：</p>

<!--more-->

<p>``` bash
d:workspaceHelloWorldbincomyanjiuyanjiu&gt;java HelloWorld</p>

<p>Exception in thread “main” java.lang.NoClassDefFoundError: HelloWorld (wrong name: com/yanjiuyanjiu/HelloWorld)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.security.SecureClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.access$000(Unknown Source)
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
Could not find the main class: HelloWorld.  Program will exit.
Exception in thread “main”</p>

<p>d:workspaceHelloWorldbincomyanjiuyanjiu&gt;java -classpath .; HelloWorld
Exception in thread “main” java.lang.NoClassDefFoundError: HelloWorld (wrong name: com/yanjiuyanjiu/HelloWorld)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.security.SecureClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.access$000(Unknown Source)
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
Could not find the main class: HelloWorld.  Program will exit.
Exception in thread “main”</p>

<p>d:workspaceHelloWorldbincomyanjiuyanjiu&gt;cd..</p>

<p>d:workspaceHelloWorldbincom&gt;cd..</p>

<p>d:workspaceHelloWorldbin&gt;java -classpath .; com/yanjiuyanjiu/HelloWorld    只有这个成功</p>

<p>Hello World!</p>

<p>d:workspaceHelloWorldbin&gt;java -classpath .; comyanjiuyanjiuHelloWorld    换了个斜杠就不行了</p>

<p>Exception in thread “main” java.lang.NoClassDefFoundError: comyanjiuyanjiuHelloWorld (wrong name: com/yanjiuyanjiu/HelloWorld)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.security.SecureClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.access$000(Unknown Source)
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
Could not find the main class: comyanjiuyanjiuHelloWorld.  Program will exit.
Exception in thread “main”</p>

<p>d:workspaceHelloWorldbin&gt;java -classpath ./com/yanjiuyanjiu/; HelloWorld</p>

<p>Exception in thread “main”java.lang.NoClassDefFoundError: HelloWorld (wrong name: com/yanjiuyanjiu/HelloWorld)
at java.lang.ClassLoader.defineClass1(Native Method)
at java.lang.ClassLoader.defineClassCond(Unknown Source)
at java.lang.ClassLoader.defineClass(Unknown Source)
at java.security.SecureClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.defineClass(Unknown Source)
at java.net.URLClassLoader.access$000(Unknown Source)
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
Could not find the main class: HelloWorld.  Program will exit.
Exception in thread “main”
```</p>

<p>在网上搜索了大半天，大部分说是环境 变量，classpath或JDK 版本的问题，还有执行时文件名 class后缀不要。我一一试过，都没有解决。最后无意中换了一下命令符的位置，成功了。总结如下：</p>

<ol>
  <li>环境变量，CLASSPATH当然要设置好，执行时不要带class后缀；  </li>
  <li>路径中的斜杠用“/”而不是“”；  </li>
  <li>命令符的当前目录要在包的起点。比如这里应该在 d:workspaceHelloWorldbin&gt;，如果在 d:workspaceHelloWorldbincomyanjiuyanjiu&gt;，反而不行，有点“近水楼台不得月”的意思，不知 道为什么，还请高手解释一下。</li>
</ol>
]]></content>
  </entry>
  
</feed>
