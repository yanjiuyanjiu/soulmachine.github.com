<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2014-01-27T02:36:17+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Centos 6.5上安装docker]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20140122"/>
    <updated>2014-01-22T15:25:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/install-docker-on-centos65</id>
    <content type="html"><![CDATA[<h2 id="enable-epel-repo-on-centos">1 Enable EPEL Repo on CentOS</h2>

<p>参考 <a href="http://www.centosblog.com/enable-epel-repo-on-centos-5-and-centos-6/">Enable EPEL Repo on CentOS 5 and CentOS 6</a></p>

<pre><code>rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
</code></pre>

<h2 id="install-docker">2 Install docker</h2>

<pre><code>yum install docker-io --enablerepo=epel
</code></pre>

<h2 id="docker-daemon-">3 启动 docker daemon 进程</h2>

<pre><code>sudo docker -d &amp;
</code></pre>

<p>这时，有警告，说内核版本过低，</p>

<blockquote>
  <p>WARNING: You are running linux kernel version 2.6.32-431.el6.x86_64, which might be unstable running docker. Please upgrade your kernel to 3.8.0.</p>
</blockquote>

<p>如果你在公司，且公司内部都是通过代理上网，则可以把代理服务器告诉docker，用如下命令(参考<a href="https://github.com/dotcloud/docker/issues/402">这里</a>)：</p>

<pre><code>sudo HTTP_PROXY=http://xxx:port docker -d &amp;
</code></pre>

<h2 id="section">4 升级内核</h2>

<p>见我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20131024">CentOS 6.4 升级内核到 3.11.6</a></p>

<h2 id="ubuntu-">5 下载 ubuntu 镜像</h2>

<pre><code>sudo docker pull ubuntu
</code></pre>

<h2 id="hello-world">6 运行 hello world</h2>

<pre><code>sudo docker run ubuntu /bin/echo hello world
hello world
</code></pre>

<p>安装成功了！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[运行mahout的朴素贝叶斯分类器]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131223"/>
    <updated>2013-12-23T17:20:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/run-mahout-nbc</id>
    <content type="html"><![CDATA[<h2 id="section">1.准备数据</h2>

<h3 id="section-1">1.1 下载数据集，并解压</h3>

<pre><code>wget http://people.csail.mit.edu/jrennie/20Newsgroups/20news-bydate.tar.gz
tar -xf 20news-bydate.tar.gz
#上传到hdfs
hadoop fs -put 20news-bydate-test .
hadoop fs -put 20news-bydate-train .
</code></pre>

<h3 id="section-2">1.2 转换格式</h3>

<pre><code>#转换为序列文件(sequence files)
mahout seqdirectory -i 20news-bydate-train -o 20news-bydate-train-seq
mahout seqdirectory -i 20news-bydate-test -o 20news-bydate-test-seq
#转换为tf-idf向量
mahout seq2sparse -i 20news-bydate-train-seq -o 20news-bydate-train-vector -lnorm -nv -wt tfidf
mahout seq2sparse -i 20news-bydate-test-seq -o 20news-bydate-test-vector -lnorm -nv -wt tfidf
</code></pre>

<h2 id="section-3">2. 训练朴素贝叶斯模型</h2>

<pre><code>mahout trainnb -i 20news-bydate-train-vectors/tfidf-vectors -el -o model -li labelindex -ow
</code></pre>

<h2 id="section-4">3. 测试朴素贝叶斯模型</h2>

<pre><code>mahout testnb -i 20news-bydate-train-vectors/tfidf-vectors -m model -l labelindex -ow -o test-result
</code></pre>

<h2 id="section-5">4. 查看训练后的结构</h2>

<pre><code>mahout seqdumper -i labelindex 

Input Path: labelindex
Key class: class org.apache.hadoop.io.Text Value Class: class org.apache.hadoop.io.IntWritable
Key: alt.atheism: Value: 0
Key: comp.graphics: Value: 1
Key: comp.os.ms-windows.misc: Value: 2
Key: comp.sys.ibm.pc.hardware: Value: 3
Key: comp.sys.mac.hardware: Value: 4
Key: comp.windows.x: Value: 5
Key: misc.forsale: Value: 6
Key: rec.autos: Value: 7
Key: rec.motorcycles: Value: 8
Key: rec.sport.baseball: Value: 9
Key: rec.sport.hockey: Value: 10
Key: sci.crypt: Value: 11
Key: sci.electronics: Value: 12
Key: sci.med: Value: 13
Key: sci.space: Value: 14
Key: soc.religion.christian: Value: 15
Key: talk.politics.guns: Value: 16
Key: talk.politics.mideast: Value: 17
Key: talk.politics.misc: Value: 18
Key: talk.religion.misc: Value: 19
Count: 20
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用docker打造spark集群]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131027"/>
    <updated>2013-10-27T20:30:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/build-spark-cluster-with-docker</id>
    <content type="html"><![CDATA[<p><strong>前提条件：</strong>安装好了docker，见我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20131025">Docker安装</a></p>

<p>有两种方式，</p>

<ul>
  <li><a href="https://github.com/apache/incubator-spark">Spark官方repo</a>里，docker文件夹下的脚本。官方的这个脚本封装很薄，尽可能把必要的信息展示出来。</li>
  <li><a href="https://github.com/amplab/docker-scripts">AMPLab开源的这个独立小项目</a>，来打造一个spark集群。这个脚本封装很深，自带了一个DNS服务器，还有hadoop，非常自动化，缺点是很多信息看不到了。</li>
</ul>

<h1 id="section">1. 第1种方式</h1>

<h2 id="git-clone-">git clone 源码</h2>
<p>首先要把官方repo的代码下载下来</p>

<pre><code>git clone git@github.com:apache/incubator-spark.git
</code></pre>

<h2 id="apt">（可选）修改apt源</h2>
<p>在国内，将apt源修改国内源，例如163的源，速度会快很多。将<code>base/Dockerfile</code>里的</p>

<pre><code>RUN echo "deb http://archive.ubuntu.com/ubuntu precise main universe" &gt; /etc/apt/sources.list
</code></pre>

<p>替换为</p>

<pre><code>RUN echo "deb http://mirrors.163.com/ubuntu/ precise main restricted universe multiverse" &gt; /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ precise-security main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ precise-updates main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ precise-proposed main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb-src http://mirrors.163.com/ubuntu/ precise main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb-src http://mirrors.163.com/ubuntu/ precise-security main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb-src http://mirrors.163.com/ubuntu/ precise-updates main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb-src http://mirrors.163.com/ubuntu/ precise-proposed main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb-src http://mirrors.163.com/ubuntu/ precise-backports main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
</code></pre>

<h2 id="build">build镜像</h2>
<p>将<code>build</code>和<code>spark-test/build</code>里的<code>docker</code>命令前，添加<code>sudo</code>，然后执行<code>docker</code>下的<code>build</code></p>

<pre><code>cd docker
./build
</code></pre>

<h2 id="master">启动master</h2>

<pre><code>sudo docker run -v $SPARK_HOME:/opt/spark spark-test-master
</code></pre>

<h2 id="worker">启动worker</h2>
<p>新开一个终端窗口（强烈推荐tmux），启动一个worker</p>

<pre><code>sudo docker run -v $SPARK_HOME:/opt/spark spark-test-worker &lt;master_ip&gt;
</code></pre>

<p>可以在master终端窗口看到worker注册上来了。</p>

<p>可以再开多个终端窗口，启动多个worker。</p>

<h1 id="section-1">2. 第2种方式</h1>

<h2 id="wget">升级wget</h2>
<p>如果发现wget不识别<code>--no-proxy</code>选项，需要升级wget。</p>

<h2 id="section-2">下载镜像</h2>
<p>为了让脚本第一次执行的时候更快，还是手动下载所有的镜像吧，amplab在index.docker.io上有一个官方账号，把这个账号有关spark的repo都pull下来。</p>

<pre><code>sudo docker pull amplab/apache-hadoop-hdfs-precise
sudo docker pull amplab/dnsmasq-precise
sudo docker pull amplab/spark-worker
sudo docker pull amplab/spark-master
sudo docker pull amplab/spark-shell
</code></pre>

<h2 id="git-clone--1">git clone 脚本</h2>

<pre><code>git@github.com:amplab/docker-scripts.git
</code></pre>

<p>这个脚本可以一键启动集群，爽啊哈哈哈！</p>

<h2 id="spark">一键启动spark集群</h2>

<pre><code>sudo ./deploy/deploy.sh -i amplab/spark:0.8.0 -w 3 
</code></pre>

<h2 id="spark-shell">启动 Spark shell</h2>
<p>启动一个交互式shell吧，IP为上一步输出的Master的IP</p>

<pre><code>sudo docker run -i -t -dns 172.17.0.90 amplab/spark-shell:0.8.0
</code></pre>

<h2 id="section-3">运行一个简单的的例子</h2>

<pre><code>scala&gt; val textFile = sc.textFile("hdfs://master:9000/user/hdfs/test.txt")
scala&gt; textFile.count()
scala&gt; textFile.map({line =&gt; line}).collect()
</code></pre>

<h2 id="section-4">关闭集群</h2>

<pre><code>$ sudo ./deploy/kill_all.sh spark
$ sudo ./deploy/kill_all.sh nameserver
</code></pre>

<h2 id="section-5">更多详情请参考项目主页的文档</h2>

<p><a href="https://github.com/amplab/docker-scripts">https://github.com/amplab/docker-scripts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker 快速入门]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131026"/>
    <updated>2013-10-26T23:41:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/docker-tutorial</id>
    <content type="html"><![CDATA[<p><strong>前提条件：</strong>要安装好 docker，见我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20131025">docker 安装</a></p>

<h2 id="section">交互式命令行入门教程</h2>
<p>首先强烈建议玩一遍官方的一个交互式命令行入门教程，<a href="http://www.docker.io/gettingstarted/">Interactive commandline tutorial</a>。甚至要多玩几遍，加深印象。</p>

<p>初次过完这个教程，感觉docker用起来跟git很类似。</p>

<p>玩完了后，在自己的真实机器上，把上面的命令重新敲一遍，感受一下。</p>

<h2 id="hello-world">Hello World</h2>
<p>参考官方文档<a href="http://docs.docker.io/en/latest/examples/hello_world/#running-examples">Hello World</a></p>

<p>首先下载官方的ubuntu image:</p>

<pre><code>sudo docker pull ubuntu
</code></pre>

<p>然后运行 hello world：</p>

<pre><code>sudo docker run ubuntu /bin/echo hello world
</code></pre>

<h2 id="section-1">三种运行命令的模式</h2>
<p>docker 有三种运行命令的方式，短暂方式，交互方式，daemon方式。</p>

<p><strong>短暂方式</strong>，就是刚刚的那个”hello world”，命令执行完后，container就终止了，不过并没有消失，可以用 <code>sudo docker ps -a</code> 看一下所有的container，第一个就是刚刚执行过的container，可以再次执行一遍：</p>

<pre><code>sudo docker start container_id
</code></pre>

<p>不过这次看不到”hello world”了，只能看到ID，用<code>logs</code>命令才能看得到，</p>

<pre><code>sudo docker logs container_id
</code></pre>

<p>可以看到两个”hello world”，因为这个container运行了两次。</p>

<p><strong>交互方式</strong>，</p>

<pre><code>sudo docker run -i -t image_name /bin/bash
</code></pre>

<p><strong>daemon方式</strong>，即让软件作为长时间服务运行，这就是SAAS啊！</p>

<p>例如，一个无限循环打印的脚本（替换为memcached, apache等，操作方法仍然不变！）：</p>

<pre><code>CONTAINER_ID=$(sudo docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done")
</code></pre>

<p>在container外面查看它的输出</p>

<pre><code>sudo docker logs $CONTAINER_ID
</code></pre>

<p>或者连接上容器实时查看</p>

<pre><code>sudo docker attach $CONTAINER_ID
</code></pre>

<p>终止容器</p>

<pre><code>sudo docker stop $CONTAINER_ID
</code></pre>

<p><code>sudo docker ps</code>看一下，已经没了</p>

<h2 id="docker-ps-">docker ps 命令详解</h2>
<p><code>sudo docker ps</code>，列出当前所有正在运行的container</p>

<p><code>sudo docker ps -l</code>，列出最近一次启动的，且正在运行的container</p>

<p><code>sudo docker ps -a</code>，列出所有的container</p>

<p>其他用法请参考 <code>sudo docker ps -h</code></p>

<p>还有一种方式可以让程序在daemon模式下运行，就是在Dockerfile里设置USER为daemon，见<a href="http://www.docker.io/learn/dockerfile/level2/">Dockerfile tutorial Level2</a>。</p>

<h2 id="http">添加http代理</h2>
<p>在国内，pull或push的时候经常连不上docker.com（原因你懂的，或者在公司内部统一用一个代理上网的时候），可以在docker daemon进程启动的时候加个代理，例如</p>

<pre><code>sudo HTTP_PROXY=proxy_server:port docker -d &amp;
</code></pre>

<p>docker貌似是不识别<code>http_proxy</code>, <code>https_proxy</code>和<code>no_proxy</code>环境变量的，因此要在命令行里指定，参考 <a href="https://github.com/dotcloud/docker/issues/402">Github Issue #402 Using Docker behind a firewall</a>。</p>

<p>如果在命令行里指定了<code>HTTP_PROXY</code>，则要unset掉<code>http_proxy</code>和<code>https_proxy</code>环境变量。原因是：</p>

<ul>
  <li>首先， docker daemon进程是通过http协议与docker.com通信的</li>
  <li>其次，docker的各种命令（例如 <code>run</code>, <code>login</code>等）也是通过http协议与docker daemon进程通信的（发送jasn字符串，daemon进程返回的也是json字符串），有时候docker客户端命令貌似能识别http_proxy变量，这时，客户端发送一个命令，路径是<code>localhost-&gt;http_proxy-&gt;daemon进程</code>，daemon进程返回的数据，路径是 <code>daemon进程-&gt;proxy-&gt;proxy-&gt;localhost</code>，其中，从<code>proxy-&gt;localhost</code>的路径是不通的，因为proxy连接不了内网IP。</li>
</ul>

<p>之所以把这一步放在本文开始，是因为这一步不做的话，后面很多命令会出错，让人摸不着头脑，我在这里就掉进坑了，花了很长时间才搞明白，原来是网络连接不稳定。</p>

<h2 id="dockerfile">熟悉一下 Dockerfile</h2>
<p>完了几遍交互式入门教程后，你会好奇，怎么自己定制一个 image，例如把常用的软件装好后打包 ? 这时候该 Dockfile 登场了。Dockerfile 实质上是一个脚本文件，用于自动化创建image。</p>

<!--more-->

<p>请跟着官方教程走一遍，<a href="http://www.docker.io/gettingstarted/">Dockerfile Tutorial</a></p>

<p>到这里， 官网的 Getting started 的内容基本上消化完了，接下来就是翻官网的<a href="http://docs.docker.io/en/latest/">Documentation</a>了。</p>

<h2 id="dockerfile-1">我的第一个Dockerfile</h2>
<p>文件名为update.dockerfile，内容如下：</p>

<pre><code># use the ubuntu base image provided by dotCloud
FROM ubuntu

MAINTAINER Frank Dai soulmachine@gmail.com


# if you're behind a government firewall or company proxy
# ENV http_proxy http://proxy-prc.intel.com:911
# ENV https_proxy https://proxy-prc.intel.com:911
# RUN echo "Acquire::http::proxy \"proxy_server:port\";" &gt;&gt; /etc/apt/apt.conf
# RUN echo "Acquire::https::proxy \"proxy_server:port\";" &gt;&gt; /etc/apt/apt.conf


# choose a faster mirror, see http://t.cn/zWYrzCE
RUN echo "deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse" &gt; /etc/apt/sources.list
RUN echo "deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list
RUN echo "deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list

RUN apt-get update -y
# currently docker official ubuntu image has a problem with apt-get upgrade
# RUN apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y
RUN apt-get clean all


# install wget
RUN apt-get install -y  wget
RUN wget www.baidu.com
RUN rm index.html

#install vim editor
RUN apt-get install -y vim
</code></pre>

<p><strong>注意一个坑：</strong> <code>apt-get upgrade</code> 在当前官方的ubuntu image里是无法运行成功的，见 <a href="https://github.com/dotcloud/docker/issues/1724">Issue #1724 apt-get upgrade in plain Ubuntu precise image fails</a>。所以，干脆放弃更新吧，能<code>apt-get install</code>软件就行了，不要有更新强迫症 :)</p>

<h2 id="section-2">删除容器</h2>
<p><strong>每一行命令都会产生一个新的容器</strong>（无论是在<code>sudo docker run -i -t ubuntu /bin/bash</code> 模式下，还是Dockerfile里的RUN命令），玩了一会儿后，<code>sudo docker ps -a</code> 会看到很多容器，很是干扰视线，可以用一行命令删除所有容器：</p>

<pre><code>sudo docker rm `sudo docker ps -a -q`
</code></pre>

<h2 id="image">创建image</h2>
<p>有两种用方式，</p>

<ul>
  <li>写一个Dockerfile，然后用<code>docker build</code>创建一个image</li>
  <li>在容器里交互式地（例如<code>sudo docker run -i -t ubuntu /bin/bash</code>）进行一些列操作，然后<code>docker commit</code>固化成一个image。</li>
</ul>

<p>image相当于编程语言里的类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。</p>

<p>使用前面写好的update.dockerfile，创建一个image：</p>

<pre><code>sudo docker build -t soulmachine/ubuntu:latest - &lt; update.dockerfile
</code></pre>

<h2 id="image-1">下载image</h2>
<p><a href="https://index.docker.io/">https://index.docker.io/</a> 是官方的image仓库，也可以用 <a href="https://github.com/dotcloud/docker-registry">Docker-Registry</a>创建自己的仓库，这就好比git，<a href="https://index.docker.io/">https://index.docker.io/</a>相当于Github，也可以自己DIY搭建一个git服务器，把自己的代码托管到私有的服务器上。</p>

<p><code>sudo docker pull ubuntu</code> 是从 <a href="https://index.docker.io/_/ubuntu/">https://index.docker.io/_/ubuntu/</a> 下载名为 ubuntu 的repo，里面包含了几个tag，默认使用latest这个tag。这个repo是docker官方的。</p>

<h2 id="image-2">上传并共享image</h2>
<p>自己build了一个image，想要共享，怎么办？参考这篇文章，<a href="http://crohr.me/journal/2013/docker-repository-create-base-boxes.html">How to build and publish base boxes for Docker?</a></p>

<h3 id="section-3">注册一个账号</h3>
<p>首先，要去 <a href="https://index.docker.io/">https://index.docker.io/</a> 注册一个账号，例如我的是 soulmachine。</p>

<h3 id="buildimage">build一个image</h3>
<p>build命令格式如下：</p>

<pre><code>sudo docker build -t username/repo:tag - &lt; Dockerfile
</code></pre>

<p>如果没有tag，则默认为 latest。</p>

<h3 id="section-4">登陆</h3>

<pre><code>sudo docker login
</code></pre>

<p>输入自己的用户名和密码。</p>

<h3 id="push--docker-index">push 到 Docker index</h3>

<pre><code>sudo docker push username/repo
</code></pre>

<p>这条命令会把一个repo下面的所有tag都push到<a href="https://index.docker.io/">https://index.docker.io/</a></p>

<h2 id="jdk7">安装JDK7失败</h2>
<p>我在container 里面安装jre7是可以的, <code>apt-get install openjdk-7-jre-headless</code> 成功。但是安装jdk7，<code>apt-get install openjdk-7-jdk</code>失败，错误消息如下：</p>

<pre><code>Creating fuse device...
mknod: `fuse-': Operation not permitted
makedev fuse c 10 229 root root 0660: failed
chown: cannot access `/dev/fuse': No such file or directory
dpkg: error processing fuse (--configure):
 subprocess installed post-installation script returned error exit status 1
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
Errors were encountered while processing:
 fuse
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>

<p>原因是权限不够，见<a href="https://github.com/dotcloud/docker/issues/963">Issue #963</a> 和 <a href="https://github.com/dotcloud/docker/issues/514">Issue #514</a></p>

<p>所以，需要在启动container时，添加一个<code>-priviledged</code>参数，</p>

<pre><code>sudo docker run -i -t -priviledged soulmachine/ubuntu /bin/bash
</code></pre>

<p>在里面执行<code>apt-get install openjdk-7-jdk</code>，这次成功了。</p>

<p>那如何在dockerfile里用RUN命令安装JDK7呢？dockerfile里没法指定<code>-priviledged</code>，目前没有办法，不过可以折中一下，安装openjdk6。</p>

<h2 id="entrypoint--cmd-">ENTRYPOINT 和 CMD 的区别</h2>
<p>见<a href="http://www.kstaken.com/blog/2013/07/06/how-to-use-entrypoint-in-a-dockerfile/">How to Use Entrypoint in Docker Builder</a></p>

<h2 id="docker-">docker 最佳实践</h2>
<p>见<a href="http://crosbymichael.com/dockerfile-best-practices.html">Dockerfile Best Practices</a></p>

<h2 id="docker--1">关于docker 的书籍</h2>
<ul>
  <li><a href="http://dockerbook.com/">The Docker Book</a></li>
</ul>

<h2 id="section-5">底层原理</h2>

<p>image, container, fs layer，是什么关系？见这篇博客，<a href="http://www.activestate.com/blog/2013/06/solomon-hykes-explains-docker">Solomon Hykes Explains Docker</a></p>

<h2 id="section-6">参考资料</h2>
<ol>
  <li><a href="http://docs.docker.io/">Official docs</a></li>
  <li><a href="https://log.qingcloud.com/?p=129">Docker 初探</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker安装]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131025"/>
    <updated>2013-10-25T23:41:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/docker-installation</id>
    <content type="html"><![CDATA[<h2 id="centos-64--docker">1 在 CentOS 6.4 上安装 docker</h2>

<p>docker当前官方只支持Ubuntu，所以在 CentOS 安装Docker比较麻烦(<a href="https://github.com/dotcloud/docker/issues/172">Issue #172</a>)。</p>

<p>docker官方文档说要求Linux kernel至少3.8以上，CentOS 6.4是2.6的内核，于是我哼哧哼哧的<a href="http://www.yanjiuyanjiu.com/blog/20131024">编译安装了最新的kernel 3.11.6</a>，重启后运行docker还是失败，最后找到原因，是因为编译时忘记集成aufs模块了。aufs 需要和 kernel 一起编译，很麻烦。</p>

<p>不过不需要这么麻烦，有强人已经编译好了带aufs模块的内核，见这里<a href="http://nareshv.blogspot.com/2013/08/installing-dockerio-on-centos-64-64-bit.html">Installing docker.io on centos 6.4 (64-bit)</a></p>

<h3 id="selinuxlxc">1.1 取消selinux，因为它会干扰lxc的正常功能</h3>

<pre><code>sudo vim /etc/selinux/config 
SELINUX=disabled
SELINUXTYPE=targeted
</code></pre>

<h3 id="fedora-epel">1.2 安装 Fedora EPEL</h3>

<pre><code>sudo yum install http://ftp.riken.jp/Linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
</code></pre>

<h3 id="hop5-repo">1.3 添加 hop5 repo地址</h3>

<pre><code>cd /etc/yum.repos.d
sudo wget http://www.hop5.in/yum/el6/hop5.repo
</code></pre>

<h3 id="docker-io">1.4 安装 docker-io</h3>

<pre><code>sudo yum install docker-io
</code></pre>

<p>会自动安装带aufs模块的3.10内核，以及docker-io包。</p>

<h3 id="cgroup--etcfstab--docker">1.5 将 cgroup 文件系统添加到 <code>/etc/fstab</code> , 只有这样docker才能正常工作</h3>

<pre><code>sudo echo "none                    /sys/fs/cgroup          cgroup  defaults        0 0" &gt;&gt; /etc/fstab
</code></pre>

<h3 id="grub">1.6 修改grub引导顺序</h3>

<pre><code>sudo vim /etc/grub.conf
default=0
</code></pre>

<p>设置default为新安装的内核的位置，一般是0</p>

<h3 id="section">1.7 重启</h3>

<pre><code>sudo reboot
</code></pre>

<h3 id="section-1">1.8 检查新内核是否引导成功</h3>

<p>重启后，检查一下新内核是否引导起来了</p>

<pre><code>uname -r
3.10.5-3.el6.x86_64
</code></pre>

<p>说明成功了</p>

<p>看一下 aufs是否存在</p>

<pre><code>grep aufs /proc/filesystems 
nodev   aufs
</code></pre>

<p>说明存在</p>

<h3 id="docker-daemon-">1.9 启动 docker daemon 进程</h3>

<pre><code>sudo docker -d &amp;
</code></pre>

<p>如果你在公司，且公司内部都是通过代理上网，则可以把代理服务器告诉docker，用如下命令(参考<a href="https://github.com/dotcloud/docker/issues/402">这里</a>)：</p>

<pre><code>sudo HTTP_PROXY=http://xxx:port docker -d &amp;
</code></pre>

<h3 id="ubuntu-">1.10 下载 ubuntu 镜像</h3>

<pre><code>sudo docker pull ubuntu
</code></pre>

<h3 id="hello-world">1.11 运行 hello world</h3>

<!--more-->

<pre><code>sudo docker run ubuntu /bin/echo hello world
hello world
</code></pre>

<p>安装成功了！！</p>

<h2 id="ubuntu--docker">2 在 Ubuntu 上安装 docker</h2>

<p>见官方文档，<a href="http://docs.docker.io/en/latest/installation/ubuntulinux/">Ubuntu Linux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 6.4 升级内核到 3.11.6]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131024"/>
    <updated>2013-10-24T00:02:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/centos-6-dot-4-upgrade-kernel</id>
    <content type="html"><![CDATA[<h2 id="section">1. 准备工作</h2>

<h3 id="section-1">1.1 下载源码包</h3>
<p>去 <a href="http://www.kernel.org">http://www.kernel.org</a> 首页，下载源码包</p>

<pre><code>wget  https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.11.6.tar.xz
</code></pre>

<h3 id="section-2">1.2 解压</h3>

<pre><code>tar xf linux-3.11.6.tar.xz
</code></pre>

<h3 id="section-3">1.3 更新当前系统</h3>

<pre><code>sudo yum update
sudo yum upgrade
</code></pre>

<h3 id="section-4">1.4 安装必要软件</h3>

<pre><code>sudo yum groupinstall "Development Tools" # 一口气安装编译时所需的一切工具
sudo yum install ncurses-devel #必须这样才能让 make *config 这个指令正确地执行。
sudo yum install qt-devel #如果你没有 X 环境，这一条可以不用
sudo yum install hmaccalc zlib-devel binutils-devel elfutils-libelf-devel #创建 CentOS-6 内核时需要它们
</code></pre>

<h2 id="section-5">2 配置文件</h2>

<h3 id="section-6">2.1 查看当前系统内核</h3>

<pre><code>uname -r
2.6.32-358.11.1.el6.x86_64
</code></pre>

<h3 id="section-7">2.2 将当前系统的配置文件拷贝到当前目录</h3>

<pre><code>cp /boot/config-2.6.32-358.11.1.el6.x86_64 .config
</code></pre>

<h3 id="section-8">2.3 使用旧内核配置，并自动接受每个新增选项的默认设置</h3>

<pre><code>sh -c 'yes "" | make oldconfig'
</code></pre>

<p><code>make oldconfig</code>会读取当前目录下的<code>.config</code>文件，在<code>.config</code>文件里没有找到的选项则提示用户填写，然后备份<code>.config</code>文件为<code>.config.old</code>，并生成新的<code>.config</code>文件，参考 <a href="http://stackoverflow.com/questions/4178526/what-does-make-oldconfig-do-exactly-linux-kernel-makefile">http://stackoverflow.com/questions/4178526/what-does-make-oldconfig-do-exactly-linux-kernel-makefile</a></p>

<h2 id="section-9">3 编译</h2>

<pre><code>sudo make -j200 bzImage #生成内核文件
sudo make -j200 modules #编译模块
sudo make -j200 modules_install #编译安装模块
</code></pre>

<p>要严格按照这个先后顺序进行编译</p>

<p><code>-j</code>后面的数字是线程数，用于加快编译速度，一般的经验是，有多少G内存，就填写那个数字，例如有8G内存，则为<code>-j8</code>。</p>

<h2 id="section-10">4 安装</h2>

<pre><code>sudo make install
</code></pre>

<p>如果出现了 <code>ERROR: modinfo: could not find module xxx</code>，数量少的话，可以忽略。</p>

<h2 id="grub">5 修改Grub引导顺序</h2>

<p>安装完成后，需要修改Grub引导顺序，让新安装的内核作为默认内核。</p>

<p>编辑 <code>grub.conf</code>文件，</p>

<pre><code>sudo vim /etc/grub.conf
</code></pre>

<p>数一下刚刚新安装的内核在哪个位置，从0开始，然后设置default为那个数字，一般新安装的内核在第一个位置，所以设置<code>default=0</code>。</p>

<h2 id="section-11">6 重启</h2>

<p>重启后，看一下当前内核版本号，</p>

<pre><code>uname -r
3.11.6
</code></pre>

<p>成功啦！！</p>

<h2 id="section-12">7 如果失败，则重新循环</h2>

<p>如果失败，重新开始的话，要清理上次编译的现场 </p>

<pre><code>make mrproper #清理上次编译的现场 
</code></pre>

<p>然后转到第2步，重新开始。</p>

<h2 id="section-13">参考资料</h2>
<ul>
  <li><a href="http://xmodulo.com/2013/07/how-to-upgrade-the-kernel-on-centos.html">How to upgrade the kernel on CentOS</a></li>
  <li><a href="http://winotes.net/centos-64-upgrade-to-kernel-3x.html">CentOS 6.4 升级到 3.x Kernel</a></li>
  <li><a href="http://my.oschina.net/qichang/blog/101542">CentOS Linux 升级内核步骤和方法</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装Spark 0.8 集群(在CentOS上)]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20131017"/>
    <updated>2013-10-17T11:58:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/installing-spark-on-centos-cn</id>
    <content type="html"><![CDATA[<p><strong>环境</strong>:CentOS 6.4, Hadoop 1.1.2, JDK 1.7, Spark 0.8.0, Scala 2.9.3</p>

<p>Spark 0.7.2 的安装请看之前的一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20130617/">安装Spark集群(在CentOS上)</a> 。</p>

<p>Spark的安装很简单，总结起来一句话：下载，解压，然后拷贝到所有机器，完毕，无需任何配置。</p>

<h1 id="jdk-17">1. 安装 JDK 1.7</h1>
<pre><code>yum search openjdk-devel
sudo yum install java-1.7.0-openjdk-devel.x86_64
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
sudo vim /etc/profile
# add the following lines at the end
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
# test
$ java -version
</code></pre>

<p>参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120423/">安装和配置CentOS服务器的详细步骤</a>。</p>

<h1 id="scala-293">2. 安装 Scala 2.9.3</h1>
<p>Spark 0.8.0 依赖 Scala 2.9.3, 我们必须要安装Scala 2.9.3.</p>

<p>下载 <a href="http://www.scala-lang.org/downloads/distrib/files/scala-2.9.3.tgz">scala-2.9.3.tgz</a> 并 保存到home目录.</p>

<pre><code>$ tar -zxf scala-2.9.3.tgz
$ sudo mv scala-2.9.3 /usr/lib
$ sudo vim /etc/profile
# add the following lines at the end
export SCALA_HOME=/usr/lib/scala-2.9.3
export PATH=$PATH:$SCALA_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
source /etc/profile
# test
$ scala -version
</code></pre>

<h1 id="spark">3. 下载预编译好的Spark</h1>
<p>下载预编译好的Spark, <a href="http://spark-project.org/download/spark-0.8.0-incubating-bin-hadoop1.tgz">spark-0.8.0-incubating-bin-hadoop1.tgz</a>. </p>

<p>如果你想从零开始编译，则下载源码包，但是我不建议你这么做，因为有一个Maven仓库，twitter4j.org, 被墙了，导致编译时需要翻墙，非常麻烦。如果你有DIY精神，并能顺利翻墙，则可以试试这种方式。</p>

<h1 id="local">4. Local模式</h1>

<h2 id="section">4.1 解压</h2>

<pre><code>$ tar -zxf spark-0.8.0-incubating-bin-hadoop1.tgz
</code></pre>

<h2 id="sparkhome">4.2 （可选）设置 SPARK_HOME环境变量</h2>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.8.0
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="sparkpi">4.3 现在可以运行SparkPi了</h2>

<pre><code>$ cd $SPARK_HOME
$ ./run-example org.apache.spark.examples.SparkPi local
</code></pre>

<h1 id="cluster">5. Cluster模式</h1>

<!-- more -->

<h2 id="hadoop">5.1 安装Hadoop</h2>
<p>用VMware Workstation 创建三台CentOS 虚拟机，hostname分别设置为 master, slave01, slave02，设置SSH无密码登陆，安装hadoop，然后启动hadoop集群。参考我的这篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20130612">在CentOS上安装Hadoop</a>. </p>

<h2 id="scala">5.2 Scala</h2>
<p>在三台机器上都要安装 Scala 2.9.3 , 按照第2节的步骤。JDK在安装Hadoop时已经安装了。</p>

<h2 id="masterspark">5.3 在master上安装并配置Spark</h2>
<p>解压</p>

<pre><code>$ tar -zxf spark-0.8.0-incubating-bin-hadoop1.tgz.tgz
</code></pre>

<p>在 in <code>conf/spark-env.sh</code> 中设置<code>SCALA_HOME</code></p>

<pre><code>$ cd ~/spark-0.8.0/conf
$ mv spark-env.sh.template spark-env.sh
$ vim spark-env.sh
# add the following line
export SCALA_HOME=/usr/lib/scala-2.9.3
# save and exit
</code></pre>

<p>在<code>conf/slaves</code>, 添加Spark worker的hostname, 一行一个。</p>

<pre><code>$ vim slaves
slave01
slave02
# save and exit
</code></pre>

<p>（可选）设置 SPARK_HOME环境变量，并将SPARK_HOME/bin加入PATH</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.8.0
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="workerspark">5.4 在所有worker上安装并配置Spark</h2>
<p>既然master上的这个文件件已经配置好了，把它拷贝到所有的worker即可。<strong>注意，三台机器spark所在目录必须一致，因为master会登陆到worker上执行命令，master认为worker的spark路径与自己一样。</strong></p>

<pre><code>$ cd
$ scp -r spark-0.8.0 dev@slave01:~
$ scp -r spark-0.8.0 dev@slave02:~
</code></pre>

<h2 id="spark-">5.5 启动 Spark 集群</h2>
<p>在master上执行</p>

<pre><code>$ cd ~/spark-0.8.0
$ bin/start-all.sh
</code></pre>

<p>检测进程是否启动</p>

<pre><code>$ jps
11055 Jps
2313 SecondaryNameNode
2409 JobTracker
2152 NameNode
4822 Master
</code></pre>

<p>浏览master的web UI(默认<a href="http://localhost:8080">http://localhost:8080</a>). 这是你应该可以看到所有的word节点，以及他们的CPU个数和内存等信息。</p>

<h2 id="spark-1">5.6 运行Spark自带的例子</h2>

<p>运行SparkPi</p>

<pre><code>$ cd ~/spark-0.8.0
$ ./run-example org.apache.spark.examples.SparkPi spark://master:7077
</code></pre>

<p>运行 SparkLR</p>

<pre><code>#Logistic Regression
#./run-example org.apache.spark.examples.SparkLR spark://master:7077
</code></pre>

<p>运行 SparkKMeans</p>

<pre><code>#kmeans
$ ./run-example org.apache.spark.examples.SparkKMeans spark://master:7077 ./kmeans_data.txt 2 1
</code></pre>

<h2 id="hdfswordcount">5.7 从HDFS读取文件并运行WordCount</h2>

<pre><code>$ cd ~/spark-0.8.0
$ hadoop fs -put README.md .
$ MASTER=spark://master:7077 ./spark-shell
scala&gt; val file = sc.textFile("hdfs://master:9000/user/dev/README.md")
scala&gt; val count = file.flatMap(line =&gt; line.split(" ")).map(word =&gt; (word, 1)).reduceByKey(_+_)
scala&gt; count.collect()
</code></pre>

<h2 id="spark--1">5.8 停止 Spark 集群</h2>

<pre><code>$ cd ~/spark-0.8.0
$ bin/stop-all.sh
</code></pre>

<h1 id="section-1">参考资料</h1>
<ol>
  <li><a href="http://spark-project.org/docs/latest/spark-standalone.html">Spark Standalone Mode</a></li>
  <li><a href="https://github.com/mesos/spark/wiki/Running-A-Spark-Standalone-Cluster">Running A Spark Standalone Cluster</a></li>
  <li><a href="http://sprism.blogspot.com/2012/11/lightning-fast-wordcount-using-spark.html">Lightning-Fast WordCount using Spark Alongside Hadoop</a></li>
</ol>

<p>以下博客都已经过时了：</p>

<ol>
  <li><a href="http://chapeau.freevariable.com/2013/04/installing-spark-on-fedora-18.html">Installing Spark on Fedora 18</a></li>
  <li><a href="http://rdc.taobao.com/team/jm/archives/1823">Spark随谈（二）—— 安装攻略</a></li>
  <li><a href="http://www.cnblogs.com/jerrylead/archive/2012/08/13/2636115.html">Spark安装与学习</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简洁的Scala]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130829"/>
    <updated>2013-08-29T21:38:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/concise-scala</id>
    <content type="html"><![CDATA[<p>Scala语言是很注重一致性(consistency)的，Scala的简洁性(concision)都是由其一致性带来的。</p>

<p>Scala的看上去很复杂，但是它在概念上是非常一致的。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。</p>

<h1 id="oo--fp">1. OO + FP</h1>

<h2 id="section">1.1 一切都是对象</h2>

<p>更精确地说，应该是“一切值都是对象”。</p>

<ul>
  <li>
    <p>整数, 浮点数等基本类型(primitive type)是对象  </p>

    <pre><code>  123.toByte
  3.14.toInt
</code></pre>

    <p>在Java中，primitive type不是对象，打破了一致性。</p>
  </li>
  <li>
    <p>函数是对象</p>

    <pre><code>  val compare = (x: Int, y: Int) =&gt; x &gt; y
  compare(1, 2)
</code></pre>
  </li>
  <li>
    <p>不再有静态方法(static method)和静态属性(static field)。Java中的静态方法(static method)和静态属性(static field)，有点打破了面向对象，因为它们不属于一个实例，而是属于类。在Scala中，静态方法和静态属性也属于对象，具体来说，属于Scala中的单例object。这样，静态成员和普通成员统一了起来，都附属于某个实例(instance)。</p>

    <pre><code>  object Dog {
    val sound = "wang wang" //static field
  }
</code></pre>
  </li>
</ul>

<h2 id="section-1">1.2 函数是值</h2>

<p>函数是一等公民，跟普通的值没区别</p>

<ul>
  <li>
    <p>可以当作参数传递</p>

    <pre><code>  val  compare = (x: Int , y: Int ) =&gt; x &gt;  y
  list sortWith compare
</code></pre>
  </li>
  <li>
    <p>不管它是实例的方法</p>

    <pre><code>  class AComparator  {
    def  compare(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith ( new  AComparator ).compare
</code></pre>
  </li>
  <li>
    <p>还是匿名子句</p>

    <pre><code>  object  annonymous extends scala.Function2[Int , Int , Boolean] {
    override  def  apply(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith annonymous 
</code></pre>
  </li>
</ul>

<h2 id="section-2">1.3 一切操作都是函数调用</h2>
<!-- more -->

<ul>
  <li>
    <p>运算符是函数调用</p>

    <pre><code>  1 +  1
  1.+(1)
  1.&gt;(0)
  1 &gt;  0
  (1 &gt;  0).&amp;(2 &gt;  1)
  (1 &gt;  0) &amp; 2 &gt;  1
  stack.push(10)
  stack push  10
  stack.pop
  stack pop
</code></pre>

    <p>注意，上述代码中，只有一个参数或零个参数的方法在调用时可以省略”.” 和”()”。</p>
  </li>
  <li>
    <p>更多的符号需要用作方法名</p>

    <pre><code>  def  !@#%^&amp;*\-&lt;=&gt;?|~:/ = println("noop" )
  def  √(x: Double ) = Math.sqrt( x)
  val  Π =  Math.Pi
  val  r =  √( 9*Π)
</code></pre>
  </li>
  <li>
    <p>‘&lt;’, ‘&gt;’ 更适合作方法名，所以用’[’ 和‘]’ 来表示类型参数</p>
  </li>
  <li>
    <p>for语句是函数调用</p>

    <pre><code>  for  (i &lt;- List(1, 2)) {
    println(i)
  }
  List(1, 2) foreach { i =&gt; println(i)}
  for  (i &lt;- List(1, 2))  yield {
    i +  10
  }
  List(1, 2) map {i =&gt; i +  10}
</code></pre>
  </li>
  <li>
    <p>更多的例子</p>

    <pre><code>  // synchronized is function call instead of keyword
  def  check = synchronized {
    // isInstanceOf is function call instead of keyword
    100.isInstanceOf[ String ] 
  }
</code></pre>
  </li>
  <li>
    <p>额外的好处：自左向右顺序书写语句</p>

    <pre><code>  stack.pop.asInstanceOf[ Int ] // (Integer) stack.pop() in Java
</code></pre>
  </li>
</ul>

<h2 id="section-3">1.4 一切操作都有返回值</h2>

<ul>
  <li>
    <p>默认返回最后一条语句的值，也可以用return 显式返回</p>

    <pre><code>  val  r1 = { // return 3
    val  a =  1
    val  b =  2
    a +  b
  }
  val  r2 =  if (true) 1 else 2
  val  r3 =  // return (): Unit
    for  (i &lt;- List(1, 2)) {
      println(i)
    }
  val  r4 =  // return List(11, 12)
    for  (i &lt;- List(1, 2))  yield {
       i +  10
    }
  val  r5 =  // return java.io.File
  try  {
     val  f =  new  File("afile")
     f
  }  catch {
     case ex: IOException  =&gt; null
  }
</code></pre>
  </li>
</ul>

<p>Scala里不再像C/C++, Java，区分语句(statement)和表达式(expression)。Scala里没有statement，只有expression，因此一切操作都是表达式，都有返回值。Scala可以说是<strong>expression-oriented</strong>。</p>

<p>关于语句和表达式的区别，可以看”Scala in depth”一书中的比较:</p>

<blockquote>
  <p><strong>Statement Versus Expression</strong> A statement is something that execute; an expression is something that evaluates to a value.</p>
</blockquote>

<h2 id="oo--fp-1">1.5 总结：一切都是对象+数据即操作，操作即数据 = OO + FP</h2>

<h1 id="type-system">2. 一致的类型系统(type system)</h1>

<h2 id="scala-class-hierarchy">2.1 scala class hierarchy</h2>

<p><img src="http://www.scala-lang.org/old/sites/default/files/images/classhierarchy.png" /></p>

<h2 id="any">2.2 根类 Any</h2>

<p>Scala 上有一个共同的根类<strong>Any</strong>。Any统一了基本类型和引用类型。</p>

<h2 id="nullnothing">2.3 两个尾类Null和Nothing。</h2>

<p>JVM上的null是Null类，它是所有AnyRef的子类。</p>

<p>Nothing是所有类型（包括AnyVal和AnyRef）的子类。它没有值（实例），用于处理一些特殊情况，例如出错时返回该类型。</p>

<h2 id="invariant-covariant-contravariant">2.4 Invariant, Covariant, Contravariant</h2>

<h2 id="type-parameter-vs-abstract-type-member">2.5 类型参数(type parameter) VS. 抽象类型成员(abstract type member)</h2>

<pre><code>trait Pair[K, V] {
  def get(key: K): V
  def set(key: K, value: V)
}
class PairImpl extends Pair[Dog, Fox] {
  def get(key: Dog): Fox
  def put(key: Dog, value: Fox)
}
</code></pre>

<p>类型参数的名字会发散到所有子类和引用的类，因此改变类型名字时需要修改很多地方</p>

<pre><code>trait Pair{
  type K // deferred type
  type V // deferred type
  defget(key: K): V
  defset(key: K, value: V)
}
class PairImpl extends Pair{
  type K= Dog
  type V= Fox
  defget(key: K): V
  defset(key: K, value: V)
}
</code></pre>

<p>抽象类型成员，改变类型名字时，只需要修改一处地方</p>

<h1 id="section-4">4. 一些牛人的讨论</h1>

<p><a href="http://dcaoyuan.iteye.com/blog/502730">2 楼 dcaoyuan 2009-10-25</a>  </p>

<blockquote>
  <p>这次会上讲PPT时间有点不够，但这个PPT中提到的每句话都是仔细想过的，强调的是Scala中一些概念的一致性，比如，有关Scala的文章中常提到“值都是对象”，准确地说，应该是“值都是对象的实例”，还有，“操作、函数、参数可以互相转化，都是值，都是实例的对象”，这其实是Scala可以扩展的关键，也是OO+FP能够比较好地在Scala中结合的关键。 </p>

  <p>还有就是Scala的类型体系，看上去复杂，其实是为了修正Java中类型体系的一些问题，并且带了了一个JVM上的完整一致的类型体系。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。 </p>

  <p>总之，我看到的Scala的简单性都是由其一致性带来的，虽然设计者为了开发人员的习惯作了一点点妥协，但还是非常坚持他的设计理念。 </p>

  <p>Martin不是一个简单的人，为了在JVM上实现他的设计理念，其后台的具体实现其实是相当复杂和困难的，但他坚持并不断实践，有时候甚至不惜把原来的实现推倒重来，终于在2.6以后有了我们现在看到的相当理想的结果。</p>
</blockquote>

<h1 id="section-5">参考资料</h1>

<ol>
  <li><a href="http://www.slideshare.net/dcaoyuan/scalajava">2009. 邓草原. 对Java的修正和超越</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装Spark集群(在CentOS上)]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130617"/>
    <updated>2013-06-17T22:16:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/installing-spark-on-centos-cn</id>
    <content type="html"><![CDATA[<p><strong>环境</strong>:CentOS 6.4, Hadoop 1.1.2, JDK 1.7, Spark 0.7.2, Scala 2.9.3</p>

<p>折腾了几天，终于把Spark 集群安装成功了，其实比hadoop要简单很多，由于网上搜索到的博客大部分都还停留在需要依赖mesos的版本，走了不少弯路。</p>

<h1 id="jdk-17">1. 安装 JDK 1.7</h1>
<pre><code>yum search openjdk-devel
sudo yum install java-1.7.0-openjdk-devel.x86_64
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
sudo vim /etc/profile
# add the following lines at the end
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
# test
$ java -version
</code></pre>

<p>参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120423/">安装和配置CentOS服务器的详细步骤</a>。</p>

<h1 id="scala-293">2. 安装 Scala 2.9.3</h1>
<p>Spark 0.7.2 依赖 Scala 2.9.3, 我们必须要安装Scala 2.9.3.</p>

<p>下载 <a href="http://www.scala-lang.org/downloads/distrib/files/scala-2.9.3.tgz">scala-2.9.3.tgz</a> 并 保存到home目录.</p>

<pre><code>$ tar -zxf scala-2.9.3.tgz
$ sudo mv scala-2.9.3 /usr/lib
$ sudo vim /etc/profile
# add the following lines at the end
export SCALA_HOME=/usr/lib/scala-2.9.3
export PATH=$PATH:$SCALA_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
source /etc/profile
# test
$ scala -version
</code></pre>

<h1 id="spark">3. 下载预编译好的Spark</h1>
<p>下载预编译好的Spark, <a href="http://www.spark-project.org/download-spark-0.7.2-prebuilt-hadoop1">spark-0.7.2-prebuilt-hadoop1.tgz</a>. </p>

<p>如果你想从零开始编译，则下载源码包，但是我不建议你这么做，因为有一个Maven仓库，twitter4j.org, 被墙了，导致编译时需要翻墙，非常麻烦。如果你有DIY精神，并能顺利翻墙，则可以试试这种方式。</p>

<h1 id="section">4. 本地模式</h1>

<h2 id="section-1">4.1 解压</h2>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<h2 id="sparkexamplesjar-">4.2 设置SPARK_EXAMPLES_JAR 环境变量</h2>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>这一步其实最关键，很不幸的是，官方文档和网上的博客，都没有提及这一点。我是偶然看到了这两篇帖子，<a href="https://groups.google.com/forum/?fromgroups#!topic/spark-users/nQ6wB2lcFN8">Running SparkPi</a>, <a href="https://groups.google.com/forum/#!msg/spark-users/x5UczgI-Xm8/wzMm3Mb77-oJ">Null pointer exception when running ./run spark.examples.SparkPi local</a>，才补上了这一步，之前死活都无法运行SparkPi。</p>

<h2 id="sparkhomesparkhomebinpath">4.3 （可选）设置 SPARK_HOME环境变量，并将SPARK_HOME/bin加入PATH</h2>
<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="sparkpi">4.4 现在可以运行SparkPi了</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi local 
</code></pre>

<h1 id="section-2">5. 集群模式</h1>

<!-- more -->

<h2 id="hadoop">5.1 安装Hadoop</h2>
<p>用VMware Workstation 创建三台CentOS 虚拟机，hostname分别设置为 master, slave01, slave02，设置SSH无密码登陆，安装hadoop，然后启动hadoop集群。参考我的这篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20130612">在CentOS上安装Hadoop</a>. </p>

<h2 id="scala">5.2 Scala</h2>
<p>在三台机器上都要安装 Scala 2.9.3 , 按照第2节的步骤。JDK在安装Hadoop时已经安装了。</p>

<h2 id="masterspark">5.3 在master上安装并配置Spark</h2>
<p>解压</p>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<p>设置SPARK_EXAMPLES_JAR 环境变量</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>在 in <code>conf/spark-env.sh</code> 中设置<code>SCALA_HOME</code></p>

<pre><code>$ cd ~/spark-0.7.2/conf
$ mv spark-env.sh.template spark-env.sh
$ vim spark-env.sh
# add the following line
export SCALA_HOME=/usr/lib/scala-2.9.3
# save and exit
</code></pre>

<p>在<code>conf/slaves</code>, 添加Spark worker的hostname, 一行一个。</p>

<pre><code>$ vim slaves
slave01
slave02
# save and exit
</code></pre>

<p>（可选）设置 SPARK_HOME环境变量，并将SPARK_HOME/bin加入PATH</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="workerspark">5.4 在所有worker上安装并配置Spark</h2>
<p>既然master上的这个文件件已经配置好了，把它拷贝到所有的worker。<strong>注意，三台机器spark所在目录必须一致，因为master会登陆到worker上执行命令，master认为worker的spark路径与自己一样。</strong></p>

<pre><code>$ cd
$ scp -r spark-0.7.2 dev@slave01:~
$ scp -r spark-0.7.2 dev@slave02:~
</code></pre>

<p>按照第5.3节设置<code>SPARK_EXAMPLES_JAR</code>环境变量，配置文件不用配置了，因为是直接从master复制过来的，已经配置好了。</p>

<h2 id="spark-">5.5 启动 Spark 集群</h2>
<p>在master上执行</p>

<pre><code>$ cd ~/spark-0.7.2
$ bin/start-all.sh
</code></pre>

<p>检测进程是否启动</p>

<pre><code>$ jps
11055 Jps
2313 SecondaryNameNode
2409 JobTracker
2152 NameNode
4822 Master
</code></pre>

<p>浏览master的web UI(默认<a href="http://localhost:8080">http://localhost:8080</a>). 这是你应该可以看到所有的word节点，以及他们的CPU个数和内存等信息。
##5.6 运行SparkPi例子</p>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi spark://master:7077
</code></pre>

<p>（可选）运行自带的例子，SparkLR 和 SparkKMeans.</p>

<pre><code>#Logistic Regression
#./run spark.examples.SparkLR spark://master:7077
#kmeans
$ ./run spark.examples.SparkKMeans spark://master:7077 ./kmeans_data.txt 2 1
</code></pre>

<h2 id="hdfswordcount">5.7 从HDFS读取文件并运行WordCount</h2>

<pre><code>$ cd ~/spark-0.7.2
$ hadoop fs -put README.md .
$ MASTER=spark://master:7077 ./spark-shell
scala&gt; val file = sc.textFile("hdfs://master:9000/user/dev/README.md")
scala&gt; val count = file.flatMap(line =&gt; line.split(" ")).map(word =&gt; (word, 1)).reduceByKey(_+_)
scala&gt; count.collect()
</code></pre>

<h2 id="spark--1">5.8 停止 Spark 集群</h2>

<pre><code>$ cd ~/spark-0.7.2
$ bin/stop-all.sh
</code></pre>

<h1 id="section-3">参考资料</h1>
<ol>
  <li><a href="http://spark-project.org/docs/latest/spark-standalone.html">Spark Standalone Mode</a></li>
  <li><a href="https://github.com/mesos/spark/wiki/Running-A-Spark-Standalone-Cluster">Running A Spark Standalone Cluster</a></li>
  <li><a href="http://sprism.blogspot.com/2012/11/lightning-fast-wordcount-using-spark.html">Lightning-Fast WordCount using Spark Alongside Hadoop</a></li>
</ol>

<p>以下博客都已经过时了：</p>

<ol>
  <li><a href="http://chapeau.freevariable.com/2013/04/installing-spark-on-fedora-18.html">Installing Spark on Fedora 18</a></li>
  <li><a href="http://rdc.taobao.com/team/jm/archives/1823">Spark随谈（二）—— 安装攻略</a></li>
  <li><a href="http://www.cnblogs.com/jerrylead/archive/2012/08/13/2636115.html">Spark安装与学习</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spark on CentOS]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130614"/>
    <updated>2013-06-14T19:06:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/installing-spark-on-centos</id>
    <content type="html"><![CDATA[<p><strong>Environment</strong>:CentOS 6.4, Hadoop 1.1.2, JDK 1.7, Spark 0.7.2, Scala 2.9.3</p>

<p>After a few days hacking , I have found that installing a Spark cluster is exteremely easy :)</p>

<h1 id="install-jdk-17">1. Install JDK 1.7</h1>
<pre><code>yum search openjdk-devel
sudo yum install java-1.7.0-openjdk-devel.x86_64
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
sudo vim /etc/profile
# add the following lines at the end
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
# test
$ java -version
</code></pre>

<h1 id="install-scala-293">2. Install Scala 2.9.3</h1>
<p>Spark 0.7.2 depends on Scala 2.9.3, So we must install Scala of version 2.9.3.</p>

<p>Download <a href="http://www.scala-lang.org/downloads/distrib/files/scala-2.9.3.tgz">scala-2.9.3.tgz</a> and save it to home directory.</p>

<pre><code>$ tar -zxf scala-2.9.3.tgz
$ sudo mv scala-2.9.3 /usr/lib
$ sudo vim /etc/profile
# add the following lines at the end
export SCALA_HOME=/usr/lib/scala-2.9.3
export PATH=$PATH:$SCALA_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
source /etc/profile
# test
$ scala -version
</code></pre>

<h1 id="download-prebuilt-packages">3. Download prebuilt packages</h1>
<p>Download prebuilt packages, <a href="http://www.spark-project.org/download-spark-0.7.2-prebuilt-hadoop1">spark-0.7.2-prebuilt-hadoop1.tgz</a>. </p>

<p>If you want to compile it from scratch, download the source package, but I don’t recommend this way, because in Chinese Mainland the GFW has blocked one of maven repositories, twitter4j.org, which makes the compilation an impossible mission unless you can conquer GFW.</p>

<h1 id="local-mode">4. Local Mode</h1>

<h2 id="untar-the-tarball">4.1 Untar the tarball</h2>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<h2 id="set-the-sparkexamplesjar-environment-variable">4.2 Set the SPARK_EXAMPLES_JAR environment variable</h2>
<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>This is the most important step that must be done , but unfortunately the official docs and most web blogs haven’t mentioned this. I found this step when I bumped into these posts, <a href="https://groups.google.com/forum/?fromgroups#!topic/spark-users/nQ6wB2lcFN8">Running SparkPi</a>, <a href="https://groups.google.com/forum/#!msg/spark-users/x5UczgI-Xm8/wzMm3Mb77-oJ">Null pointer exception when running ./run spark.examples.SparkPi local</a>.</p>

<h2 id="optionalset-sparkhome-and-add-sparkhomebin-to-path">4.3 (Optional)Set SPARK_HOME and add SPARK_HOME/bin to PATH</h2>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="now-you-can-run-sparkpi">4.4 Now you can run SparkPi.</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi local 
</code></pre>

<h1 id="cluster-mode">5. Cluster Mode</h1>

<!-- more -->

<h2 id="install-hadoop">5.1 Install hadoop</h2>
<p>Use VMware Workstation to create three CentOS virtual machines, which’s hostnames are master, slave01, slave02, setup password-less ssh to the slaves, install hadoop on the three machines and start up the hadoop cluster. For more details please read another blog of mine, <a href="http://www.yanjiuyanjiu.com/blog/20130612">在CentOS上安装Hadoop</a>.</p>

<h2 id="install-jdk-and-scala">5.2 Install JDK and Scala</h2>
<p>Install JDK 1.7 and Scala 2.9.3 on the three machines, according to section 1 and section 2.</p>

<h2 id="install-and-configure-spark-on-master">5.3 Install and configure Spark on master</h2>
<p>Untar</p>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<p>Set the SPARK_EXAMPLES_JAR environment variable</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>Set <code>SCALA_HOME</code> in <code>conf/spark-env.sh</code></p>

<pre><code>$ cd ~/spark-0.7.2/conf
$ mv spark-env.sh.template spark-env.sh
$ vim spark-env.sh
# add the following line
export SCALA_HOME=/usr/lib/scala-2.9.3
# save and exit
</code></pre>

<p>In<code>conf/slaves</code>, add hostnames of Spark workers, one per line.</p>

<pre><code>$ vim slaves
slave01
slave02
# save and exit
</code></pre>

<p>(Optional)Set SPARK_HOME and add SPARK_HOME/bin to PATH</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="install-and-configure-spark-on-workers">5.4 Install and configure Spark on workers</h2>
<p>Copy the spark directory to all slaves. <strong>Remark，the spark directories must locat at the the same path on all machines，because the master will login to work to execute spark commands, it assumes that workers have the same path as itself</strong></p>

<pre><code>$ cd
$ scp -r spark-0.7.2 dev@slave01:~
$ scp -r spark-0.7.2 dev@slave02:~
</code></pre>

<p>Set <code>SPARK_EXAMPLES_JAR</code>  on all slaves as section 5.3. There is no need to edit configuration files because they are copied from master, which are already well configured.</p>

<h2 id="start-spark-cluster">5.5 Start Spark cluster</h2>
<p>On master</p>

<pre><code>$ cd ~/spark-0.7.2
$ bin/start-all.sh
</code></pre>

<p>Check whether the processes have been started.</p>

<pre><code>$ jps
11055 Jps
2313 SecondaryNameNode
2409 JobTracker
2152 NameNode
4822 Master
</code></pre>

<p>Look at the master’s web UI (<a href="http://localhost:8080">http://localhost:8080</a> by default). You should see the new node listed there, along with its number of CPUs and memory (minus one gigabyte left for the OS).</p>

<h2 id="run-the-sparkpi-example-in-cluster-mode">5.6 run the SparkPi example in cluster mode</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi spark://master:7077
</code></pre>

<p>(Optional)Run built-in examples, SparkLR and SparkKMeans.</p>

<pre><code>#Logistic Regression
#./run spark.examples.SparkLR spark://master:7077
#kmeans
$ ./run spark.examples.SparkKMeans spark://master:7077 ./kmeans_data.txt 2 1
</code></pre>

<h2 id="read-files-from-hdfs-and-run-wordcount">5.7 read files from HDFS and run WordCount</h2>

<pre><code>$ cd ~/spark-0.7.2
$ hadoop fs -put README.md .
$ MASTER=spark://master:7077 ./spark-shell
scala&gt; val file = sc.textFile("hdfs://master:9000/user/dev/README.md")
scala&gt; val count = file.flatMap(line =&gt; line.split(" ")).map(word =&gt; (word, 1)).reduceByKey(_+_)
scala&gt; count.collect()
</code></pre>

<h2 id="stop-spark-cluster">5.8 Stop Spark cluster</h2>

<pre><code>$ cd ~/spark-0.7.2
$ bin/stop-all.sh
</code></pre>

<h1 id="references">References</h1>
<ol>
  <li><a href="http://spark-project.org/docs/latest/spark-standalone.html">Spark Standalone Mode</a></li>
  <li><a href="https://github.com/mesos/spark/wiki/Running-A-Spark-Standalone-Cluster">Running A Spark Standalone Cluster</a></li>
  <li><a href="http://sprism.blogspot.com/2012/11/lightning-fast-wordcount-using-spark.html">Lightning-Fast WordCount using Spark Alongside Hadoop</a></li>
</ol>

<p>The following posts are outdated.</p>

<ol>
  <li><a href="http://chapeau.freevariable.com/2013/04/installing-spark-on-fedora-18.html">Installing Spark on Fedora 18</a></li>
  <li><a href="http://rdc.taobao.com/team/jm/archives/1823">Spark随谈（二）—— 安装攻略</a></li>
  <li><a href="http://www.cnblogs.com/jerrylead/archive/2012/08/13/2636115.html">Spark安装与学习</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS上安装Hadoop]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130612"/>
    <updated>2013-06-12T12:39:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/hadoop-installatioin-on-centos</id>
    <content type="html"><![CDATA[<p>Ubuntu上安装，请参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120103/">在Ubuntu上安装Hadoop</a>。</p>

<p><strong>环境</strong>：CentOS 6.4, JDK 1.7, Hadoop 1.1.2</p>

<h2 id="vmware-workstation-">1. 用vmware workstation 创建三台虚拟机</h2>
<p>首先用vmware workstation 新建一台CentOS 6.4，装好操作系统，选择 Basic Server，安装JDK，参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120423/">安装和配置CentOS服务器的详细步骤</a>。安装好后然后用浅拷贝<code>Create a linked clone</code> 克隆出两台作为slave，这样有了三台虚拟机。启动三台机器，假设IP分别为<code>192.168.1.131, 192.168.1.132, 192.168.1.133</code>, 131做为master 和 SecondaryNameNode, 身兼两职， 132和133为 slaves。</p>

<h2 id="section">2 关闭防火墙</h2>
<p>临时关闭防火墙</p>

<pre><code>$ sudo service iptables stop
</code></pre>

<p>下次开机后，防火墙还是会启动。</p>

<p>永久关闭防火墙</p>

<pre><code>$ sudo chkconfig iptables off
</code></pre>

<p>由于这几台虚拟机是开发机，不是生产环境，因此不必考虑安全性，可以永久关闭防火墙，还能给开发阶段带来很多便利。</p>

<h2 id="hostname">3. 修改hostname</h2>
<p>这一步看起来貌似不必要，其实是必须的，否则最后运行wordcount等例子时，会出现“Too many fetch-failures”。因为HDFS用hostname而不是IP，来相互之间进行通信（见后面的注意1）。</p>

<p>在CentOS上修改hostname，包含两个步骤(假设将hostname1改为hostname2，参考<a href="http://www.ichiayi.com/wiki/tech/linux_hostname">这里</a>，但不需要第一步)：</p>

<ol>
  <li>将 <code>/etc/sysconfig/network</code> 內的 HOSTNAME 改成 hostname2</li>
  <li>用<code>hostname</code>命令，临时修改机器名， <code>sudo hostname hostname2</code></li>
</ol>

<p>用<code>exit</code>命令退出shell，再次登录，命令提示字符串就会变成<code>[dev@hostname2 ~]$</code>。</p>

<p>用上述方法，将131改名为master，132改名为slave01，133改名为slave02。</p>

<p>在三台机器的/etc/hosts文件中，添加以下三行内容</p>

<pre><code>192.168.1.131 master
192.168.1.132 slave01
192.168.1.133 slave02
</code></pre>

<h2 id="section-1">4. 本地模式和伪分布式模式</h2>

<p>为了能顺利安装成功，我们先练习在单台机器上安装Hadoop。在单台机器上，可以配置成本地模式(local mode)和伪分布式模式(Pseudo-Distributed Mode)，参考官方文档<a href="http://hadoop.apache.org/docs/r1.1.2/single_node_setup.html">Single Node Setup</a>。</p>

<p>将 hadoop-1.1.2-bin.tar.gz 上传到三台机器的 home目录下，然后解压。<strong>注意，三台机器hadoop所在目录必须一致，因为master会登陆到slave上执行命令，master认为slave的hadoop路径与自己一样。</strong></p>

<h3 id="confhadoop-envsh-javahome">4.1 编辑 conf/hadoop-env.sh，设置 JAVA_HOME</h3>

<pre><code>cd hadoop-1.1.2
vim conf/hadoop-env.sh
</code></pre>

<p>注释掉第8行的JAVA_HOME，设置正确的JDK位置</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
</code></pre>

<h3 id="section-2">4.2 测试本地模式是否正常</h3>
<p>默认情况下，Hadoop就被配置为本地模式，现在就可以开始测试一下。</p>

<pre><code>$ mkdir input 
$ cp conf/*.xml input 
$ bin/hadoop jar hadoop-examples-*.jar grep input output 'dfs[a-z.]+' 
$ cat output/*
</code></pre>

<p>可以看到正常的结果，说明本地模式运行成功了，下面开始配置伪分布式模式。</p>

<!-- more -->

<h3 id="ssh">4.3 配置SSH无密码登陆本机</h3>

<pre><code>$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<p>修改sshd的配置文件(需要root权限)</p>

<pre><code>$ sudo vim /etc/ssh/sshd_config
</code></pre>

<p>找到以下三行，并去掉注释符”#“</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>修改了配置文件需要重启sshd服务</p>

<pre><code>sudo service sshd restart
</code></pre>

<p>修改 <code>authorized_keys</code> 文件的权限，否则ssh登陆的时候还是需要密码。权限的设置非常重要,因为不安全的设置,会让你不能使用RSA功能，参考 <a href="http://www.cnblogs.com/xia520pi/archive/2012/05/16/2504132.html">http://www.cnblogs.com/xia520pi/archive/2012/05/16/2504132.html</a></p>

<pre><code>$ chmod 600 ~/.ssh/authorized_keys
</code></pre>

<h3 id="section-3">4.4 修改配置文件</h3>
<p>conf/core-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;fs.default.name&lt;/name&gt;
         &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/hdfs-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.replication&lt;/name&gt;
         &lt;value&gt;1&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/mapred-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;mapred.job.tracker&lt;/name&gt;
         &lt;value&gt;localhost:9001&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<h3 id="hadoop">4.5 启动Hadoop，测试伪分布式模式</h3>

<p>格式化namenode</p>

<pre><code>$ bin/hadoop namenode -format
</code></pre>

<p>启动 Hadoop 后台进程</p>

<pre><code>$ bin/start-all.sh
</code></pre>

<p>现在可以用浏览器打开NameNode和JobTracker的web界面了。<br />
NameNode - <a href="http://localhost:50070/">http://localhost:50070/</a><br />
JobTracker - <a href="http://localhost:50030/">http://localhost:50030/</a></p>

<p>将输入数据拷贝到分布式文件系统中:</p>

<pre><code>$ bin/hadoop fs -put conf input
</code></pre>

<p>如果这时出现 <code>SafeModeException</code> 异常，不用担心，等待几分钟即可。因为hadoop刚刚启动时，会进入安全模式进行自检。</p>

<p>运行 Hadoop 自带的例子:</p>

<pre><code>$ bin/hadoop jar hadoop-examples-*.jar grep input output 'dfs[a-z.]+'
</code></pre>

<p>查看输出文件:</p>

<pre><code>$ bin/hadoop fs -cat output/*
</code></pre>

<p>当你做完了后，关闭 Hadoop:</p>

<pre><code>$ bin/stop-all.sh
</code></pre>

<h2 id="section-4">5. 分布式模式</h2>
<p>如果有多台机器，就可以把Hadoop 配置成分布式模式(或称为集群模式)。参考官方文档<a href="http://hadoop.apache.org/docs/r1.1.2/cluster_setup.html">Cluster Setup</a>.</p>

<h2 id="master-master">5.1 配置 master 无密码登陆到所有机器（包括master自己登陆自己）</h2>
<p>首先在两台slave上修改sshd的配置文件，然后重启sshd服务。</p>

<pre><code>$ sudo vim /etc/ssh/sshd_config  找到以下三行，并去掉注释符”#“

RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>修改了配置文件需要重启sshd服务</p>

<pre><code>$ sudo service sshd restart
</code></pre>

<p>在两台slaves机器上新建 ~/.ssh 目录</p>

<pre><code>$ mkdir ~/.ssh
</code></pre>

<p>接着，参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120102/">SSH无密码登录的配置</a></p>

<h3 id="section-5">5.2 修改6个配置文件</h3>
<p>在 master 上修改配置文件。</p>

<p>编辑 conf/hadoop-env.sh，设置 JAVA_HOME。</p>

<p>在master上编辑 conf/hadoop-env.sh，注释掉第8行的JAVA_HOME，设置正确的JDK位置，确保集群中所有机器的JDK都安装在这个位置，这样待会儿后面可以用scp命令把master的6个配置文件(hadoop-env.sh, core-site.xml, hdfs-site.xml, mapred-site.xml, masters, slaves)拷贝到所有slaves机器上，这样其他机器就不用重复进行配置了。</p>

<p>conf/masters:</p>

<pre><code>master
</code></pre>

<p>conf/slaves:</p>

<pre><code>slave01
slave02
</code></pre>

<p>这两个配置文件的作用是，指定131作为master, 132和133为 slaves。</p>

<p>conf/core-site.xml:</p>

<pre><code>&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;fs.default.name&lt;/name&gt;
        &lt;value&gt;hdfs://master:9000&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/hdfs-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.name.dir&lt;/name&gt;
         &lt;value&gt;/home/dev/hdfs/name&lt;/value&gt;
     &lt;/property&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.data.dir&lt;/name&gt;
         &lt;value&gt;/home/dev/hdfs/data&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>要在master创建 /home/dev/hdfs/name 目录，在 slaves上创建 /home/dev/hdfs/data 目录，并<code>chmod g-w /home/dev/hdfs/data</code>（权限不对的话datanode无法启动）。</p>

<p>conf/mapred-site.xml:</p>

<pre><code>&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;mapred.job.tracker&lt;/name&gt;
        &lt;value&gt;master:9001&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<h3 id="slaves">5.3 将配置文件拷贝到所有slaves</h3>

<pre><code>$ cd ~/hadoop-1.1.2/conf/
$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.132:~/hadoop-1.1.2/conf/
$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.133:~/hadoop-1.1.2/conf/
</code></pre>

<h3 id="hadoophomehadoophomebinpath">5.4 （可选）设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH</h3>
<p>这一步是为了将bin目录加入PATH，这样可以在任何位置执行hadoop的各种命令。这步是可选的。</p>

<p>Hadoop不推荐使用<code>$HADOOP_HOME</code>，你可以试一下，当设置了<code>$HADOOP_HOME</code>后，执行<code>bin/start-all.sh</code>，第一行会打印出一行警告信息，<code>Warning: $HADOOP_HOME is deprecated.</code></p>

<p>给所有机器设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH。</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export HADOOP_HOME=$HOME/hadoop-1.1.2
export PATH=$PATH:$HOME/bin:$HADOOP_HOME/bin::$HADOOP_HOME/sbin
export CLASSPATH=$CLASSPATH:$HADOOP_HOME/hadoop-core-1.1.2.jar
# make the bash profile take effect immediately
$ source ~/.bash_profile
</code></pre>

<h2 id="hadoopbinhadoop">5.5 （可选）设置别名，名称为hadoop，指向bin/hadoop</h2>
<p>像bin目录下的start-all.sh, stop-all.sh其实不常用，对于一个hadoop使用者而言，最常用的命令是hadoop，例如<code>hadoop fs -ls</code>。前面5.4节将bin目录加入PATH，相当于一股脑儿将所有的命令加入了PATH，其实大可不必，我们只需要设置一个别名，名称为hadoop，指向bin/hadoop就可以了。</p>

<p>在所有机器上设置hadoop 别名，步骤如下：</p>

<pre><code>$ vim ~/.bash_profile
# add the following line at the end
alias hadoop='~/hadoop-1.1.2/bin/hadoop'
#make the bash profile take effect immediately
$ source ~/.bash_profile
</code></pre>

<h3 id="hadoop-1">5.6 运行 hadoop</h3>
<p>在master上执行以下命令，启动hadoop</p>

<pre><code>$ cd ~/hadoop-1.1.2/
#只需一次，下次启动不再需要格式化，只需 start-all.sh
$ bin/hadoop  namenode -format
$ bin/start-all.sh
</code></pre>

<h3 id="section-6">5.7 检查是否启动成功</h3>

<p>在master上执行：</p>

<pre><code>$ jps

2615 NameNode
2767 JobTracker
2874 Jps
</code></pre>

<p>在一台slave上执行：</p>

<pre><code>$ jps

3415 DataNode
3582 TaskTracker
3499 SecondaryNameNode
3619 Jps
</code></pre>

<p>在另一台slave上执行：</p>

<pre><code>$ jps

3741 Jps
3618 DataNode
3702 TaskTracker
</code></pre>

<p>可见进程都启动起来了，说明hadoop运行成功。</p>

<h3 id="wordcount">5.8 运行wordcount例子，进一步测试是否安装成功</h3>
<p>将输入数据拷贝到分布式文件系统中:</p>

<pre><code>$ cd ~/hadoop-1.1.2/
$ bin/hadoop fs -put conf input
</code></pre>

<p>运行 Hadoop 自带的例子:</p>

<pre><code>$ bin/hadoop jar hadoop-examples-*.jar wordcount input output
</code></pre>

<p>查看输出文件:</p>

<pre><code>$ bin/hadoop s -ls output
$ bin/hadoop fs -cat output/part-r-00000
</code></pre>

<p>如果能看到结果，说明这个例子运行成功。</p>

<h3 id="hadoop-2">5.9 停止 hadoop集群</h3>
<p>在master上执行：</p>

<pre><code>$ bin/stop-all.sh
</code></pre>

<h2 id="section-7">6. 排除错误</h2>
<p>本文已经尽可能的把步骤详细列出来了，但是我相信大部分人不会一次成功。这时候，查找错误就很重要了。查找错误最重要的手段是查看hadoop的日志，一般在logs目录下。把错误消息复制粘贴到google，搜索一下，慢慢找错误。</p>

<h2 id="section-8">注意</h2>
<ol>
  <li>所有配置文件只能用hostname，不能用IP。两年前我不懂，还为此<a href="http://stackoverflow.com/questions/8702637/hadoop-conf-fs-default-name-cant-be-setted-ipport-format-directly">在stackoverflow上发了帖子</a>。hadoop会反向解析hostname，即使是用了IP，也会使用hostname 来启动TaskTracker。参考<a href="http://stackoverflow.com/questions/15230946/hdfs-lan-ip-address-hostname-resolution">hdfs LAN ip address hostname resolution</a>，<a href="http://www.makenotes.net/?p=337004">hadoop入门经验总结- 杨贵堂的博客</a>，<a href="http://51mst.iteye.com/blog/1152439">hadoop集群配置</a>。</li>
  <li>如果在第 3.7步有问题，可以<code>stop-all.sh</code>, 然后<code>hadoop  namenode -format</code>，反复多试几次，一般可以成功。如果不习惯，多看看 logs目录下的日志文件，把错误消息复制粘贴到google，搜索答案。</li>
  <li>在第2.5步骤，如果出现 <code>SafeModeException</code> 异常，不用担心，等待几分钟即可。因为hadoop刚刚启动时，会进入安全模式进行自检，这需要花点时间。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scala IDE 阅读spark源码 -- 将sbt项目转化为eclipse项目]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130611"/>
    <updated>2013-06-11T11:48:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/read-spark-source-code-using-scala-ide</id>
    <content type="html"><![CDATA[<p>阅读Spark源代码，最简单的方式是下载源码包，解压后用纯文本方式来阅读源码。这样效率不高，可以用sbteclipse这个插件，将sbt项目文件转化为eclipse项目文件，然后导入到Scala IDE，用eclipse来阅读源码，效率大大提高。</p>

<p><strong>环境</strong>：Windows 7, JDK 1.6</p>

<ol>
  <li>安装 scala。去官网 <a href="http://www.scala-lang.org/">http://www.scala-lang.org/</a> ，下载MSI，安装，按默认设置即可。</li>
  <li>
    <p>安装 sbt。去官网 <a href="http://www.scala-sbt.org/">http://www.scala-sbt.org/</a> ， 下载MSI，安装，按默认设置即可。
Linux下可以省略以上两步，spark源码自带了一个sbt，且启动sbt时它会自动下载对应的scala编译器。</p>
  </li>
  <li>
    <p>安装 Scala IDE。 去官网 <a href="http://scala-ide.org/">http://scala-ide.org/</a>，点击”Get the SDK”绿色按钮，下载。这个IDE的好处是，自带了scala编译器，解压即可使用。</p>
  </li>
  <li>
    <p>下载spark源码。 去官网 <a href="http://spark-project.org/">http://spark-project.org/</a> 下载源码，当前版本是 0.7.2, source package 大约4M左右。解压源码，例如 解压到 d:spark-0.7.0\</p>
  </li>
  <li>
    <p>添加 sbteclipse 插件依赖。spark已经添加了依赖，这一步什么也不需要做。</p>

    <p>这个插件的作用，就是能够读取sbt的配置文件，生成一个eclipse的工程文件。有了eclipse工程文件，就可以导入到eclipse了。</p>

    <p>spark已经添加了依赖，见 d:\spark-0.7.2\project\plugins.sbt，有一行</p>

    <p>addSbtPlugin(“com.typesafe.sbteclipse” % “sbteclipse-plugin” % “2.1.1”)</p>
  </li>
  <li>
    <p>启动cmd，启动sbt。</p>

    <blockquote>
      <p>cd  d:\spark-0.7.0<br />
 sbt</p>
    </blockquote>

    <p>Linux下则是</p>

    <blockquote>
      <p>cd  d:\spark-0.7.0<br />
 sbt/sbt</p>
    </blockquote>

    <p>开始下载各种依赖包，需要等待很长时间。</p>
  </li>
  <li>
    <p><strong>翻@_@墙。见本文最后一段。</strong></p>

    <p><!--more--></p>
  </li>
  <li>
    <p>等sbt提升符&gt;出现后，输入eclipse命令，开始生成eclipse工程文件，需要耐心等待一段时间</p>

    <blockquote>
      <p>&gt;eclipse<br />
 [info] About to create Eclipse project files for your project(s).<br />
 [info] Successfully created Eclipse project files for project(s):<br />
 [info] spark-examples  <br />
 [info] spark-streaming <br />
 [info] spark-repl<br />
 [info] spark-bagel<br />
 [info] spark-core  </p>
    </blockquote>

    <p>这样就生成成功了，去core, bagel, streaming, repl, examples 五个文件夹下，可以看到有一个.project和.classpath文件。从这里也可以看出，spark源码由五个项目组成。</p>
  </li>
  <li>用 Scala IDE 导入这5个工程，选择 d:\spark-0.7.2 文件夹，可以一次性导入5个项目。
项目图标上有红色感叹号，是因为jar包的路径不对，右击某个项目，选择 “Build Path -&gt; Configure Build Path” ，删除所有的jar，点击 “Add external jars”，浏览到 d:\spark-0.7.2\lib_managed\jars，添加所有的jar，这是红色感叹号就消失了。每个项目都如此操作一番。</li>
</ol>

<p><strong>注意：第8步在国内是无法成功的，因为一些maven仓库被墙，例如 twitter4j.org这个仓库就被墙了。因此需要翻@_@墙。</strong></p>

<p>我平时用goagent翻@_@墙，不过goagent只能让浏览器翻@_@墙，如何让goagent变成全局代理呢？即所有http协议都经过goagent。可以用 Proxifier，它可以把goagent变成操作系统全局的http代理。</p>

<p>不过 spark 在访问maven仓库时，用的是https网址，即https协议，虽然goagent可以用来访问https页面，但 goagent 和 Proxifier 使用时，https协议总是链接不通（参考 <a href="https://code.google.com/p/goagent/issues/detail?id=5210">https://code.google.com/p/goagent/issues/detail?id=5210</a>）。</p>

<p>于是我又想到了另一个方法，用SSH翻@_@墙。去网上找一个免费的ssh，安装 Bitvise SSH Client，然后在”Services”标签页面，勾选”SOCKS/HTTP Proxy Forwarding”，这样来翻@_@墙，Proxifier  使用  Bitvise SSH Client 提供的代理。</p>

<p>翻@_@墙成功后，再输入 eclipse，当到达 twitter4j.org 时，会发现 SUCCESS了。耐心等待，最后会成功生成.project文件。</p>

<p>用Scala IDE 导入项目，就可以开始阅读spark 源码了 :)</p>

<p>如果不想折腾，可以下载我已经生成好的项目, <a href="http://pan.baidu.com/share/link?shareid=534521368&amp;uk=2466605404">spark-0.7.2.zip</a>。解压，启动Scala IDE，选择菜单<code>File-&gt;Import-&gt;General-&gt;Existing projects into workspace</code>，浏览到 spark-0.7.2目录，批量导入5个项目。导入后项目图标有红色感叹号，这是因为你的电脑上路径和我的路径不一样，找不到引用的jar了。右击项目，选择<code>Build Path-&gt;Configure Build Path</code>，选择<code>Libraries</code>标签，这时可以看到所有jar都有红叉叉，全选，删除，然后点击<code>Add External Jars</code>，浏览到<code>spark-0.7.2\lib_managed\jars</code>，把所有jar都导入，导入后红色感叹号就消失了。对每个项目都执行上述操作。</p>

<p><strong>2013-07-27 更新</strong>：eclipse项目上有红色小叉叉图标，之前一直没解决，今天解决了，主要原因是，<strong>Scala IDE 版本不对！</strong> scala-ide.org 官网最新的的3.0.1只支持scala 2.10，不再支持2.9.3。由于Spark目前使用scala 2.9.3写的，所以我们要下载支持 scala 2.9.3 版，scala ide 3.0.0是支持 2.9.3的，不过首选要下载 eclipse JUNO，不要使用新版的eclipse，例如eclipse Indigo, Kepler都不行。</p>

<p>因此，正确的做法是，先下载 eclipse juno，然后下载 3.0.0 的zip包，解压，然后启动eclipse，点击菜单”help-&gt;Install New Software”，浏览到刚刚解压的<code>site</code>文件夹，就可以安装scala ide插件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX的各种发行版和编辑器的比较]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130412"/>
    <updated>2013-04-12T11:01:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/latex-distributions-and-editors</id>
    <content type="html"><![CDATA[<h2 id="distribution">发行版(distribution)</h2>
<p>TeX类似于Linux，有很多不同的发行版(distribution)。</p>

<p>先看看各个发行版的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center"><a href="http://www.tug.org/texlive/">http://www.tug.org/texlive/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">2012-07-01</td>
      <td style="text-align: center">43</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center"><a href="http://miktex.org/">http://miktex.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">188,485</td>
      <td style="text-align: center">1.3.2 2012-09-24</td>
      <td style="text-align: center">54</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center"><a href="http://www.ctex.org/">http://www.ctex.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">252,657</td>
      <td style="text-align: center">2.9.2 2012-03-30</td>
      <td style="text-align: center">344</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center"><a href="http://www.tug.org/protext/">http://www.tug.org/protext/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">3.1.1 2012-07-23</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>其中CTeX和proTeXt都是基于MiKTeX的，再次进行了打包。国内估计用CTeX比较多。</p>

<h2 id="editor">编辑器(editor)</h2>
<p>编辑器大概分为两种，一种为WYSIWYG，所见即所得，实时预览，类似于Word，另一种是纯文本编辑器，有语法高亮，没有预览功能，需要另外安装一个发行版，编译成PDF后才能预览。</p>

<p>先看看各个编辑器的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>预览类型</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center"><a href="http://www.xm1math.net/texmaker/">http://www.xm1math.net/texmaker/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">289,311</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">4.0.1 2013-03-16</td>
      <td style="text-align: center">60</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center"><a href="http://www.tug.org/texworks/">http://www.tug.org/texworks/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">90,230</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">0.4.4  2012-04</td>
      <td style="text-align: center">23</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center"><a href="http://texstudio.sourceforge.net/">http://texstudio.sourceforge.net/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">2.5.2 2013-01-08</td>
      <td style="text-align: center">15</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center"><a href="http://www.texniccenter.org/">http://www.texniccenter.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">884,570</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">v2.0 beta1 2012-11-03</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center"><a href="http://www.lyx.org/">http://www.lyx.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">261,649</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">2.0.5.1 2013-01-08</td>
      <td style="text-align: center">56</td>
      <td style="text-align: center">42</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center"><a href="http://www.bakoma-tex.com/">http://www.bakoma-tex.com/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">1,327,901</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">10.10 2013-01-13</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center"><a href="http://www.texmacs.org">http://www.texmacs.org</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">1,525,373</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">1.0.7.19 2013-03-27</td>
      <td style="text-align: center">27</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center"><a href="http://www.latexeditor.org/">http://www.latexeditor.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">624,564</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">0.53 2009-10-09</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<!--more-->

<h2 id="section">跨平台</h2>
<p>下面看看各个发行版和编辑器的跨平台支持程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center">Windows</th>
      <th style="text-align: center">Mac</th>
      <th style="text-align: center">Linux</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">编辑器</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">WYSIWYG</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">发行版</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
  </tbody>
</table>

<p>Tex Live在Mac上，叫做MacTex，见<a href="http://www.tug.org/mactex/newfeatures.html">官网的一段话</a>：</p>

<blockquote>
  <p>MacTeX-2012 installs a completely unmodified copy of the full TeX Live 2012 distribution. This is exactly the same distribution that runs on OS X, Windows, GNU/Linux, various BSD Unix systems, and other systems.</p>
</blockquote>

<h2 id="section-1">如何选择</h2>
<p>四个发新版，只有 Tex Live 是跨平台的，故使用Tex Live，其他发行版抛弃。</p>

<p>TeXmaker, TeXstudio, TeXworks 来进行比较<br />
中文支持的程度，打开.tex文件是否有乱码</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>打开GB18030的tex文件</strong></th>
      <th style="text-align: center"><strong>打开UTF8编码的文件</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">无乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
  </tbody>
</table>

<p>TeXmaker 界面丑陋，且中文支持不好，功能没有多，抛弃之。
TeXmaker 和 TeXstudio 界面比较美观，而且二者界面风格很类似。因为TeXstudio是在TeXmaker的基础上而来的，<a href="http://en.wikipedia.org/wiki/TeXstudio">见wikipedia的描述</a>：</p>

<blockquote>
  <p>Originally called TexMakerX, TeXstudio was started as a fork of Texmaker that tried to extend it with additional features while keeping its look and feel.</p>
</blockquote>

<p>TeXnicCenter 安装时不会自动探测，第一次运行时会要求你指定 latex.exe 的路径。TeXnicCenter 界面风格是office的风格，很现代化。TeXnicCenter 只有 windows版，故放弃。</p>

<p>LyX 安装时会自动探测到TeX Live。这点比较方便，无需配置。<br />
LyX可以导入.tex文件，导入后，不能直接修改.tex源码，只能在上方的可视化区域直接输入内容，即LyX强迫你用类似word的方式来输入内容。因此抛弃LyX。</p>

<p>Bakoma 是商业软件，30天试用期，网上搜了一下，没有破解版，故放弃。</p>

<p>TeXmacs 1.0.7.19 在windows上安装完成后，双击后启动界面会闪退，完全没法用，换了1.0.7.18，可以启动了，目前发现两个问题：1. 打开（使用文件–&gt;打开或导入）一个含有中文的.tex文件会崩溃；2. 关闭程序管不了，需要用任务管理器杀掉才行，可见TeXmacs 还很不完善，其次TeXmacs 有着自己的语法，不是一个标准的TeX发行版，因此放弃 TeXmacs 。</p>

<p>LEd已经很久不更新，且只有windows版，放弃。</p>

<p>大牛陈硕用的是Tex Live，他的书使用Tex Live来排版的。<br />
<img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/04/chenshuo_texlive.png" alt="" /></p>

<h2 id="section-2">安装和配置</h2>
<p>在windows下安装 Tex Live 2012，先下载DVD ISO，然后安装即可。假设安装到<code>D:\texlive</code>。</p>

<p>安装完后，将<code>D:\texlive\2012\bin\win32</code>添加到PATH环境变量。这样Texmaker，Texstudio就不用配置了，安装后即可正常编译。如果没有添加到PATH环境变量，则在Texmaker，Texstudio中指定一些exe文件的绝对路径。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Octopress配置]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130402"/>
    <updated>2013-04-02T15:35:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/my-octopress-configuration</id>
    <content type="html"><![CDATA[<h2 id="section">实时预览</h2>
<p>使用如下命令可以实现实时预览：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>rake preview</code> 会自动监视文件的变化，重新生成静态页面。因此修改markdown文件后，只需要在浏览器里刷新一下页面，就立刻可以看到效果。不过如果修改了_config.yml的话，则需要Ctrl+C终止，用<code>rake generate</code>重新生成，才能看到效果。</p>

<h2 id="section-1">嵌入代码块</h2>
<p>见官方文档<a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a>。</p>

<p>Octopress是一款为hacker量身定制的博客系统，当然内置了代码高亮的功能！它的代码高亮功能是通过Pygments实现的，配色方案用的是Solarized，堪称完美。</p>

<p>Octopress支持多种方式嵌入代码，可以直接嵌入代码，也可以引用github上的gist 。</p>

<p>我喜欢用<strong>三个反引号</strong>直接嵌入代码，比 <code>codeblock</code>要简洁。</p>

<h3 id="mathjax">启用MathJax</h3>
<p>在<code>source/_includes/custom/footer.html</code>的第一行加入如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span> <span class="nx">mathjax</span> <span class="nx">config</span> <span class="nx">similar</span> <span class="nx">to</span> <span class="nx">math</span><span class="p">.</span><span class="nx">stackexchange</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就引入了MathJax的JS包，可以直接在markdown文件里直接写公式了，例如 $\dfrac {\pi}{2}$。</p>

<p>上面的代码也可以在<code>source/_includes/custom/header.html</code>里添加，不过这样会使得页面的加载速度变慢。还可以在<code>source/_layouts/default.html</code>里添加。</p>

<!--more-->

<p>有一个问题，rdiscount这个解析器，对 mathjax 大部分支持，某些细节处理的不好，举个例子，它会在动把公式中的 <code>^n</code>转换成<code>&lt;sup&gt;n&lt;/sup&gt;</code>，例如<code>$2^n$</code>会解析成<code>$2&lt;sup&gt;n&lt;/sup&gt;$</code>，这样就破坏了整个公式，导致公式无法解析。参考<a href="http://christopherpoole.github.io/using-mathjax-on-github-pages/">这里</a>一段话：
&gt; as discount for example automatically replaces <code>x^2</code> with <code>x&lt;sup&gt;2&lt;/sup&gt;</code> which interrupts the MathJax rendering.</p>

<p>因此要换一个解析器，<a href="http://maruku.rubyforge.org/">Maruku</a> 和 <a href="http://kramdown.rubyforge.org/">Kramdown</a> 都可以，由于Maruku主页PR=4，Kramdown的主页PR=5，我选择了Kramdown。</p>

<p><strong>用Kramdown代替Rdiscount</strong><br />
修改Gemfile，增加一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">gem</span> <span class="s1">&#39;kramdown&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.14&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>很多博客都说要配套安装coderay这个gem，其实是没有必要的，只要代码块以 &#8220;` 开始和结束，自带的pygments就能实现代码高亮。</p>

<p>在Git Bash输入如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就会自动安装kramdown。</p>

<p>然后在_config.yml 文件中，见markdown: rdiscount 修改为  markdown: kramdown。</p>

<p>使用kramdown，感觉它的语法要求比rdiscout严格，例如每个代码块开头，必须有一个空行，否则高亮就会失败，大家可以试试看。每个标题掐面，也必须有一个开头。</p>

<p>kramdown的两种公式，display和inline，都是以<code>$$</code>开头和结尾的，display模式时，<code>$$</code>要单独占一行。这跟标准的LaTex有点不一样。参考<a href="http://kqueue.org/blog/2012/01/05/hello-world/">这里</a>。</p>

<p><strong>右击公式全屏空白</strong>：这时候右击公式，全屏空白。解决这个问题很简单，只需在 <code>sass/base/_theme.scss</code>添加”#main”即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">body <span class="o">{</span>
</span><span class="line">  &gt; div#main <span class="o">{</span>
</span><span class="line">    background: <span class="nv">$sidebar</span>-bg <span class="nv">$noise</span>-bg;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本节参考了<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Writing Math Equations on Octopress</a> 和 <a href="http://jasonllinux.github.com/blog/2012/11/06/write-latex-in-octopress/">在Octopress中使用Latex公式</a>。</p>

<h2 id="kramdown">kramdown的扩展语法</h2>
<p>kramdown扩展了标准markdown的语法，有很多使用的功能。<a href="http://kramdown.rubyforge.org/syntax.html">语法见官网文档</a>。这里选一些我常用的。</p>

<p><strong>脚注(footnote)</strong><br />
脚注定义是：<code>[^1]:</code>，数字可以改变，引用语法是<code>[^1]</code>。没有被引用到的参考文献，会被忽略掉。</p>

<p><strong>表格</strong><br />
一下是一个示例：</p>

<pre><code>|-----------------+------------+-----------------+----------------|
| Default aligned |Left aligned| Center aligned  | Right aligned  |
|-----------------|:-----------|:---------------:|---------------:|
| First body part |Second cell | Third cell      | fourth cell    |
| Second line     |foo         | **strong**      | baz            |
| Third line      |quux        | baz             | bar            |
|-----------------+------------+-----------------+----------------|
</code></pre>

<p>更详细说明见官网。</p>

<h2 id="excerpts">首页只显示部分正文(Excerpts)</h2>
<p>Octopress中，可以使用 <code>&lt;!--more--&gt;</code>，这样首页只显示一部分正文，并在每篇文章底下加一个Read on超链接。</p>

<h2 id="section-2">插入图片</h2>
<p>使用<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>。</p>

<p>语法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>% img <span class="o">[</span>class names<span class="o">]</span> /path/to/image <span class="o">[</span>width<span class="o">]</span> <span class="o">[</span>height<span class="o">]</span> <span class="o">[</span>title text <span class="o">[</span>alt text<span class="o">]]</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>% img http://placekitten.com/890/280 %<span class="o">}</span>
</span><span class="line"><span class="o">{</span>% img left http://placekitten.com/320/250 Place Kitten <span class="c">#2 %}</span>
</span><span class="line"><span class="o">{</span>% img right http://placekitten.com/300/500 150 250 Place Kitten <span class="c">#3 %}</span>
</span><span class="line"><span class="o">{</span>% img right http://placekitten.com/300/500 150 250 <span class="s1">&#39;Place Kitten #4&#39;</span> <span class="s1">&#39;An image of a very cute kitten&#39;</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="about-me-">添加about me 边栏</h2>
<p>编辑 source_includes\custom\asides\about.html，内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&lt;section&gt;
</span><span class="line">  &lt;h1&gt;About Me&lt;/h1&gt;
</span><span class="line">  &lt;p&gt;一句话自我介绍.&lt;/p&gt;
</span><span class="line">  &lt;p&gt;新浪微博: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://weibo.com/soulmachine&quot;</span>&gt;@soulmachine&lt;/a&gt;&lt;br/&gt;
</span><span class="line">     Twitter: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://twitter.com/#!/soulmachine&quot;</span>&gt;@soulmachine&lt;/a&gt;&lt;br/&gt;
</span><span class="line">     Other: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/soulmachine&quot;</span>&gt;Github&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://plus.google.com/103519507226474510310&quot;</span>&gt;Google+&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://www.linkedin.com/in/soulmachine&quot;</span>&gt;LinkedIn&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://www.quora.com/Jason-Day-2&quot;</span>&gt;Quora&lt;/a&gt;&lt;/p&gt;
</span><span class="line">  &lt;/p&gt;
</span><span class="line">&lt;/section&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在 _config.yml 的 default_asides 里添加 custom/asides/about.html。</p>

<h2 id="about">添加about页面</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake new_page<span class="o">[</span>about<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会生成 source/about/index.markdown 文件。</p>

<p>编辑该文件的内容。</p>

<p>然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h2 id="section-3">社会化分享</h2>
<p>使用addthis.com的分享按钮，在网站上获取代码，粘贴到<code>source/_includes/post/sharing.html</code>中，例如我的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;sharing&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- AddThis Button BEGIN --&gt;</span>
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;addthis_toolbox addthis_default_style addthis_32x32_style&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_sinaweibo&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_facebook&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_twitter&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_google_plusone_share&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_delicious&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_digg&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_reddit&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_compact&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_counter addthis_bubble_style&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=undefined&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- AddThis Button END --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在_config.yml 中，将twitter, google+ 和facebook like的按钮设置为false，取消显示，因为 AddThis 已经集成了这三者。</p>

<h2 id="section-4">社会化评论</h2>
<p><del>启用Disqus，填入 short name即可。</del>Disqus在国外流行，在国内的加载速度太慢，而且只有twitter, facebook, g+，没有照顾到国内的用户习惯，因此替换成国内的<a href="www.duoshuo.com">多说</a>。参考这篇博客 <a href="http://ihavanna.org/Internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">为 Octopress 添加多说评论系统</a>。<code>source/_includes/post/duoshuo_thread.html</code>的代码略有不同，添加了<code>data-title="我的Octopress配置"</code>，否则侧边栏的最近评论，标题为空白，感谢<a href="http://yrzhll.com/blog/2012/12/12/comment/">碟姐 - 在octopress中添加多说的最近评论</a>指出了这一点，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span> <span class="nx">Duoshuo</span> <span class="nx">Comment</span> <span class="nx">BEGIN</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-thread&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;我的Octopress配置&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;yanjiuyanjiu&quot;</span><span class="p">};</span>
</span><span class="line">	<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">		<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class="line">	<span class="p">})();</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="c">&lt;!--</span> <span class="nx">Duoshuo</span> <span class="nx">Comment</span> <span class="nx">END</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>_config.yml 中的配置也略有不同： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">duoshuo_comments</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="nx">duoshuo_short_name</span><span class="o">:</span> <span class="nx">yanjiuyanjiu</span>
</span><span class="line"><span class="nx">duoshuo_asides_num</span><span class="o">:</span> <span class="mi">5</span>      <span class="err">#</span> <span class="err">侧边栏评论显示条目数</span>
</span><span class="line"><span class="nx">duoshuo_asides_avatars</span><span class="o">:</span> <span class="mi">1</span>   <span class="err">#</span> <span class="err">侧边栏评论是否显示头像</span>
</span><span class="line"><span class="nx">duoshuo_asides_time</span><span class="o">:</span> <span class="mi">1</span>      <span class="err">#</span> <span class="err">侧边栏评论是否显示时间</span>
</span><span class="line"><span class="nx">duoshuo_asides_title</span><span class="o">:</span> <span class="mi">1</span>     <span class="err">#</span> <span class="err">侧边栏评论是否显示标题</span>
</span><span class="line"><span class="nx">duoshuo_asides_admin</span><span class="o">:</span> <span class="mi">0</span>     <span class="err">#</span> <span class="err">侧边栏评论是否显示作者评论</span>
</span><span class="line"><span class="nx">duoshuo_asides_length</span><span class="o">:</span> <span class="mi">32</span>   <span class="err">#</span> <span class="err">侧边栏评论截取的长度</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">设置固定链接</h2>
<p>在 _config.yml 里，找到 permalink，设置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">permalink</span><span class="o">:</span> <span class="sr">/blog/</span><span class="o">:</span><span class="nx">year</span><span class="o">:</span><span class="nx">month</span><span class="o">:</span><span class="nx">day</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>效果就是<code>www.example.com/blog/20130403/</code>。模仿的是豆瓣的URL格式。</p>

<p>参考官方文档<a href="https://github.com/mojombo/jekyll/wiki/Permalinks">jekyll Permalinks</a>。</p>

<h2 id="section-6">侧边栏显示分类目录</h2>
<p>使用第三方插件 <a href="https://github.com/tokkonopapa/octopress-tagcloud">octopress-tagcloud</a>。</p>

<h2 id="section-7">友情链接</h2>
<p>在<code>source\_includes\custom\asides</code> 目录下添加一个blogroll.html文件，模仿about.html，添加一些友情链接，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="err">友情链接</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://coolshell.cn/&quot;</span><span class="o">&gt;</span><span class="err">酷壳</span><span class="nx">CoolShell</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://mindhacks.cn/&quot;</span><span class="o">&gt;</span><span class="err">刘未鹏</span><span class="nx">MIND</span> <span class="nx">HACKS</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://blog.codingnow.com/&quot;</span><span class="o">&gt;</span><span class="err">云风</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.cnblogs.com/Solstice/&quot;</span><span class="o">&gt;</span><span class="err">陈硕</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后在 _config.yml 文件中，在 default_asides 的数组中添加 <code>custom/asides/blogroll.html</code>。</p>

<h2 id="section-8">中文目录</h2>
<p>TODO</p>

<h2 id="section-9">修改字体</h2>
<p>Octopresss默认使用的是 google webfonts，见<code>source/_includes/custom/head.html</code>里的两行代码。Google Webfonts是个好东西，但遗憾的是它没有中文字体。所以你用<strong>粗体</strong>，发现并没有变粗，就是这个原因。</p>

<p>首先，将head.html中的两行代码注释掉，省去了加载字体，加快网页加载速度。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span><span class="nx">Fonts</span> <span class="nx">from</span> <span class="nx">Google</span><span class="s2">&quot;s Web font directory at http://google.com/webfonts --&gt;</span>
</span><span class="line"><span class="s2">&lt;!-- &lt;link href=&quot;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; --&gt;</span>
</span><span class="line"><span class="c">&lt;!--</span> <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic&quot;</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>参考 这篇博客 <a href="http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/">最佳 Web 中文默认字体</a>，在<code>sass/custom/_fonts.scss</code>中添加如下三行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$heading</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span><span class="line"><span class="nx">$header</span><span class="o">-</span><span class="nx">title</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span><span class="line"><span class="nx">$header</span><span class="o">-</span><span class="nx">subtitle</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>刷新网页，可以看见中文的粗体变黑了。</p>

<h2 id="section-10">一些汉化工作</h2>
<p>在 _config.yml中，把 <code>Read on</code> 改为 “继续阅读”。
在 <code>source/_includes/custom/asides</code>目录下，将”Recent Comments”改为“最新评论”，”Categories”改为“分类目录”，将<code>source/_includes/asides/recent_posts.html</code>中”Recent Posts”改为“最新文章”。</p>

<h2 id="section-11">添加统计代码</h2>
<p>在_config.yml填入 Google Analytics Tracking ID，例如 <code>UA-7583537-4</code>。</p>

<h2 id="section-12">第三方主题和插件</h2>
<p>主题：<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a><br />
插件：<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd party plugins</a></p>

<h2 id="section-13">在一台新电脑上恢复</h2>
<p>如果换了一台电脑，怎样迅速恢复环境呢？参考 <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a>。 <strong>注意，在windows上，要首先安装python，否则，虽然所有操作可以成功，不报错误，但是你发现打开后首页一篇空白，我当时百思不得其解，因为没有任何错误信息，最后去看生成的文件，所有index.html都是0字节，就猜测应该是编译出了问题。安装python就好了，linux默认是有Python的，就没有这个问题，windows真是坑爹！以后只在windows下做编辑类的工作，编译和运行都放到Linux下。</strong></p>

<h2 id="todo">TODO</h2>
<p>修改字体大小</p>

<p>添加TAG支持</p>

<h2 id="section-14">参考资料</h2>
<ol>
  <li><a href="http://shanewfx.github.com/blog/2012/08/13/improve-blog-theme/">Octopress主题改造</a></li>
  <li></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用github + Octopress 搭建免费博客]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130401"/>
    <updated>2013-04-01T15:14:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-github-and-octoperss-to-create-a-free-blog</id>
    <content type="html"><![CDATA[<h3 id="section">前提条件</h3>
<p>注册一个github账号。</p>

<p>任何资料，都不如<a href="http://octopress.org/docs/">Octopress</a> 和<a href="https://help.github.com/categories/20/articles">Github Pages</a>的官方文档，建议首先阅读官方文档。</p>

<h3 id="github-pages">GitHub Pages快速体验</h3>
<p>在GitHub网站上，点击右上角的+号图标，创建一个新的Repo，Repository 的名字必须为 username.github.com。然后点击Settings进入该Repo的设置页面。看到”Automatic Page Generator”，说明这个Repo已经启用了GitHub Page。点击按钮进入设置。</p>

<p>在”Create a GitHub User Page”填写一些基本信息，点击右下角的”Continue to Layout”。布局就用默认的，点击绿色的”Publish”按钮。</p>

<p>大功告成，输入”username.github.com”，看到一个页面没？这就是你刚刚创建的一个页面。</p>

<!--more-->

<p>GitHub Pages分为两种类型，一种是”User and Org Pages”，一种是”Project Pages”。前者是用户的主页，一个用户仅有一个。后者是每个项目的主页。见github page官方的文档 <a href="https://help.github.com/articles/user-organization-and-project-pages">Creating Pages with the automatic generator</a>。</p>

<p>本文创建的是第一种类型。</p>

<p>这篇博客 <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 - 阮一峰的网络日志</a>  很通俗易懂，不过它创建的是第二种类型，在一个Repo上新建了一个branch，并命名为gh-pages。</p>

<p>下面正式开始折腾。</p>

<h3 id="msysgit">安装 msysgit并配置</h3>

<ul>
  <li>下载<a href="http://msysgit.github.com/">msysgit</a>, 然后双击exe文件开始安装。</li>
  <li>双击桌面图标Git Bash，启动一个shell，输入如下命令进行配置：</li>
</ul>

<p>产生公钥ssh key，默认全部回车</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh-keygen -C github-account-email -t rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: username@email.com需要更换成你自己的在Github上注册的Email地址。
这样会在用户目录(C:\Documents and Settings\UserName)下产生一个.ssh文件夹，里面为对应的SSH Keys，其中id_rsa.pub是Github需要的SSH公钥文件。</p>

<p>在Github的Account Settings里选择SSH Keys，在其中将id_rsa.pub文件里内容拷贝至 其中的Key里。</p>

<p>这样以后就可以直接使用Git和GitHub了。  </p>

<p>测试一下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh -T git@github.com
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果出现 hi xxx! You’ve successfully authenticated, bug GitHub does not povide shell access。说明SSH链接成功。</p>

<p>接下来配置其他信息。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git config --global user.name github-username
</span><span class="line">git config --global user.email github-account-email
</span><span class="line">git config --global github.user github-username
</span><span class="line">git config --global credential.helper cache
</span><span class="line">git config --global credential.helper <span class="s1">&#39;cache --timeout=3600&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>本节参考了 <a href="http://www.cnblogs.com/kysnail/archive/2012/03/16/2399589.html">msysGit 安装后的配置</a>。</p>

<h3 id="octopress">安装Octopress</h3>
<p>参考官方文档<a href="http://octopress.org/docs/setup/">setup</a>.<br />
<strong>安装Ruby</strong><br />
Octopress 2.0 需要 Ruby 1.9.3，安装其他版本的Ruby可能会行不通。</p>

<p>如果是Linux，使用RVM来安装Ruby，如果是Windows，则使用<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>。在这个<a href="http://rubyinstaller.org/downloads/">下载页面</a>下载Ruby 1.9.3-p392和DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe)，双击exe文件进行安装。<br />
<strong>安装DevKit</strong><br />
双击DevKit的exe文件，解压到C:\DevKit，在CMD下执行如下命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>C:<span class="se">\D</span>evKit
</span><span class="line">ruby dk.rb init
</span><span class="line">ruby dk.rb install
</span><span class="line">gem install rdiscount --platform<span class="o">=</span>ruby
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>安装Octopress</strong><br />
下载Octopress。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>d:<span class="se">\g</span>ithub
</span><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line"><span class="nb">cd </span>octopress
</span><span class="line">ruby --version  <span class="c"># Should report Ruby 1.9.3</span>
</span><span class="line">rbenv rehash  <span class="c"># 可选，如果安装了rbenv，就需要执行这一步</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>注意</strong>: rubygems.org在中国的下载速度很慢，会导致bundle install这一步下载gems的速度很慢，可能需要等待几个小时。因此需要事先切换到国内的镜像源。</p>

<p>用记事本打开octopress目录下的Gemfile，将第一行修改为</p>

<blockquote>
  <p>source “http://ruby.taobao.org”</p>
</blockquote>

<p>然后可以开始安装依赖的gems了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常的话应该可以看到一行行的Installing xxx，表示正在安装所需要的gem。</p>

<p>安装默认的Octopress主题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果这一步出现问题，则试一下 bundle update再执行 rake install。</p>

<h3 id="github">部署到GitHub</h3>
<p>将Octopress和自己的Repo关联起来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake setup_github_pages
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>编译生成JeKyll所需要的静态文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个命令主要是根据source目录的内容，编译生成JeKyll所需要的静态文件，存放到public目录下。source 目录对应着git上的source分支。</p>

<p><strong>UTF-8 编码</strong><br />
Windows预设是Big5编码,所以要想’rake generate’的时候不报编码错误,我们需要设置一下编码! 方法有两个,一个是直接在Git Bash中设置环境:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">set </span><span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span><span class="line"><span class="nb">set </span><span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还有一个是在环境变量中加入这两个变量: 右击电脑-&gt;属性，新添加LANG和LC_ALL两个环境变量，值为为zh_CN.UTF-8.</p>

<p>然后在Git Bash中做如下设置:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;export LANG LC_ALL&quot;</span> &gt; ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>预览</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a>，就可以看到效果了。</p>

<p>部署到github</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>该命令首先清空_deploy目录，然后将public目录整个拷贝过来，然后commit到github。_deploy 目录对应着master分支。</p>

<p>备份source到github</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>source 目录下保存了所有的markdown源文件，是博客的原始数据，以及一些模板文件。因此很有必要备份。用上述命令提交到github，这样就用git管理起来了，再也不用担心数据丢失了。</p>

<p><strong>终止预览</strong><br />
启用<code>rake preview</code>后，直接按<code>ctrl+c</code>无法正常终止该进程，老提示<code>终止批处理操作吗（Y/N）？</code>，这时候可以另开一个Git Bash窗口，使用<code>ps aux | grep ruby</code>命令找出<code>pid(第一个数值)</code>，然后执行<code>kill &lt;pid&gt;</code>来停止该进程(参考<a href="http://linuxabc.heroku.com/blog/octopress-on-heroku-2">octopress on heroku (二)</a>)。  </p>

<h3 id="section-1">绑定域名</h3>
<p>参考官方文档<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>。</p>

<p>非常简单，在<code>source</code>目录下，添加一个文本文件，名字为CNAME，里面的内容就是要绑定的域名，例如本博客CNAME文件的内容是：</p>

<blockquote>
  <p>www.yanjiuyanjiu.com</p>
</blockquote>

<p>然后去DNSPod，添加一条CNAME，指向 username.github.com。例如我的为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">www	CNAME	默认	soulmachine.github.com.		-	600
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很多人喜欢去掉www，用xxx.com的形式来访问，不过大家去试一下，在浏览器输入qq.com, douban.com, baidu.com，发现都会自动跳转到www，也就是说这些大网站，目前也是用www.example.com的域名为主，因此建议大家也这样做。</p>

<p>用www, blog之类的二级域名，还有个好处是方便升级，比如新版本用www1指向，等测试完成后，改成www指向，无缝切换。</p>

<p>如何让example.com 自动变成www.example.com呢？需要用 301重定向，在DNSPod上非常简单，添加一条显性URL即可，例如我的是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">@	显性URL	默认	http://www.yanjiuyanjiu.com	-	600
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在使用Octopress的时候，每次<code>rake generate</code>, <code>rake deploy</code>后，master分支下面的CNAME文件消失了。正确的做法是，把CNAME文件放到在 source 目录下，其余的都删掉，<code>rake generate</code> 会自动拷贝到public目录下，<code>rake deploy</code>再拷贝public目录内容到_deploy目录，并提交到master分支。</p>

<h3 id="section-2">参考资料</h3>
<ol>
  <li><a href="http://corey600.github.com/blog/2013/02/28/use-github-and-octopress-create-blog/">【原创】用Github和Octopress搭建博客</a></li>
  <li><a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">试用Octopress</a></li>
  <li><a href="http://rubyer.me/blog/134/">windows下安装DevKit</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/12/21/recover-octopress/">在新Windows系统中重新部署Octopress</a></li>
  <li><a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习的一些通俗易懂的tutorial]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130327"/>
    <updated>2013-03-27T21:50:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/some-classical-machine-learning-tutorials</id>
    <content type="html"><![CDATA[<p>以下记录了我的学习历程，按我的阅读顺序排序。</p>

<h2 id="prior-likelihood-posterior">Prior, Likelihood, Posterior</h2>
<p>MLAPP第3.2节，讲的很好，用了一个叫 number game 的小游戏做例子，通俗易懂</p>

<h2 id="section">距离和相似度度量</h2>
<p><a href="http://webdataanalysis.net/reference-and-source/distance-and-similarity/">距离和相似度度量 » webdataanalysis.net</a></p>

<p><a href="http://www.zhihu.com/question/19640394">欧氏距离和余弦相似度的区别是什么？ – 知乎</a></p>

<h2 id="knnk-nearest-neighbor">KNN(K Nearest Neighbor)</h2>
<p><a href="http://coolshell.cn/articles/8052.html">K Nearest Neighbor 算法 _ 酷壳 – CoolShell</a></p>

<p><a href="http://en.wikipedia.org/wiki/KNN">K-nearest neighbors algorithm – Wikipedia</a></p>

<h2 id="k-means">K-Means</h2>
<p><a href="http://coolshell.cn/articles/7779.html">K-Means 算法 _ 酷壳 – CoolShell</a></p>

<p><a href="http://en.wikipedia.org/wiki/K-means">k-means clustering – Wikipedia</a></p>

<p><a href="http://kylen314.blog.com/2012/09/10/k-means/">K-Means++ _ 愈宅屋</a></p>

<p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html">算法杂货铺——k均值聚类(K-means) – T2噬菌体 – 博客园</a></p>

<p><a href="http://blog.pluskid.org/?p=17">漫谈 Clustering (1)_ k-means « Free Mind</a></p>

<p><a href="http://www.codeproject.com/Articles/439890/Text-Documents-Clustering-using-K-Means-Algorithm">Text Documents Clustering using K-Means Algorithm – CodeProject</a></p>

<!-- more -->

<h2 id="pcaprincipal-components-analysis">PCA(Principal Components Analysis)</h2>
<p><a href="http://www.ce.yildiz.edu.tr/personal/songul/file/1097/principal_components.pdf">2002. Lindsay I Smith. A tutorial on Principal Components Analysis</a></p>

<h2 id="factor-analysis">因子分析(Factor analysis)</h2>
<p><a href="http://www.cnblogs.com/jerrylead/archive/2011/05/11/2043317.html">因子分析（Factor Analysis）- JerryLead - 博客园</a></p>

<h2 id="em-expectation-maximization">期望最大化(EM, Expectation Maximization)</h2>
<p><a href="http://www.seanborman.com/publications/EM_algorithm.pdf">2009. Sean Borman. The Expectation Maximization Algorithm A short tutorial</a></p>

<p>李航.《统计学习方法》，P155 第9章 EM算法及其推广. 2012.</p>

<h2 id="svm-support-vector-machines">支持向量机(SVM, Support Vector Machines)</h2>
<p><a href="http://cs229.stanford.edu/notes/cs229-notes3.pdf">Andrew Ng. CS229 Lecture notes Support Vector Machines</a></p>

<h2 id="hidden-markov-model-hmm">隐马尔科夫模型(Hidden Markov Model, HMM)</h2>
<p>李航《统计学习方法》第10章 隐马尔科夫模型，讲得非常好，有非常具体的例子</p>

<h2 id="crf-conditional-random-field">条件随机场(CRF, Conditional Random Field)</h2>
<p><a href="http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/">Introduction to Conditional Random Fields</a></p>

<p>李航.《统计学习方法》，P192 第11章 条件随机场. 2012.</p>

<h2 id="lda">LDA</h2>
<p><a href="http://vdisk.weibo.com/s/bjfcErv7QQc/1384745764">LDA数学八卦</a></p>

<p><a href="http://vdisk.weibo.com/s/aYEKfaE9OnRv">正态分布的前世今生</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些主流的编程竞赛网站]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130322"/>
    <updated>2013-03-22T21:57:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/some-popular-programming-contest-websites</id>
    <content type="html"><![CDATA[<p>今天把各个主流的编程网站仔细对比了一下，下面从各个角度对比一下这些编程竞赛网站。</p>

<h2 id="section">分类和排名</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="94">
<p><a name="OLE_LINK30"></a><a name="OLE_LINK1"><b>网站地址</b></a></p>
</td>
<td valign="top" width="57">
<p><b>类别</b></p>
</td>
<td valign="top" width="38">
<p><b>PR</b></p>
</td>
<td valign="top" width="60">
<p><b>ATR</b></p>
</td>
<td valign="top" width="44">
<p><b>QF</b></p>
</td>
<td valign="top" width="151">
<p><b>主办方</b></p>
</td>
<td valign="top" width="47">
<p><b>备注</b></p>
</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a name="_Hlk352791085"></a><a href="http://www.topcoder.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.topcoder.com']);">TopCoder </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>33,586</p>
</td>
<td valign="top" width="44">
<p>4167</p>
</td>
<td valign="top" width="151">
<p>TopCoder公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.codechef.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">CodeChef </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>41,217</p>
</td>
<td valign="top" width="44">
<p>5758</p>
</td>
<td valign="top" width="151">
<p>Directi公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://codeforces.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">CodeForces </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>73,012</p>
</td>
<td valign="top" width="44">
<p>599</p>
</td>
<td valign="top" width="151">
<p>CodeForces公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.spoj.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.spoj.com']);">SPOJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>3</p>
</td>
<td valign="top" width="60">
<p>75,653</p>
</td>
<td valign="top" width="44">
<p>1520</p>
</td>
<td valign="top" width="151">
<p>Sphere Research Labs</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://poj.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://poj.org']);">POJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>7</p>
</td>
<td valign="top" width="60">
<p>364,925</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>北京大学</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://acm.zju.edu.cn" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://acm.zju.edu.cn']);">ZOJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>N/A</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>浙江大学</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://uva.onlinejudge.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://uva.onlinejudge.org']);">UVA OJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>166,991</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>University of Virginia</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://acm.sgu.ru/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://acm.sgu.ru']);">SGU OJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>194,881</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>Saratov State University</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="https://www.hackerrank.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.hackerrank.com']);">HackerRank</a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>126,192</p>
</td>
<td valign="top" width="44">
<p>56</p>
</td>
<td valign="top" width="151">
<p>InterviewStreet公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://projecteuler.net/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://projecteuler.net']);">Project Euler</a></p>
</td>
<td valign="top" width="57">
<p>数学</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>53,854</p>
</td>
<td valign="top" width="44">
<p>428</p>
</td>
<td valign="top" width="151">
<p>Project Euler公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.careercup.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.careercup.com']);">CareerUp</a></p>
</td>
<td valign="top" width="57">
<p>面试</p>
</td>
<td valign="top" width="38">
<p>4</p>
</td>
<td valign="top" width="60">
<p>51,089</p>
</td>
<td valign="top" width="44">
<p>654</p>
</td>
<td valign="top" width="151">
<p>CareerUp公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://leetcode.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://leetcode.com']);">LeetCode</a></p>
</td>
<td valign="top" width="57">
<p>面试</p>
</td>
<td valign="top" width="38">
<p>4</p>
</td>
<td valign="top" width="60">
<p>188,196</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>LeetCode公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
</tbody>
</table>

<p>说明：PR是Google PageRank的缩写；ATR是Alexa Trafic Rank的缩写，即Alexa排名；QF是Quora Followers的缩写，具体含义是在Quora上关于某Topic的follower数量，例如<a href="http://www.quora.com/CodeChef">CodeChef的topic</a> 有5758个followers。</p>

<!-- more -->

<h2 id="section-1">支持的语言</h2>
<table cellspacing="0" cellpadding="0" border="1">
<tbody>
<tr>
<td valign="top" width="72"><strong>网站</strong>
<p><strong>语言</strong></p>
</td>
<td valign="top" width="79"><strong>TopCoder</strong></td>
<td valign="top" width="47"><strong>CodeChef</strong></td>
<td valign="top" width="57"><strong>CodeForces</strong></td>
<td valign="top" width="47"><strong>SPOJ</strong></td>
<td valign="top" width="38"><strong>POJ</strong></td>
<td valign="top" width="47"><strong>ZOJ</strong></td>
<td valign="top" width="47"><strong>UVA OJ</strong></td>
<td valign="top" width="47"><strong>SGU OJ</strong></td>
<td valign="top" width="57"><strong>HackerRank</strong></td>
<td valign="top" width="57"><strong>Project Euler</strong></td>
</tr>
<tr>
<td valign="top" width="72">Java</td>
<td valign="top" width="79"><a name="OLE_LINK5"></a><a name="OLE_LINK3"></a>√</td>
<td valign="top" width="47">√<strong></strong></td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">不</td>
</tr>
<tr>
<td valign="top" width="72">C</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">限</td>
</tr>
<tr>
<td valign="top" width="72">C++</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47"><a name="OLE_LINK19"></a><a name="OLE_LINK18"></a>√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">语</td>
</tr>
<tr>
<td valign="top" width="72">Pascal</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">言</td>
</tr>
<tr>
<td valign="top" width="72">Fortran</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK9"></a><a name="OLE_LINK8"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47"><a name="OLE_LINK21"></a><a name="OLE_LINK20"></a>√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57"><a name="OLE_LINK7"></a><a name="OLE_LINK6"></a>×</td>
<td valign="top" width="57">，</td>
</tr>
<tr>
<td valign="top" width="72">Obj-C</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">只</td>
</tr>
<tr>
<td valign="top" width="72">C#</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">需</td>
</tr>
<tr>
<td valign="top" width="72">Python 2</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">提</td>
</tr>
<tr>
<td valign="top" width="72">Python 3</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">交</td>
</tr>
<tr>
<td valign="top" width="72">Ruby</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">答</td>
</tr>
<tr>
<td valign="top" width="72">JavaScript</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">案</td>
</tr>
<tr>
<td valign="top" width="72">PHP</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK11"></a><a name="OLE_LINK10"></a>√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">VB</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47"><a name="OLE_LINK28"></a><a name="OLE_LINK12"></a>×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Perl</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47"><a name="OLE_LINK22"></a>√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Go</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Scala</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Groovy</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Erlang</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57"><a name="OLE_LINK15"></a>×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Lua</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">D</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Fortran</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57"><a name="OLE_LINK4"></a>×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">CommonLisp</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47"><a name="OLE_LINK26"></a><a name="OLE_LINK25"></a>×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Clojure</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK14"></a><a name="OLE_LINK13"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Scheme</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Haskell</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38"><a name="OLE_LINK24"></a><a name="OLE_LINK23"></a>×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">OCaml</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">其他</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK17"></a><a name="OLE_LINK16"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
</tbody>
</table>

<h2 id="section-2">大牛在哪里玩</h2>
<p><a href="http://www.codechef.com/long/ranklist/AX/?page=0">CodeChef的Long Consest 排名榜</a><br />
<a href="http://codeforces.com/ratings">CodeForces的排名榜</a></p>

<p>看看一些神牛在哪些编程网站上玩。</p>

<table cellspacing="0" cellpadding="0" border="1">
<tbody>
<tr>
<td valign="top" width="98">
<p><strong>大牛名字</strong></p>
</td>
<td valign="top" width="393">
<p><strong>在哪些网站活动</strong></p>
</td>
<td valign="top" width="100">
<p><strong>结论</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>清华 楼天城 ACRush</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=19849563" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=19849563</a> 最后活动日期14/03/13</p>
<p><a href="http://www.codechef.com/users/ACRush21" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/ACRush21</a> long contest排名第一</p>
<p><a href="http://codeforces.com/profile/ACRush" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/ACRush</a> 排名18 </p>
</td>
<td valign="top" width="100">
<p>楼教主在TopCoder, CodeChef, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 petr</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;tab=alg&amp;cr=10574855" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;tab=alg&amp;cr=10574855</a></p>
<p><a href="http://www.codechef.com/users/petr" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/petr</a> N/A</p>
<p><a href="http://codeforces.com/profile/Petr" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/Petr</a> 排名第三</p>
</td>
<td valign="top" width="100">
<p>Petr主要在TopCoder, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>波兰 tomek</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=144400" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=144400</a></p>
<p><a href="http://www.codechef.com/users/tomek" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/tomek</a> long contest排名第六</p>
<p><a href="http://codeforces.com/profile/tomek" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/tomek</a> N/A</p>
</td>
<td valign="top" width="100">
<p>Tomek主要在TopCoder, codechef玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 Egor</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=14970299" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=14970299</a></p>
<p><a href="http://www.codechef.com/users/Egor" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/Egor</a> N/A</p>
<p><a href="http://codeforces.com/profile/Egor" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/Egor</a> 排名第七</p>
</td>
<td valign="top" width="100">
<p>Egor主要在TopCoder, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 Tourist</p>
<p>高三学生</p>
</td>
<td valign="top" width="393">
<p><a href="http://www.codechef.com/teams/view/tourist" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/teams/view/tourist</a> N/A</p>
<p><a href="http://www.codeforces.com/profile/tourist" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codeforces.com']);">http://www.codeforces.com/profile/tourist</a> 排名第一</p>
</td>
<td valign="top" width="100">
<p>少年天才，主要在CodeForces玩</p>
</td>
</tr>
</tbody>
</table>

<p>由于CodeForcess是俄罗斯的网站，所以俄罗斯选手几乎全部在CodeForces上玩，例如Petr, Egor, Tourist都是俄罗斯人，都在CodeForces上。
也可以发现，神牛大部分来自俄罗斯，大家或许也会联想到，俄罗斯出数学家和计算机黑客，的确如此。像楼教主，Petr属于老牌的霸主，近两年出现一个天才少年tourist，才高三，竟然在CodeForces上力压Petr，真是逆天的存在。Quora上有个问题How does it feel to beat Petr Mitrichev, Egor, ACRush in SRM? 最佳答案 It feels a lot like being Tourist. 既幽默又霸气。</p>

<h2 id="section-3">大牛们使用什么语言？</h2>
<p>来看一下高手提交的代码列表：<br />
<a href="http://codeforces.com/submissions/ACRush">http://codeforces.com/submissions/ACRush</a><br />
<a href="http://codeforces.com/submissions/Petr">http://codeforces.com/submissions/Petr</a><br />
<a href="http://codeforces.com/submissions/Egor">http://codeforces.com/submissions/Egor</a><br />
<a href="http://www.codeforces.com/submissions/tourist">http://www.codeforces.com/submissions/tourist</a></p>

<p>可以看出ACRush和Tourist使用C++，Petr和Egor使用Java。从我的亲身经验，周围参加ACM的同学大部分用C++。不过，注意一点，大部分人认为Java慢，这在五六年前是对的，但是到了在现在，JVM经过各大IT巨头的重金打造，性能已经跟C++一样持平了，至少不再有数量级上的差距。因此Java也是一个很好地选择。</p>

<h2 id="section-4">更新历史</h2>
<p>2013-04-06，从 <a href="http://blog.liancheng.info/job-hunting-in-california/">加州求职记</a> 得知了两个专门针对面试的新兴网站，<a href="http://www.careercup.com/">CareerCup</a> 和 <a href="http://leetcode.com/onlinejudge">LeetCode</a>，跟 InterviewStreet 很类似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数值计算库与科学计算库]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130226"/>
    <updated>2013-02-26T23:15:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/numerical-or-scientific-computation-library</id>
    <content type="html"><![CDATA[<h2 id="blas-">BLAS 接口</h2>
<p><a href="http://www.netlib.org/blas/">BLAS</a>, <a href="http://www.netlib.org/lapack/">LAPACK</a>, <a href="http://math-atlas.sourceforge.net/">ATLAS</a> 这些数值计算库的名字很类似，他们之间有什么关系呢？BLAS是一组线性代数运算接口，目前是事实上的标准，很多数值计算/科学计算都实现了这套接口。</p>

<p>BLAS定义了那些函数呢？可以查看<a href="http://www.netlib.org/blas/">官方文档</a>。</p>

<p>LAPACK是BLAS的第一个实现，是最老牌的数值计算库，用FORTRAN 77语言写的。LAPACK实现了BLAS接口，并扩充了一些功能。很多数值计算库/科学计算库底层调用了LAPACK。</p>

<p>很多硬件厂商都实现BLAS接口，例如<a href="http://software.intel.com/en-us/intel-mkl">Intel MKL</a>(Math Kernel Library), <a href="http://developer.amd.com/tools/cpu-development/amd-core-math-library-acml/">AMCL</a>(AMD Math Core Library)等。很多开源库也支持，例如ATLAS。</p>

<p>还有非常多的库实现了BLAS接口，见<a href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">Wikipedia BLAS</a> 的Implementations小节。</p>

<p>下面介绍一些各种语言常用的数值计算/科学计算库。</p>

<!-- more -->

<h2 id="cc">C/C++</h2>
<p>首先是Intel 的MKL 和 AMD 的AMCL，性能一流，不过是商业软件，价格昂贵。</p>

<p><a href="http://www.gnu.org/software/gsl/">GSL - GNU Scientific Library</a>，GNU实现的库，质量很高，不过是用纯C写的，用起来比较繁琐。</p>

<p><a href="http://arma.sourceforge.net/">Armadillo</a>，最新版 2013-02-20 Version 3.6.3</p>

<p><a href="http://itpp.sourceforge.net/">IT++</a>，最后版本是4.2,2010-09-21。</p>

<h2 id="java">Java</h2>
<p>这个页面<a href="http://math.nist.gov/javanumerics/">JavaNumerics page</a>专门收集了关于Java数值计算的库。</p>

<p><a href="https://code.google.com/p/java-matrix-benchmark/">java-matrix-benchmark</a>这个开源项目，比较了各类Java线性代数库的性能。</p>

<p>Java的数值计算库主要分为两类：Pure Java和Natie Wrapper。Pure Java是指用纯Java编写的，Native Wrapper是指该库底层调用了C++或Fortan编写的第三方库，上面封装了一层，提供了更有好的接口。</p>

<p>Pure Java的有：<a href="http://dsd.lbl.gov/~hoschek/colt/">Colt</a>, <a href="http://commons.apache.org/proper/commons-math/">Commons Math</a>, <a href="https://code.google.com/p/efficient-java-matrix-library/">EJML</a>, <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>, <a href="http://trove.starlight-systems.com/">Trove</a></p>

<p>Native Wrapper有：<a href="http://jblas.org">jblas</a>，<a href="https://github.com/fommil/matrix-toolkits-java">Matrix Toolkit Java</a></p>

<p>下面介绍一些影响力较大的java数值计算/科学计算库。</p>

<p><a href="http://commons.apache.org/proper/commons-math/">Commons Math</a>, 最新版本是3.1.1,2013年1月9号发布。这个库提供一些基本的数学运算，没有high-level的东西，例如矩阵，向量等，用起来会比较繁琐。</p>

<p><a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>, 最新版是Version 1.0.3 (November 9, 2012)。</p>

<p><a href="http://acs.lbl.gov/software/colt/">Colt</a>，已经不更新了，最后版本是1.2.0，2004年9月发布的。</p>

<p>Apache Mahout使用了Colt作为high performance collections，见官方<a href="https://cwiki.apache.org/MAHOUT/mahout-collections.html">这个页面</a>，说“The implementation of Mahout Collections is derived from Cern Colt”，以及quora 这个帖子<a href="http://www.quora.com/Distributed-Algorithms/What-are-the-best-resources-for-distributed-numerical-analysis-matrix-algorithms">What are the best resources for distributed numerical analysis/matrix algorithms</a>。</p>

<h2 id="python">Python</h2>
<p>目前最有影响力的莫过于<a href="http://www.numpy.org/">NumPy</a>和<a href="http://www.scipy.org/">SciPy</a>。Amazon.com上可以搜到专门讲它们的书。</p>

<p>SciPy依赖NumPy，主要是在数值计算方面调用了NumPy。</p>

<h2 id="ruby">Ruby</h2>
<p><a href="http://sciruby.com/">SciRuby</a>, 是SciPy和NumPy的克隆，目前还在开发中。</p>

<h2 id="r">R</h2>
<p>R刚开始时是统计学家开发的语言，专门用于数理统计，现在功能不断增强，内置了很多数值计算和科学计算的功能。R在数据分析领域比较火。</p>

<h2 id="scala">Scala</h2>
<p>目前用google搜索 “scala numerical computing”，能找得到的就是<a href="http://code.google.com/p/scalalab/">ScalaLab</a>了。</p>

<h2 id="matlab">Matlab</h2>
<p>最后，别忘了Matlab是支持多语言调用的。</p>

<p>可以用Matlab生成DLL，给C/C++语言调用。其实，凡是能调用DLL的语言，都可以使用这个DLL，例如Python, Ruby等。</p>

<p>可以用<a href="http://www.mathworks.cn/products/javabuilder/">Matlab JavaBuilder</a>将m文件转换为jar文件，然后在java代码中就可以调用了。</p>

<h2 id="section">如何选择</h2>
<p>本文的重点在于选择一个高性能，同时又比较易用的库，即被让我们调用，用来写程序的库，不是一个集成环境或REPL环境。因此R和Matlab不在讨论范围内。R和Matlab用来做原型或前期Data Exploration比较适合。</p>

<p>选择一个工具（语言，框架，库等），要看其是否成熟。我个人的一些判断指标，主要有</p>

<ol>
  <li>有没有大厂商的支持（作为vendor之类的）；</li>
  <li>amazon.com上能否搜到书。</li>
</ol>

<p>从厂商的支持来看，几个主要的大厂商如 Intel，AMD和Apple都开发了自己的数学库。Python则有很成熟的NumPy，在Amazon上能搜到书，例如“SciPy and NumPy”， “NumPy Cookbook”。 因此，目前来看，C++和Python是比较成熟的方案。</p>

<h2 id="section-1">参考资料</h2>
<p><a href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">Wikipedia BLAS</a><br />
<a href="http://en.wikipedia.org/wiki/LAPACK">Wikipedia LAPACK</a><br />
<a href="http://blog.henix.info/blog/blas-lapack-do-matrix-operation.html">用 BLAS/LAPACK 编写矩阵运算程序</a><br />
<a href="https://wikis.utexas.edu/display/~cdupree/BLAS,+LAPACK,+ATLAS">BLAS, LAPACK, ATLAS</a><br />
<a href="http://hi.baidu.com/luckykele2012/item/6a3b25423018c40d6dc2f090">BLAS 和 LAPACK ，以及其他常用数值计算库</a><br />
<a href="http://fdatamining.blogspot.com/2011/10/any-numerical-computing-environment-on.html">Any numerical computing environment on Java platform</a><br />
<a href="http://www.myoutsourcedbrain.com/2009/04/c-libraries-for-numerical-processing.html">C++ Libraries for Scientific Computing</a><br />
<a href="http://stackoverflow.com/questions/3121139/scientific-library-options-for-c-or-c">Scientific Library Options for C or C++</a><br />
<a href="http://programmers.stackexchange.com/questions/138643/why-is-python-used-for-high-performance-scientific-computing-but-ruby-isnt">Why is Python used for high-performance/scientific computing (but Ruby isn’t)?</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KNN与K-Means的区别]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130225"/>
    <updated>2013-02-25T23:41:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/differences-between-knn-and-kmeans</id>
    <content type="html"><![CDATA[<h2 id="knnk-nearest-neighbor">KNN(K-Nearest Neighbor)介绍</h2>
<p>Wikipedia上的<a href="http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm">KNN词条</a>中有一个比较经典的图如下：</p>

<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans1.png" /></p>

<p>KNN的算法过程是是这样的：</p>

<p>从上图中我们可以看到，图中的数据集是良好的数据，即都打好了label，一类是蓝色的正方形，一类是红色的三角形，那个绿色的圆形是我们待分类的数据。</p>

<p>如果K=3，那么离绿色点最近的有2个红色三角形和1个蓝色的正方形，这3个点投票，于是绿色的这个待分类点属于红色的三角形。</p>

<p>如果K=5，那么离绿色点最近的有2个红色三角形和3个蓝色的正方形，这5个点投票，于是绿色的这个待分类点属于蓝色的正方形。（参考 <a href="http://coolshell.cn/articles/8052.html">酷壳的 K Nearest Neighbor 算法</a>）</p>

<p>我们可以看到，KNN本质是基于一种数据统计的方法！其实很多机器学习算法也是基于数据统计的。</p>

<!-- more -->

<p>KNN是一种memory-based learning，也叫instance-based learning，属于lazy learning。即它没有明显的前期训练过程，而是程序开始运行时，把数据集加载到内存后，不需要进行训练，就可以开始分类了。</p>

<p>具体是每次来一个未知的样本点，就在附近找K个最近的点进行投票。</p>

<p>再举一个例子，Locally weighted regression (LWR)也是一种 memory-based 方法，如下图所示的数据集。</p>

<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans2.gif" /></p>

<p>用任何一条直线来模拟这个数据集都是不行的，因为这个数据集看起来不像是一条直线。但是每个局部范围内的数据点，可以认为在一条直线上。每次来了一个位置样本x，我们在X轴上以该数据样本为中心，左右各找几个点，把这几个样本点进行线性回归，算出一条局部的直线，然后把位置样本x代入这条直线，就算出了对应的y，完成了一次线性回归。</p>

<p>也就是每次来一个数据点，都要训练一条局部直线，也即训练一次，就用一次。</p>

<p>LWR和KNN是不是很像？都是为位置数据量身定制，在局部进行训练。</p>

<h2 id="k-means">K-Means介绍</h2>
<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans3.jpg" /></p>

<p>如图所示，数据样本用圆点表示，每个簇的中心点用叉叉表示。(a)刚开始时是原始数据，杂乱无章，没有label，看起来都一样，都是绿色的。(b)假设数据集可以分为两类，令K=2，随机在坐标上选两个点，作为两个类的中心点。(c-f)演示了聚类的两种迭代。先划分，把每个数据样本划分到最近的中心点那一簇；划分完后，更新每个簇的中心，即把该簇的所有数据点的坐标加起来去平均值。这样不断进行”划分—更新—划分—更新”，直到每个簇的中心不在移动为止。(图文来自Andrew ng的机器学习公开课)。</p>

<p>推荐关于K-Means的两篇博文，<a href="http://coolshell.cn/articles/7779.html">K-Means 算法 _ 酷壳</a>，<a href="http://blog.pluskid.org/?p=17">漫谈 Clustering (1)_ k-means pluskid</a>。</p>

<h2 id="knnk-means">KNN和K-Means的区别</h2>
<table style="border-collapse: collapse;" border="0">
<colgroup>
<col style="width: 277px;" />
<col style="width: 277px;" /></colgroup>
<tbody valign="top">
<tr>
<td style="padding-left: 7px; padding-right: 7px; border: solid 0.5pt;">
<p style="text-align: center;"><span style="font-size: 10pt;"><strong>KNN</strong></span></p>
</td>
<td style="padding-left: 7px; padding-right: 7px; border-top: solid 0.5pt; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;">
<p style="text-align: center;"><span style="font-size: 10pt;"><strong>K-Means</strong></span></p>
</td>
</tr>
<tr style="height: 85px;">
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">1.KNN是分类算法<br />
</span><p></p>
<p><span style="font-size: 10pt;">2.监督学习<br />
</span></p>
<p style="text-align: justify;"><span style="font-size: 10pt;">3.喂给它的数据集是带label的数据，已经是完全正确的数据</span></p>
</td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">1.K-Means是聚类算法<br />
</span><p></p>
<p><span style="font-size: 10pt;">2.非监督学习<br />
</span></p>
<p style="text-align: justify;"><span style="font-size: 10pt;">3.喂给它的数据集是无label的数据，是杂乱无章的，经过聚类后才变得有点顺序，先无序，后有序</span></p>
</td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">没有明显的前期训练过程，属于memory-based learning</span></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">有明显的前期训练过程</span></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">K的含义：来了一个样本x，要给它分类，即求出它的y，就从数据集中，在x附近找离它最近的K个数据点，这K个数据点，类别c占的个数最多，就把x的label设为c</span></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">K的含义：K是人工固定好的数字，假设数据集合可以分为K个簇，由于是依靠人工定好，需要一点先验知识</span></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;" colspan="2"><span style="font-size: 10pt;">相似点：都包含这样的过程，给定一个点，在数据集中找离它最近的点。即二者都用到了NN(Nears Neighbor)算法，一般用KD树来实现NN。</span></td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VisualVM连接 tomcat 服务器时，如何配置tomcat启动JMX]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120811"/>
    <updated>2012-08-11T21:37:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/configure-tomcat-jmx-to-allow-visualvm-connect-tomcat</id>
    <content type="html"><![CDATA[<p>用VisualVM连接 tomcat 服务器时，需要让tomcat启动JMX，在catalina.sh 中添加一行代码即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">JAVA_OPTS</span><span class="o">=</span>”<span class="nv">$JAVA_OPTS</span> -Djava.rmi.server.hostname<span class="o">=</span>192.168.0.123 -Dcom.sun.management.jmxremote<span class="o">=</span><span class="nb">true</span> -Dcom.sun.management.jmxremote.port<span class="o">=</span>8086 -Dcom.sun.management.jmxremote.ssl<span class="o">=</span><span class="nb">false</span> -Dcom.sun.management.jmxremote.authenticate<span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，用hostname -i 查看是否为127.0.01，这步非常重要,否则会连接失败，如果是，必须要配置-Djava.rmi.server.hostname。</p>

<p>参考： <br />
<a href="http://blog.tty.nl/2010/09/03/using-visualvm-to-fix-live-tomcat-and-jvm-problems/">Using VisualVM to fix live Tomcat and JVM problems</a><br />
<a href="http://blog.csdn.net/linghunhong/article/details/6438572">JVM内存监控:visualVM jconsole jstatd jmap</a></p>
]]></content>
  </entry>
  
</feed>
