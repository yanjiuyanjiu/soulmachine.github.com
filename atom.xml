<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2013-08-29T22:33:14+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简洁的Scala]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130829"/>
    <updated>2013-08-29T21:38:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/concise-scala</id>
    <content type="html"><![CDATA[<p>Scala语言是很注重一致性(consistency)的，Scala的简洁性(concision)都是由其一致性带来的。</p>

<p>Scala的看上去很复杂，但是它在概念上是非常一致的。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。</p>

<h1 id="oo--fp">OO + FP</h1>

<h2 id="section">一切都是对象</h2>

<p>更精确地说，应该是“一切值都是对象”。</p>

<ul>
  <li>
    <p>整数, 浮点数等基本类型(primitive type)是对象  </p>

    <pre><code>  123.toByte
  3.14.toInt
</code></pre>

    <p>在Java中，primitive type不是对象，打破了一致性。</p>
  </li>
  <li>
    <p>函数是对象</p>

    <pre><code>  val compare = (x: Int, y: Int) =&gt; x &gt; y
  compare(1, 2)
</code></pre>
  </li>
  <li>
    <p>不再有静态方法(static method)和静态属性(static field)。Java中的静态方法(static method)和静态属性(static field)，有点打破了面向对象，因为它们不属于一个实例，而是属于类。在Scala中，静态方法和静态属性也属于对象，具体来说，属于Scala中的单例object。这样，静态成员和普通成员统一了起来，都附属于某个实例(instance)。</p>

    <pre><code>  object Dog {
    val sound = "wang wang" //static field
  }
</code></pre>
  </li>
</ul>

<h2 id="section-1">函数是值</h2>

<p>函数是一等公民，跟普通的值没区别</p>

<ul>
  <li>
    <p>可以当作参数传递</p>

    <pre><code>  val  compare = (x: Int , y: Int ) =&gt; x &gt;  y
  list sortWith compare
</code></pre>
  </li>
  <li>
    <p>不管它是实例的方法</p>

    <pre><code>  class AComparator  {
    def  compare(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith ( new  AComparator ).compare
</code></pre>
  </li>
  <li>
    <p>还是匿名子句</p>

    <pre><code>  object  annonymous extends scala.Function2[Int , Int , Boolean] {
    override  def  apply(x: Int , y: Int ) = x &gt;  y
  }
  list sortWith annonymous 
</code></pre>
  </li>
</ul>

<h2 id="section-2">一切操作都是函数调用</h2>
<!-- more -->

<ul>
  <li>
    <p>运算符是函数调用</p>

    <pre><code>  1 +  1
  1.+(1)
  1.&gt;(0)
  1 &gt;  0
  (1 &gt;  0).&amp;(2 &gt;  1)
  (1 &gt;  0) &amp; 2 &gt;  1
  stack.push(10)
  stack push  10
  stack.pop
  stack pop
</code></pre>

    <p>注意，上述代码中，只有一个参数或零个参数的方法在调用时可以省略”.” 和”()”。</p>
  </li>
  <li>
    <p>更多的符号需要用作方法名</p>

    <pre><code>  def  !@#%^&amp;*\-&lt;=&gt;?|~:/ = println("noop" )
  def  √(x: Double ) = Math.sqrt( x)
  val  Π =  Math.Pi
  val  r =  √( 9*Π)
</code></pre>
  </li>
  <li>
    <p>‘&lt;’, ‘&gt;’ 更适合作方法名，所以用’[’ 和‘]’ 来表示类型参数</p>
  </li>
  <li>
    <p>for语句是函数调用</p>

    <pre><code>  for  (i &lt;- List(1, 2)) {
    println(i)
  }
  List(1, 2) foreach { i =&gt; println(i)}
  for  (i &lt;- List(1, 2))  yield {
    i +  10
  }
  List(1, 2) map {i =&gt; i +  10}
</code></pre>
  </li>
  <li>
    <p>更多的例子</p>

    <pre><code>  // synchronized is function call instead of keyword
  def  check = synchronized {
    // isInstanceOf is function call instead of keyword
    100.isInstanceOf[ String ] 
  }
</code></pre>
  </li>
  <li>
    <p>额外的好处：自左向右顺序书写语句</p>

    <pre><code>  stack.pop.asInstanceOf[ Int ] // (Integer) stack.pop() in Java
</code></pre>
  </li>
</ul>

<h2 id="section-3">一切操作都有返回值</h2>

<ul>
  <li>
    <p>默认返回最后一条语句的值，也可以用return 显式返回</p>

    <pre><code>  val  r1 = { // return 3
    val  a =  1
    val  b =  2
    a +  b
  }
  val  r2 =  if (true) 1 else 2
  val  r3 =  // return (): Unit
    for  (i &lt;- List(1, 2)) {
      println(i)
    }
  val  r4 =  // return List(11, 12)
    for  (i &lt;- List(1, 2))  yield {
       i +  10
    }
  val  r5 =  // return java.io.File
  try  {
     val  f =  new  File("afile")
     f
  }  catch {
     case ex: IOException  =&gt; null
  }
</code></pre>
  </li>
</ul>

<p>Scala里不再像C/C++, Java，区分语句(statement)和表达式(expression)。Scala里没有statement，只有expression，因此一切操作都是表达式，都有返回值。Scala可以说是<strong>expression-oriented</strong>。</p>

<p>关于语句和表达式的区别，可以看”Scala in depth”一书中的比较:</p>

<blockquote>
  <p><strong>Statement Versus Expression</strong> A statement is something that execute; an expression is something that evaluates to a value.</p>
</blockquote>

<h2 id="oo--fp-1">一切都是对象+数据即操作，操作即数据 = OO + FP</h2>

<h1 id="type-system">一致的类型系统(type system)</h1>

<h2 id="scala-class-hierarchy">scala class hierarchy</h2>

<p><img src="http://www.scala-lang.org/old/sites/default/files/images/classhierarchy.png" /></p>

<h2 id="any">根类 Any</h2>

<p>Scala 上有一个共同的根类<strong>Any</strong>。Any统一了基本类型和引用类型。</p>

<h2 id="nullnothing">两个尾类Null和Nothing。</h2>

<p>JVM上的null是Null类，它是所有AnyRef的子类。</p>

<p>Nothing是所有类型（包括AnyVal和AnyRef）的子类。它没有值（实例），用于处理一些特殊情况，例如出错时返回该类型。</p>

<h2 id="invariant-covariant-contravariant">Invariant, Covariant, Contravariant</h2>

<h2 id="type-parameter-vs-abstract-type-member">类型参数(type parameter) VS. 抽象类型成员(abstract type member)</h2>

<pre><code>trait Pair[K, V] {
  def get(key: K): V
  def set(key: K, value: V)
}
class PairImpl extends Pair[Dog, Fox] {
  def get(key: Dog): Fox
  def put(key: Dog, value: Fox)
}
</code></pre>

<p>类型参数的名字会发散到所有子类和引用的类，因此改变类型名字时需要修改很多地方</p>

<pre><code>trait Pair{
  type K // deferred type
  type V // deferred type
  defget(key: K): V
  defset(key: K, value: V)
}
class PairImpl extends Pair{
  type K= Dog
  type V= Fox
  defget(key: K): V
  defset(key: K, value: V)
}
</code></pre>

<p>抽象类型成员，改变类型名字时，只需要修改一处地方</p>

<h1 id="section-4">一些牛人的讨论</h1>

<p><a href="http://dcaoyuan.iteye.com/blog/502730">2 楼 dcaoyuan 2009-10-25</a>  </p>

<blockquote>
  <p>这次会上讲PPT时间有点不够，但这个PPT中提到的每句话都是仔细想过的，强调的是Scala中一些概念的一致性，比如，有关Scala的文章中常提到“值都是对象”，准确地说，应该是“值都是对象的实例”，还有，“操作、函数、参数可以互相转化，都是值，都是实例的对象”，这其实是Scala可以扩展的关键，也是OO+FP能够比较好地在Scala中结合的关键。 </p>

  <p>还有就是Scala的类型体系，看上去复杂，其实是为了修正Java中类型体系的一些问题，并且带了了一个JVM上的完整一致的类型体系。弄清了几个概念后，也就不觉得复杂了，反倒是比Java的简单。 </p>

  <p>总之，我看到的Scala的简单性都是由其一致性带来的，虽然设计者为了开发人员的习惯作了一点点妥协，但还是非常坚持他的设计理念。 </p>

  <p>Martin不是一个简单的人，为了在JVM上实现他的设计理念，其后台的具体实现其实是相当复杂和困难的，但他坚持并不断实践，有时候甚至不惜把原来的实现推倒重来，终于在2.6以后有了我们现在看到的相当理想的结果。</p>
</blockquote>

<h1 id="section-5">参考资料</h1>

<ol>
  <li><a href="http://www.slideshare.net/dcaoyuan/scalajava">2009. 邓草原. 对Java的修正和超越</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装Spark集群(在CentOS上)]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130617"/>
    <updated>2013-06-17T22:16:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/installing-spark-on-centos-cn</id>
    <content type="html"><![CDATA[<p><strong>环境</strong>:CentOS 6.4, Hadoop 1.1.2, JDK 1.7, Spark 0.7.2, Scala 2.9.3</p>

<p>折腾了几天，终于把Spark 集群安装成功了，其实比hadoop要简单很多，由于网上搜索到的博客大部分都还停留在需要依赖mesos的版本，走了不少弯路。</p>

<h1 id="jdk-17">1. 安装 JDK 1.7</h1>
<pre><code>yum search openjdk-devel
sudo yum install java-1.7.0-openjdk-devel.x86_64
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
sudo vim /etc/profile
# add the following lines at the end
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
# test
$ java -version
</code></pre>

<p>参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120423/">安装和配置CentOS服务器的详细步骤</a>。</p>

<h1 id="scala-293">2. 安装 Scala 2.9.3</h1>
<p>Spark 0.7.2 依赖 Scala 2.9.3, 我们必须要安装Scala 2.9.3.</p>

<p>下载 <a href="http://www.scala-lang.org/downloads/distrib/files/scala-2.9.3.tgz">scala-2.9.3.tgz</a> 并 保存到home目录.</p>

<pre><code>$ tar -zxf scala-2.9.3.tgz
$ sudo mv scala-2.9.3 /usr/lib
$ sudo vim /etc/profile
# add the following lines at the end
export SCALA_HOME=/usr/lib/scala-2.9.3
export PATH=$PATH:$SCALA_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
source /etc/profile
# test
$ scala -version
</code></pre>

<h1 id="spark">3. 下载预编译好的Spark</h1>
<p>下载预编译好的Spark, <a href="http://www.spark-project.org/download-spark-0.7.2-prebuilt-hadoop1">spark-0.7.2-prebuilt-hadoop1.tgz</a>. </p>

<p>如果你想从零开始编译，则下载源码包，但是我不建议你这么做，因为有一个Maven仓库，twitter4j.org, 被墙了，导致编译时需要翻墙，非常麻烦。如果你有DIY精神，并能顺利翻墙，则可以试试这种方式。</p>

<h1 id="section">4. 本地模式</h1>

<h2 id="section-1">4.1 解压</h2>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<h2 id="sparkexamplesjar-">4.2 设置SPARK_EXAMPLES_JAR 环境变量</h2>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>这一步其实最关键，很不幸的是，官方文档和网上的博客，都没有提及这一点。我是偶然看到了这两篇帖子，<a href="https://groups.google.com/forum/?fromgroups#!topic/spark-users/nQ6wB2lcFN8">Running SparkPi</a>, <a href="https://groups.google.com/forum/#!msg/spark-users/x5UczgI-Xm8/wzMm3Mb77-oJ">Null pointer exception when running ./run spark.examples.SparkPi local</a>，才补上了这一步，之前死活都无法运行SparkPi。</p>

<h2 id="sparkhomesparkhomebinpath">4.3 （可选）设置 SPARK_HOME环境变量，并将SPARK_HOME/bin加入PATH</h2>
<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="sparkpi">4.4 现在可以运行SparkPi了</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi local 
</code></pre>

<h1 id="section-2">5. 集群模式</h1>

<!-- more -->

<h2 id="hadoop">5.1 安装Hadoop</h2>
<p>用VMware Workstation 创建三台CentOS 虚拟机，hostname分别设置为 master, slave01, slave02，设置SSH无密码登陆，安装hadoop，然后启动hadoop集群。参考我的这篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20130612">在CentOS上安装Hadoop</a>. </p>

<h2 id="scala">5.2 Scala</h2>
<p>在三台机器上都要安装 Scala 2.9.3 , 按照第2节的步骤。JDK在安装Hadoop时已经安装了。</p>

<h2 id="masterspark">5.3 在master上安装并配置Spark</h2>
<p>解压</p>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<p>设置SPARK_EXAMPLES_JAR 环境变量</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>在 in <code>conf/spark-env.sh</code> 中设置<code>SCALA_HOME</code></p>

<pre><code>$ cd ~/spark-0.7.2/conf
$ mv spark-env.sh.template spark-env.sh
$ vim spark-env.sh
# add the following line
export SCALA_HOME=/usr/lib/scala-2.9.3
# save and exit
</code></pre>

<p>在<code>conf/slaves</code>, 添加Spark worker的hostname, 一行一个。</p>

<pre><code>$ vim slaves
slave01
slave02
# save and exit
</code></pre>

<p>（可选）设置 SPARK_HOME环境变量，并将SPARK_HOME/bin加入PATH</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
#make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="workerspark">5.4 在所有worker上安装并配置Spark</h2>
<p>既然master上的这个文件件已经配置好了，把它拷贝到所有的worker。<strong>注意，三台机器spark所在目录必须一致，因为master会登陆到worker上执行命令，master认为worker的spark路径与自己一样。</strong></p>

<pre><code>$ cd
$ scp -r spark-0.7.2 dev@slave01:~
$ scp -r spark-0.7.2 dev@slave02:~
</code></pre>

<p>按照第5.3节设置<code>SPARK_EXAMPLES_JAR</code>环境变量，配置文件不用配置了，因为是直接从master复制过来的，已经配置好了。</p>

<h2 id="spark-">5.5 启动 Spark 集群</h2>
<p>在master上执行</p>

<pre><code>$ cd ~/spark-0.7.2
$ bin/start-all.sh
</code></pre>

<p>检测进程是否启动</p>

<pre><code>$ jps
11055 Jps
2313 SecondaryNameNode
2409 JobTracker
2152 NameNode
4822 Master
</code></pre>

<p>浏览master的web UI(默认<a href="http://localhost:8080">http://localhost:8080</a>). 这是你应该可以看到所有的word节点，以及他们的CPU个数和内存等信息。
##5.6 运行SparkPi例子</p>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi spark://master:7077
</code></pre>

<p>（可选）运行自带的例子，SparkLR 和 SparkKMeans.</p>

<pre><code>#Logistic Regression
#./run spark.examples.SparkLR spark://master:7077
#kmeans
$ ./run spark.examples.SparkKMeans spark://master:7077 ./kmeans_data.txt 2 1
</code></pre>

<h2 id="hdfswordcount">5.7 从HDFS读取文件并运行WordCount</h2>

<pre><code>$ cd ~/spark-0.7.2
$ hadoop fs -put README.md .
$ MASTER=spark://master:7077 ./spark-shell
scala&gt; val file = sc.textFile("hdfs://master:9000/user/dev/README.md")
scala&gt; val count = file.flatMap(line =&gt; line.split(" ")).map(word =&gt; (word, 1)).reduceByKey(_+_)
scala&gt; count.collect()
</code></pre>

<h2 id="spark--1">5.8 停止 Spark 集群</h2>

<pre><code>$ cd ~/spark-0.7.2
$ bin/stop-all.sh
</code></pre>

<h1 id="section-3">参考资料</h1>
<ol>
  <li><a href="http://spark-project.org/docs/latest/spark-standalone.html">Spark Standalone Mode</a></li>
  <li><a href="https://github.com/mesos/spark/wiki/Running-A-Spark-Standalone-Cluster">Running A Spark Standalone Cluster</a></li>
  <li><a href="http://sprism.blogspot.com/2012/11/lightning-fast-wordcount-using-spark.html">Lightning-Fast WordCount using Spark Alongside Hadoop</a></li>
</ol>

<p>以下博客都已经过时了：</p>

<ol>
  <li><a href="http://chapeau.freevariable.com/2013/04/installing-spark-on-fedora-18.html">Installing Spark on Fedora 18</a></li>
  <li><a href="http://rdc.taobao.com/team/jm/archives/1823">Spark随谈（二）—— 安装攻略</a></li>
  <li><a href="http://www.cnblogs.com/jerrylead/archive/2012/08/13/2636115.html">Spark安装与学习</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Spark on CentOS]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130614"/>
    <updated>2013-06-14T19:06:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/installing-spark-on-centos</id>
    <content type="html"><![CDATA[<p><strong>Environment</strong>:CentOS 6.4, Hadoop 1.1.2, JDK 1.7, Spark 0.7.2, Scala 2.9.3</p>

<p>After a few days hacking , I have found that installing a Spark cluster is exteremely easy :)</p>

<h1 id="install-jdk-17">1. Install JDK 1.7</h1>
<pre><code>yum search openjdk-devel
sudo yum install java-1.7.0-openjdk-devel.x86_64
/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac
sudo vim /etc/profile
# add the following lines at the end
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
# test
$ java -version
</code></pre>

<h1 id="install-scala-293">2. Install Scala 2.9.3</h1>
<p>Spark 0.7.2 depends on Scala 2.9.3, So we must install Scala of version 2.9.3.</p>

<p>Download <a href="http://www.scala-lang.org/downloads/distrib/files/scala-2.9.3.tgz">scala-2.9.3.tgz</a> and save it to home directory.</p>

<pre><code>$ tar -zxf scala-2.9.3.tgz
$ sudo mv scala-2.9.3 /usr/lib
$ sudo vim /etc/profile
# add the following lines at the end
export SCALA_HOME=/usr/lib/scala-2.9.3
export PATH=$PATH:$SCALA_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
source /etc/profile
# test
$ scala -version
</code></pre>

<h1 id="download-prebuilt-packages">3. Download prebuilt packages</h1>
<p>Download prebuilt packages, <a href="http://www.spark-project.org/download-spark-0.7.2-prebuilt-hadoop1">spark-0.7.2-prebuilt-hadoop1.tgz</a>. </p>

<p>If you want to compile it from scratch, download the source package, but I don’t recommend this way, because in Chinese Mainland the GFW has blocked one of maven repositories, twitter4j.org, which makes the compilation an impossible mission unless you can conquer GFW.</p>

<h1 id="local-mode">4. Local Mode</h1>

<h2 id="untar-the-tarball">4.1 Untar the tarball</h2>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<h2 id="set-the-sparkexamplesjar-environment-variable">4.2 Set the SPARK_EXAMPLES_JAR environment variable</h2>
<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>This is the most important step that must be done , but unfortunately the official docs and most web blogs haven’t mentioned this. I found this step when I bumped into these posts, <a href="https://groups.google.com/forum/?fromgroups#!topic/spark-users/nQ6wB2lcFN8">Running SparkPi</a>, <a href="https://groups.google.com/forum/#!msg/spark-users/x5UczgI-Xm8/wzMm3Mb77-oJ">Null pointer exception when running ./run spark.examples.SparkPi local</a>.</p>

<h2 id="optionalset-sparkhome-and-add-sparkhomebin-to-path">4.3 (Optional)Set SPARK_HOME and add SPARK_HOME/bin to PATH</h2>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="now-you-can-run-sparkpi">4.4 Now you can run SparkPi.</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi local 
</code></pre>

<h1 id="cluster-mode">5. Cluster Mode</h1>

<!-- more -->

<h2 id="install-hadoop">5.1 Install hadoop</h2>
<p>Use VMware Workstation to create three CentOS virtual machines, which’s hostnames are master, slave01, slave02, setup password-less ssh to the slaves, install hadoop on the three machines and start up the hadoop cluster. For more details please read another blog of mine, <a href="http://www.yanjiuyanjiu.com/blog/20130612">在CentOS上安装Hadoop</a>.</p>

<h2 id="install-jdk-and-scala">5.2 Install JDK and Scala</h2>
<p>Install JDK 1.7 and Scala 2.9.3 on the three machines, according to section 1 and section 2.</p>

<h2 id="install-and-configure-spark-on-master">5.3 Install and configure Spark on master</h2>
<p>Untar</p>

<pre><code>$ tar -zxf spark-0.7.2-prebuilt-hadoop1.tgz
</code></pre>

<p>Set the SPARK_EXAMPLES_JAR environment variable</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_EXAMPLES_JAR=$HOME/spark-0.7.2/examples/target/scala-2.9.3/spark-examples_2.9.3-0.7.2.jar
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<p>Set <code>SCALA_HOME</code> in <code>conf/spark-env.sh</code></p>

<pre><code>$ cd ~/spark-0.7.2/conf
$ mv spark-env.sh.template spark-env.sh
$ vim spark-env.sh
# add the following line
export SCALA_HOME=/usr/lib/scala-2.9.3
# save and exit
</code></pre>

<p>In<code>conf/slaves</code>, add hostnames of Spark workers, one per line.</p>

<pre><code>$ vim slaves
slave01
slave02
# save and exit
</code></pre>

<p>(Optional)Set SPARK_HOME and add SPARK_HOME/bin to PATH</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export SPARK_HOME=$HOME/spark-0.7.2
export PATH=$PATH:$SPARK_HOME/bin
# save and exit vim
# make the bash profile take effect immediately
$ source /etc/profile
</code></pre>

<h2 id="install-and-configure-spark-on-workers">5.4 Install and configure Spark on workers</h2>
<p>Copy the spark directory to all slaves. <strong>Remark，the spark directories must locat at the the same path on all machines，because the master will login to work to execute spark commands, it assumes that workers have the same path as itself</strong></p>

<pre><code>$ cd
$ scp -r spark-0.7.2 dev@slave01:~
$ scp -r spark-0.7.2 dev@slave02:~
</code></pre>

<p>Set <code>SPARK_EXAMPLES_JAR</code>  on all slaves as section 5.3. There is no need to edit configuration files because they are copied from master, which are already well configured.</p>

<h2 id="start-spark-cluster">5.5 Start Spark cluster</h2>
<p>On master</p>

<pre><code>$ cd ~/spark-0.7.2
$ bin/start-all.sh
</code></pre>

<p>Check whether the processes have been started.</p>

<pre><code>$ jps
11055 Jps
2313 SecondaryNameNode
2409 JobTracker
2152 NameNode
4822 Master
</code></pre>

<p>Look at the master’s web UI (<a href="http://localhost:8080">http://localhost:8080</a> by default). You should see the new node listed there, along with its number of CPUs and memory (minus one gigabyte left for the OS).</p>

<h2 id="run-the-sparkpi-example-in-cluster-mode">5.6 run the SparkPi example in cluster mode</h2>

<pre><code>$ cd ~/spark-0.7.2
$ ./run spark.examples.SparkPi spark://master:7077
</code></pre>

<p>(Optional)Run built-in examples, SparkLR and SparkKMeans.</p>

<pre><code>#Logistic Regression
#./run spark.examples.SparkLR spark://master:7077
#kmeans
$ ./run spark.examples.SparkKMeans spark://master:7077 ./kmeans_data.txt 2 1
</code></pre>

<h2 id="read-files-from-hdfs-and-run-wordcount">5.7 read files from HDFS and run WordCount</h2>

<pre><code>$ cd ~/spark-0.7.2
$ hadoop fs -put README.md .
$ MASTER=spark://master:7077 ./spark-shell
scala&gt; val file = sc.textFile("hdfs://master:9000/user/dev/README.md")
scala&gt; val count = file.flatMap(line =&gt; line.split(" ")).map(word =&gt; (word, 1)).reduceByKey(_+_)
scala&gt; count.collect()
</code></pre>

<h2 id="stop-spark-cluster">5.8 Stop Spark cluster</h2>

<pre><code>$ cd ~/spark-0.7.2
$ bin/stop-all.sh
</code></pre>

<h1 id="references">References</h1>
<ol>
  <li><a href="http://spark-project.org/docs/latest/spark-standalone.html">Spark Standalone Mode</a></li>
  <li><a href="https://github.com/mesos/spark/wiki/Running-A-Spark-Standalone-Cluster">Running A Spark Standalone Cluster</a></li>
  <li><a href="http://sprism.blogspot.com/2012/11/lightning-fast-wordcount-using-spark.html">Lightning-Fast WordCount using Spark Alongside Hadoop</a></li>
</ol>

<p>The following posts are outdated.</p>

<ol>
  <li><a href="http://chapeau.freevariable.com/2013/04/installing-spark-on-fedora-18.html">Installing Spark on Fedora 18</a></li>
  <li><a href="http://rdc.taobao.com/team/jm/archives/1823">Spark随谈（二）—— 安装攻略</a></li>
  <li><a href="http://www.cnblogs.com/jerrylead/archive/2012/08/13/2636115.html">Spark安装与学习</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS上安装Hadoop]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130612"/>
    <updated>2013-06-12T12:39:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/hadoop-installatioin-on-centos</id>
    <content type="html"><![CDATA[<p>Ubuntu上安装，请参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120103/">在Ubuntu上安装Hadoop</a>。</p>

<p><strong>环境</strong>：CentOS 6.4, JDK 1.7, Hadoop 1.1.2</p>

<h2 id="vmware-workstation-">1. 用vmware workstation 创建三台虚拟机</h2>
<p>首先用vmware workstation 新建一台CentOS 6.4，装好操作系统，选择 Basic Server，安装JDK，参考我的另一篇博客，<a href="http://www.yanjiuyanjiu.com/blog/20120423/">安装和配置CentOS服务器的详细步骤</a>。安装好后然后用浅拷贝<code>Create a linked clone</code> 克隆出两台作为slave，这样有了三台虚拟机。启动三台机器，假设IP分别为<code>192.168.1.131, 192.168.1.132, 192.168.1.133</code>, 131做为master 和 SecondaryNameNode, 身兼两职， 132和133为 slaves。</p>

<h2 id="section">2 关闭防火墙</h2>
<p>临时关闭防火墙</p>

<pre><code>$ sudo service iptables stop
</code></pre>

<p>下次开机后，防火墙还是会启动。</p>

<p>永久关闭防火墙</p>

<pre><code>$ sudo chkconfig iptables off
</code></pre>

<p>由于这几台虚拟机是开发机，不是生产环境，因此不必考虑安全性，可以永久关闭防火墙，还能给开发阶段带来很多便利。</p>

<h2 id="hostname">3. 修改hostname</h2>
<p>这一步看起来貌似不必要，其实是必须的，否则最后运行wordcount等例子时，会出现“Too many fetch-failures”。因为HDFS用hostname而不是IP，来相互之间进行通信（见后面的注意1）。</p>

<p>在CentOS上修改hostname，包含两个步骤(假设将hostname1改为hostname2，参考<a href="http://www.ichiayi.com/wiki/tech/linux_hostname">这里</a>，但不需要第一步)：</p>

<ol>
  <li>将 <code>/etc/sysconfig/network</code> 內的 HOSTNAME 改成 hostname2</li>
  <li>用<code>hostname</code>命令，临时修改机器名， <code>sudo hostname hostname2</code></li>
</ol>

<p>用<code>exit</code>命令退出shell，再次登录，命令提示字符串就会变成<code>[dev@hostname2 ~]$</code>。</p>

<p>用上述方法，将131改名为master，132改名为slave01，133改名为slave02。</p>

<p>在三台机器的/etc/hosts文件中，添加以下三行内容</p>

<pre><code>192.168.1.131 master
192.168.1.132 slave01
192.168.1.133 slave02
</code></pre>

<h2 id="section-1">4. 本地模式和伪分布式模式</h2>

<p>为了能顺利安装成功，我们先练习在单台机器上安装Hadoop。在单台机器上，可以配置成本地模式(local mode)和伪分布式模式(Pseudo-Distributed Mode)，参考官方文档<a href="http://hadoop.apache.org/docs/r1.1.2/single_node_setup.html">Single Node Setup</a>。</p>

<p>将 hadoop-1.1.2-bin.tar.gz 上传到三台机器的 home目录下，然后解压。<strong>注意，三台机器hadoop所在目录必须一致，因为master会登陆到slave上执行命令，master认为slave的hadoop路径与自己一样。</strong></p>

<h3 id="confhadoop-envsh-javahome">4.1 编辑 conf/hadoop-env.sh，设置 JAVA_HOME</h3>

<pre><code>cd hadoop-1.1.2
vim conf/hadoop-env.sh
</code></pre>

<p>注释掉第8行的JAVA_HOME，设置正确的JDK位置</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.19.x86_64
</code></pre>

<h3 id="section-2">4.2 测试本地模式是否正常</h3>
<p>默认情况下，Hadoop就被配置为本地模式，现在就可以开始测试一下。</p>

<pre><code>$ mkdir input 
$ cp conf/*.xml input 
$ bin/hadoop jar hadoop-examples-*.jar grep input output 'dfs[a-z.]+' 
$ cat output/*
</code></pre>

<p>可以看到正常的结果，说明本地模式运行成功了，下面开始配置伪分布式模式。</p>

<!-- more -->

<h3 id="ssh">4.3 配置SSH无密码登陆本机</h3>

<pre><code>$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<p>修改sshd的配置文件(需要root权限)</p>

<pre><code>$ sudo vim /etc/ssh/sshd_config
</code></pre>

<p>找到以下三行，并去掉注释符”#“</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>修改了配置文件需要重启sshd服务</p>

<pre><code>sudo service sshd restart
</code></pre>

<p>修改 <code>authorized_keys</code> 文件的权限，否则ssh登陆的时候还是需要密码。权限的设置非常重要,因为不安全的设置,会让你不能使用RSA功能，参考 <a href="http://www.cnblogs.com/xia520pi/archive/2012/05/16/2504132.html">http://www.cnblogs.com/xia520pi/archive/2012/05/16/2504132.html</a></p>

<pre><code>$ chmod 600 ~/.ssh/authorized_keys
</code></pre>

<h3 id="section-3">4.4 修改配置文件</h3>
<p>conf/core-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;fs.default.name&lt;/name&gt;
         &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/hdfs-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.replication&lt;/name&gt;
         &lt;value&gt;1&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/mapred-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;mapred.job.tracker&lt;/name&gt;
         &lt;value&gt;localhost:9001&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<h3 id="hadoop">4.5 启动Hadoop，测试伪分布式模式</h3>

<p>格式化namenode</p>

<pre><code>$ bin/hadoop namenode -format
</code></pre>

<p>启动 Hadoop 后台进程</p>

<pre><code>$ bin/start-all.sh
</code></pre>

<p>现在可以用浏览器打开NameNode和JobTracker的web界面了。<br />
NameNode - <a href="http://localhost:50070/">http://localhost:50070/</a><br />
JobTracker - <a href="http://localhost:50030/">http://localhost:50030/</a></p>

<p>将输入数据拷贝到分布式文件系统中:</p>

<pre><code>$ bin/hadoop fs -put conf input
</code></pre>

<p>如果这时出现 <code>SafeModeException</code> 异常，不用担心，等待几分钟即可。因为hadoop刚刚启动时，会进入安全模式进行自检。</p>

<p>运行 Hadoop 自带的例子:</p>

<pre><code>$ bin/hadoop jar hadoop-examples-*.jar grep input output 'dfs[a-z.]+'
</code></pre>

<p>查看输出文件:</p>

<pre><code>$ bin/hadoop fs -cat output/*
</code></pre>

<p>当你做完了后，关闭 Hadoop:</p>

<pre><code>$ bin/stop-all.sh
</code></pre>

<h2 id="section-4">5. 分布式模式</h2>
<p>如果有多台机器，就可以把Hadoop 配置成分布式模式(或称为集群模式)。参考官方文档<a href="http://hadoop.apache.org/docs/r1.1.2/cluster_setup.html">Cluster Setup</a>.</p>

<h2 id="master-master">5.1 配置 master 无密码登陆到所有机器（<strong>包括master自己登陆自己</strong>）</h2>
<p>首先在两台slave上修改sshd的配置文件，然后重启sshd服务。</p>

<pre><code>$ sudo vim /etc/ssh/sshd_config  找到以下三行，并去掉注释符”#“

RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>修改了配置文件需要重启sshd服务</p>

<pre><code>$ sudo service sshd restart
</code></pre>

<p>在两台slaves机器上新建 ~/.ssh 目录</p>

<pre><code>$ mkdir ~/.ssh
</code></pre>

<p>在master机器上执行： </p>

<pre><code>#生成公钥
$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
</code></pre>

<p>把公钥拷贝到所有机器上（包括自己）</p>

<pre><code># 拷贝到自己
$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
# 拷贝到两台slaves机器上
$ scp ~/.ssh/id_rsa.pub dev@192.168.1.132:~/.ssh/authorized_keys
$ scp ~/.ssh/id_rsa.pub dev@192.168.1.133:~/.ssh/authorized_keys
</code></pre>

<p>修改 .ssh目录和authorized_keys 文件的权限</p>

<pre><code>#在三台机器上执行以下命令
$ chmod 600 ~/.ssh/authorized_keys
# 在两台 slaves 上执行以下命令
$ chmod 700 ~/.ssh
</code></pre>

<p>测试，看看 master 是否可以无密码登陆两台slave</p>

<pre><code>#在 master执行
$ ssh 192.168.1.132
$ exit
$ ssh 192.168.1.133
$ exit
</code></pre>

<p>如果不需要密码，则说明配置成功了。</p>

<p>如果登陆不上，试试先关闭两台slaves的防火墙</p>

<pre><code>$ sudo service iptables stop
</code></pre>

<h3 id="section-5">5.2 修改6个配置文件</h3>
<p>在 master 上修改配置文件。</p>

<p>编辑 conf/hadoop-env.sh，设置 JAVA_HOME。</p>

<p>在master上编辑 conf/hadoop-env.sh，注释掉第8行的JAVA_HOME，设置正确的JDK位置，确保集群中所有机器的JDK都安装在这个位置，这样待会儿后面可以用scp命令把master的6个配置文件(hadoop-env.sh, core-site.xml, hdfs-site.xml, mapred-site.xml, masters, slaves)拷贝到所有slaves机器上，这样其他机器就不用重复进行配置了。</p>

<p>conf/masters:</p>

<pre><code>master
</code></pre>

<p>conf/slaves:</p>

<pre><code>slave01
slave02
</code></pre>

<p>这两个配置文件的作用是，指定131作为master, 132和133为 slaves。</p>

<p>conf/core-site.xml:</p>

<pre><code>&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;fs.default.name&lt;/name&gt;
        &lt;value&gt;hdfs://master:9000&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>conf/hdfs-site.xml:</p>

<pre><code>&lt;configuration&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.name.dir&lt;/name&gt;
         &lt;value&gt;/home/dev/hdfs/name&lt;/value&gt;
     &lt;/property&gt;
     &lt;property&gt;
         &lt;name&gt;dfs.data.dir&lt;/name&gt;
         &lt;value&gt;/home/dev/hdfs/data&lt;/value&gt;
     &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>要在master创建 /home/dev/hdfs/name 目录，在 slaves上创建 /home/dev/hdfs/data 目录，并<code>chmod g-w /home/dev/hdfs/data</code>（权限不对的话datanode无法启动）。</p>

<p>conf/mapred-site.xml:</p>

<pre><code>&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;mapred.job.tracker&lt;/name&gt;
        &lt;value&gt;master:9001&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<h3 id="slaves">5.3 将配置文件拷贝到所有slaves</h3>

<pre><code>$ cd ~/hadoop-1.1.2/conf/
$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.132:~/hadoop-1.1.2/conf/
$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.133:~/hadoop-1.1.2/conf/
</code></pre>

<h3 id="hadoophomehadoophomebinpath">5.4 （可选）设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH</h3>
<p>这一步是为了将bin目录加入PATH，这样可以在任何位置执行hadoop的各种命令。这步是可选的。</p>

<p>Hadoop不推荐使用<code>$HADOOP_HOME</code>，你可以试一下，当设置了<code>$HADOOP_HOME</code>后，执行<code>bin/start-all.sh</code>，第一行会打印出一行警告信息，<code>Warning: $HADOOP_HOME is deprecated.</code></p>

<p>给所有机器设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH。</p>

<pre><code>$ vim ~/.bash_profile
# add the following lines at the end
export HADOOP_HOME=$HOME/hadoop-1.1.2
export PATH=$PATH:$HOME/bin:$HADOOP_HOME/bin::$HADOOP_HOME/sbin
export CLASSPATH=$CLASSPATH:$HADOOP_HOME/hadoop-core-1.1.2.jar
# make the bash profile take effect immediately
$ source ~/.bash_profile
</code></pre>

<h2 id="hadoopbinhadoop">5.5 （可选）设置别名，名称为hadoop，指向bin/hadoop</h2>
<p>像bin目录下的start-all.sh, stop-all.sh其实不常用，对于一个hadoop使用者而言，最常用的命令是hadoop，例如<code>hadoop fs -ls</code>。前面5.4节将bin目录加入PATH，相当于一股脑儿将所有的命令加入了PATH，其实大可不必，我们只需要设置一个别名，名称为hadoop，指向bin/hadoop就可以了。</p>

<p>在所有机器上设置hadoop 别名，步骤如下：</p>

<pre><code>$ vim ~/.bash_profile
# add the following line at the end
alias hadoop='~/hadoop-1.1.2/bin/hadoop'
#make the bash profile take effect immediately
$ source ~/.bash_profile
</code></pre>

<h3 id="hadoop-1">5.6 运行 hadoop</h3>
<p>在master上执行以下命令，启动hadoop</p>

<pre><code>$ cd ~/hadoop-1.1.2/
#只需一次，下次启动不再需要格式化，只需 start-all.sh
$ bin/hadoop  namenode -format
$ bin/start-all.sh
</code></pre>

<h3 id="section-6">5.7 检查是否启动成功</h3>

<p>在master上执行：</p>

<pre><code>$ jps

2615 NameNode
2767 JobTracker
2874 Jps
</code></pre>

<p>在一台slave上执行：</p>

<pre><code>$ jps

3415 DataNode
3582 TaskTracker
3499 SecondaryNameNode
3619 Jps
</code></pre>

<p>在另一台slave上执行：</p>

<pre><code>$ jps

3741 Jps
3618 DataNode
3702 TaskTracker
</code></pre>

<p>可见进程都启动起来了，说明hadoop运行成功。</p>

<h3 id="wordcount">5.8 运行wordcount例子，进一步测试是否安装成功</h3>
<p>将输入数据拷贝到分布式文件系统中:</p>

<pre><code>$ cd ~/hadoop-1.1.2/
$ bin/hadoop fs -put conf input
</code></pre>

<p>运行 Hadoop 自带的例子:</p>

<pre><code>$ bin/hadoop jar hadoop-examples-*.jar wordcount input output
</code></pre>

<p>查看输出文件:</p>

<pre><code>$ bin/hadoop s -ls output
$ bin/hadoop fs -cat output/part-r-00000
</code></pre>

<p>如果能看到结果，说明这个例子运行成功。</p>

<h3 id="hadoop-2">5.9 停止 hadoop集群</h3>
<p>在master上执行：</p>

<pre><code>$ bin/stop-all.sh
</code></pre>

<h2 id="section-7">6. 排除错误</h2>
<p>本文已经尽可能的把步骤详细列出来了，但是我相信大部分人不会一次成功。这时候，查找错误就很重要了。查找错误最重要的手段是查看hadoop的日志，一般在logs目录下。把错误消息复制粘贴到google，搜索一下，慢慢找错误。</p>

<h2 id="section-8">注意</h2>
<ol>
  <li>所有配置文件只能用hostname，不能用IP。两年前我不懂，还为此<a href="http://stackoverflow.com/questions/8702637/hadoop-conf-fs-default-name-cant-be-setted-ipport-format-directly">在stackoverflow上发了帖子</a>。hadoop会反向解析hostname，即使是用了IP，也会使用hostname 来启动TaskTracker。参考<a href="http://stackoverflow.com/questions/15230946/hdfs-lan-ip-address-hostname-resolution">hdfs LAN ip address hostname resolution</a>，<a href="http://www.makenotes.net/?p=337004">hadoop入门经验总结- 杨贵堂的博客</a>，<a href="http://51mst.iteye.com/blog/1152439">hadoop集群配置</a>。</li>
  <li>如果在第 3.7步有问题，可以<code>stop-all.sh</code>, 然后<code>hadoop  namenode -format</code>，反复多试几次，一般可以成功。如果不习惯，多看看 logs目录下的日志文件，把错误消息复制粘贴到google，搜索答案。</li>
  <li>在第2.5步骤，如果出现 <code>SafeModeException</code> 异常，不用担心，等待几分钟即可。因为hadoop刚刚启动时，会进入安全模式进行自检，这需要花点时间。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Scala IDE 阅读spark源码 -- 将sbt项目转化为eclipse项目]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130611"/>
    <updated>2013-06-11T11:48:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/read-spark-source-code-using-scala-ide</id>
    <content type="html"><![CDATA[<p>阅读Spark源代码，最简单的方式是下载源码包，解压后用纯文本方式来阅读源码。这样效率不高，可以用sbteclipse这个插件，将sbt项目文件转化为eclipse项目文件，然后导入到Scala IDE，用eclipse来阅读源码，效率大大提高。</p>

<p><strong>环境</strong>：Windows 7, JDK 1.6</p>

<ol>
  <li>安装 scala。去官网 <a href="http://www.scala-lang.org/">http://www.scala-lang.org/</a> ，下载MSI，安装，按默认设置即可。</li>
  <li>
    <p>安装 sbt。去官网 <a href="http://www.scala-sbt.org/">http://www.scala-sbt.org/</a> ， 下载MSI，安装，按默认设置即可。
Linux下可以省略以上两步，spark源码自带了一个sbt，且启动sbt时它会自动下载对应的scala编译器。</p>
  </li>
  <li>
    <p>安装 Scala IDE。 去官网 <a href="http://scala-ide.org/">http://scala-ide.org/</a>，点击”Get the SDK”绿色按钮，下载。这个IDE的好处是，自带了scala编译器，解压即可使用。</p>
  </li>
  <li>
    <p>下载spark源码。 去官网 <a href="http://spark-project.org/">http://spark-project.org/</a> 下载源码，当前版本是 0.7.2, source package 大约4M左右。解压源码，例如 解压到 d:spark-0.7.0\</p>
  </li>
  <li>
    <p>添加 sbteclipse 插件依赖。spark已经添加了依赖，这一步什么也不需要做。</p>

    <p>这个插件的作用，就是能够读取sbt的配置文件，生成一个eclipse的工程文件。有了eclipse工程文件，就可以导入到eclipse了。</p>

    <p>spark已经添加了依赖，见 d:\spark-0.7.2\project\plugins.sbt，有一行</p>

    <p>addSbtPlugin(“com.typesafe.sbteclipse” % “sbteclipse-plugin” % “2.1.1”)</p>
  </li>
  <li>
    <p>启动cmd，启动sbt。</p>

    <blockquote>
      <p>cd  d:\spark-0.7.0<br />
 sbt</p>
    </blockquote>

    <p>Linux下则是</p>

    <blockquote>
      <p>cd  d:\spark-0.7.0<br />
 sbt/sbt</p>
    </blockquote>

    <p>开始下载各种依赖包，需要等待很长时间。</p>
  </li>
  <li>
    <p><strong>翻@_@墙。见本文最后一段。</strong></p>

    <p><!--more--></p>
  </li>
  <li>
    <p>等sbt提升符&gt;出现后，输入eclipse命令，开始生成eclipse工程文件，需要耐心等待一段时间</p>

    <blockquote>
      <p>&gt;eclipse<br />
 [info] About to create Eclipse project files for your project(s).<br />
 [info] Successfully created Eclipse project files for project(s):<br />
 [info] spark-examples  <br />
 [info] spark-streaming <br />
 [info] spark-repl<br />
 [info] spark-bagel<br />
 [info] spark-core  </p>
    </blockquote>

    <p>这样就生成成功了，去core, bagel, streaming, repl, examples 五个文件夹下，可以看到有一个.project和.classpath文件。从这里也可以看出，spark源码由五个项目组成。</p>
  </li>
  <li>用 Scala IDE 导入这5个工程，选择 d:\spark-0.7.2 文件夹，可以一次性导入5个项目。
项目图标上有红色感叹号，是因为jar包的路径不对，右击某个项目，选择 “Build Path -&gt; Configure Build Path” ，删除所有的jar，点击 “Add external jars”，浏览到 d:\spark-0.7.2\lib_managed\jars，添加所有的jar，这是红色感叹号就消失了。每个项目都如此操作一番。</li>
</ol>

<p><strong>注意：第8步在国内是无法成功的，因为一些maven仓库被墙，例如 twitter4j.org这个仓库就被墙了。因此需要翻@_@墙。</strong></p>

<p>我平时用goagent翻@_@墙，不过goagent只能让浏览器翻@_@墙，如何让goagent变成全局代理呢？即所有http协议都经过goagent。可以用 Proxifier，它可以把goagent变成操作系统全局的http代理。</p>

<p>不过 spark 在访问maven仓库时，用的是https网址，即https协议，虽然goagent可以用来访问https页面，但 goagent 和 Proxifier 使用时，https协议总是链接不通（参考 <a href="https://code.google.com/p/goagent/issues/detail?id=5210">https://code.google.com/p/goagent/issues/detail?id=5210</a>）。</p>

<p>于是我又想到了另一个方法，用SSH翻@_@墙。去网上找一个免费的ssh，安装 Bitvise SSH Client，然后在”Services”标签页面，勾选”SOCKS/HTTP Proxy Forwarding”，这样来翻@_@墙，Proxifier  使用  Bitvise SSH Client 提供的代理。</p>

<p>翻@_@墙成功后，再输入 eclipse，当到达 twitter4j.org 时，会发现 SUCCESS了。耐心等待，最后会成功生成.project文件。</p>

<p>用Scala IDE 导入项目，就可以开始阅读spark 源码了 :)</p>

<p>如果不想折腾，可以下载我已经生成好的项目, <a href="http://pan.baidu.com/share/link?shareid=534521368&amp;uk=2466605404">spark-0.7.2.zip</a>。解压，启动Scala IDE，选择菜单<code>File-&gt;Import-&gt;General-&gt;Existing projects into workspace</code>，浏览到 spark-0.7.2目录，批量导入5个项目。导入后项目图标有红色感叹号，这是因为你的电脑上路径和我的路径不一样，找不到引用的jar了。右击项目，选择<code>Build Path-&gt;Configure Build Path</code>，选择<code>Libraries</code>标签，这时可以看到所有jar都有红叉叉，全选，删除，然后点击<code>Add External Jars</code>，浏览到<code>spark-0.7.2\lib_managed\jars</code>，把所有jar都导入，导入后红色感叹号就消失了。对每个项目都执行上述操作。</p>

<p><strong>2013-07-27 更新</strong>：eclipse项目上有红色小叉叉图标，之前一直没解决，今天解决了，主要原因是，<strong>Scala IDE 版本不对！</strong> scala-ide.org 官网最新的的3.0.1只支持scala 2.10，不再支持2.9.3。由于Spark目前使用scala 2.9.3写的，所以我们要下载支持 scala 2.9.3 版，scala ide 3.0.0是支持 2.9.3的，不过首选要下载 eclipse JUNO，不要使用新版的eclipse，例如eclipse Indigo, Kepler都不行。</p>

<p>因此，正确的做法是，先下载 eclipse juno，然后下载 3.0.0 的zip包，解压，然后启动eclipse，点击菜单”help-&gt;Install New Software”，浏览到刚刚解压的<code>site</code>文件夹，就可以安装scala ide插件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaTeX的各种发行版和编辑器的比较]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130412"/>
    <updated>2013-04-12T11:01:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/latex-distributions-and-editors</id>
    <content type="html"><![CDATA[<h2 id="distribution">发行版(distribution)</h2>
<p>TeX类似于Linux，有很多不同的发行版(distribution)。</p>

<p>先看看各个发行版的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center"><a href="http://www.tug.org/texlive/">http://www.tug.org/texlive/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">2012-07-01</td>
      <td style="text-align: center">43</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center"><a href="http://miktex.org/">http://miktex.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">188,485</td>
      <td style="text-align: center">1.3.2 2012-09-24</td>
      <td style="text-align: center">54</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center"><a href="http://www.ctex.org/">http://www.ctex.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">252,657</td>
      <td style="text-align: center">2.9.2 2012-03-30</td>
      <td style="text-align: center">344</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center"><a href="http://www.tug.org/protext/">http://www.tug.org/protext/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">3.1.1 2012-07-23</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>其中CTeX和proTeXt都是基于MiKTeX的，再次进行了打包。国内估计用CTeX比较多。</p>

<h2 id="editor">编辑器(editor)</h2>
<p>编辑器大概分为两种，一种为WYSIWYG，所见即所得，实时预览，类似于Word，另一种是纯文本编辑器，有语法高亮，没有预览功能，需要另外安装一个发行版，编译成PDF后才能预览。</p>

<p>先看看各个编辑器的流行程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>官网</strong></th>
      <th style="text-align: center"><strong>PR</strong></th>
      <th style="text-align: center"><strong>Alexa</strong></th>
      <th style="text-align: center"><strong>预览类型</strong></th>
      <th style="text-align: center"><strong>最后更新</strong></th>
      <th style="text-align: center"><strong>weibo</strong></th>
      <th style="text-align: center"><strong>quora</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center"><a href="http://www.xm1math.net/texmaker/">http://www.xm1math.net/texmaker/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">289,311</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">4.0.1 2013-03-16</td>
      <td style="text-align: center">60</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center"><a href="http://www.tug.org/texworks/">http://www.tug.org/texworks/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">90,230</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">0.4.4  2012-04</td>
      <td style="text-align: center">23</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center"><a href="http://texstudio.sourceforge.net/">http://texstudio.sourceforge.net/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">N/A</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">2.5.2 2013-01-08</td>
      <td style="text-align: center">15</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center"><a href="http://www.texniccenter.org/">http://www.texniccenter.org/</a></td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">884,570</td>
      <td style="text-align: center">无预览</td>
      <td style="text-align: center">v2.0 beta1 2012-11-03</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center"><a href="http://www.lyx.org/">http://www.lyx.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">261,649</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">2.0.5.1 2013-01-08</td>
      <td style="text-align: center">56</td>
      <td style="text-align: center">42</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center"><a href="http://www.bakoma-tex.com/">http://www.bakoma-tex.com/</a></td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">1,327,901</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">10.10 2013-01-13</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center"><a href="http://www.texmacs.org">http://www.texmacs.org</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">1,525,373</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">1.0.7.19 2013-03-27</td>
      <td style="text-align: center">27</td>
      <td style="text-align: center">N/A</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center"><a href="http://www.latexeditor.org/">http://www.latexeditor.org/</a></td>
      <td style="text-align: center">6</td>
      <td style="text-align: center">624,564</td>
      <td style="text-align: center">实时预览</td>
      <td style="text-align: center">0.53 2009-10-09</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<!--more-->

<h2 id="section">跨平台</h2>
<p>下面看看各个发行版和编辑器的跨平台支持程度。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center">Windows</th>
      <th style="text-align: center">Mac</th>
      <th style="text-align: center">Linux</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">编辑器</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXnicCenter</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">WYSIWYG</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">Lyx</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">Bakoma</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmacs</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">LEd</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">发行版</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">MiKTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">TeX Live</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">√</td>
    </tr>
    <tr>
      <td style="text-align: center">CTeX</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
    <tr>
      <td style="text-align: center">proTeXt</td>
      <td style="text-align: center">√</td>
      <td style="text-align: center">×</td>
      <td style="text-align: center">×</td>
    </tr>
  </tbody>
</table>

<p>Tex Live在Mac上，叫做MacTex，见<a href="http://www.tug.org/mactex/newfeatures.html">官网的一段话</a>：</p>

<blockquote>
  <p>MacTeX-2012 installs a completely unmodified copy of the full TeX Live 2012 distribution. This is exactly the same distribution that runs on OS X, Windows, GNU/Linux, various BSD Unix systems, and other systems.</p>
</blockquote>

<h2 id="section-1">如何选择</h2>
<p>四个发新版，只有 Tex Live 是跨平台的，故使用Tex Live，其他发行版抛弃。</p>

<p>TeXmaker, TeXstudio, TeXworks 来进行比较<br />
中文支持的程度，打开.tex文件是否有乱码</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>名字</strong></th>
      <th style="text-align: center"><strong>打开GB18030的tex文件</strong></th>
      <th style="text-align: center"><strong>打开UTF8编码的文件</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">TeXworks</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXmaker</td>
      <td style="text-align: center">无乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
    <tr>
      <td style="text-align: center">TeXstudio</td>
      <td style="text-align: center">有乱码</td>
      <td style="text-align: center">无乱码</td>
    </tr>
  </tbody>
</table>

<p>TeXmaker 界面丑陋，且中文支持不好，功能没有多，抛弃之。
TeXmaker 和 TeXstudio 界面比较美观，而且二者界面风格很类似。因为TeXstudio是在TeXmaker的基础上而来的，<a href="http://en.wikipedia.org/wiki/TeXstudio">见wikipedia的描述</a>：</p>

<blockquote>
  <p>Originally called TexMakerX, TeXstudio was started as a fork of Texmaker that tried to extend it with additional features while keeping its look and feel.</p>
</blockquote>

<p>TeXnicCenter 安装时不会自动探测，第一次运行时会要求你指定 latex.exe 的路径。TeXnicCenter 界面风格是office的风格，很现代化。TeXnicCenter 只有 windows版，故放弃。</p>

<p>LyX 安装时会自动探测到TeX Live。这点比较方便，无需配置。<br />
LyX可以导入.tex文件，导入后，不能直接修改.tex源码，只能在上方的可视化区域直接输入内容，即LyX强迫你用类似word的方式来输入内容。因此抛弃LyX。</p>

<p>Bakoma 是商业软件，30天试用期，网上搜了一下，没有破解版，故放弃。</p>

<p>TeXmacs 1.0.7.19 在windows上安装完成后，双击后启动界面会闪退，完全没法用，换了1.0.7.18，可以启动了，目前发现两个问题：1. 打开（使用文件–&gt;打开或导入）一个含有中文的.tex文件会崩溃；2. 关闭程序管不了，需要用任务管理器杀掉才行，可见TeXmacs 还很不完善，其次TeXmacs 有着自己的语法，不是一个标准的TeX发行版，因此放弃 TeXmacs 。</p>

<p>LEd已经很久不更新，且只有windows版，放弃。</p>

<p>大牛陈硕用的是Tex Live，他的书使用Tex Live来排版的。<br />
<img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/04/chenshuo_texlive.png" alt="" /></p>

<h2 id="section-2">安装和配置</h2>
<p>在windows下安装 Tex Live 2012，先下载DVD ISO，然后安装即可。假设安装到<code>D:\texlive</code>。</p>

<p>安装完后，将<code>D:\texlive\2012\bin\win32</code>添加到PATH环境变量。这样Texmaker，Texstudio就不用配置了，安装后即可正常编译。如果没有添加到PATH环境变量，则在Texmaker，Texstudio中指定一些exe文件的绝对路径。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的Octopress配置]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130402"/>
    <updated>2013-04-02T15:35:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/my-octopress-configuration</id>
    <content type="html"><![CDATA[<h2 id="section">实时预览</h2>
<p>使用如下命令可以实现实时预览：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>rake preview</code> 会自动监视文件的变化，重新生成静态页面。因此修改markdown文件后，只需要在浏览器里刷新一下页面，就立刻可以看到效果。不过如果修改了_config.yml的话，则需要Ctrl+C终止，用<code>rake generate</code>重新生成，才能看到效果。</p>

<h2 id="section-1">嵌入代码块</h2>
<p>见官方文档<a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a>。</p>

<p>Octopress是一款为hacker量身定制的博客系统，当然内置了代码高亮的功能！它的代码高亮功能是通过Pygments实现的，配色方案用的是Solarized，堪称完美。</p>

<p>Octopress支持多种方式嵌入代码，可以直接嵌入代码，也可以引用github上的gist 。</p>

<p>我喜欢用<strong>三个反引号</strong>直接嵌入代码，比 <code>codeblock</code>要简洁。</p>

<h3 id="mathjax">启用MathJax</h3>
<p>在<code>source/_includes/custom/footer.html</code>的第一行加入如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span> <span class="nx">mathjax</span> <span class="nx">config</span> <span class="nx">similar</span> <span class="nx">to</span> <span class="nx">math</span><span class="p">.</span><span class="nx">stackexchange</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就引入了MathJax的JS包，可以直接在markdown文件里直接写公式了，例如 $\dfrac {\pi}{2}$。</p>

<p>上面的代码也可以在<code>source/_includes/custom/header.html</code>里添加，不过这样会使得页面的加载速度变慢。还可以在<code>source/_layouts/default.html</code>里添加。</p>

<!--more-->

<p>有一个问题，rdiscount这个解析器，对 mathjax 大部分支持，某些细节处理的不好，举个例子，它会在动把公式中的 <code>^n</code>转换成<code>&lt;sup&gt;n&lt;/sup&gt;</code>，例如<code>$2^n$</code>会解析成<code>$2&lt;sup&gt;n&lt;/sup&gt;$</code>，这样就破坏了整个公式，导致公式无法解析。参考<a href="http://christopherpoole.github.io/using-mathjax-on-github-pages/">这里</a>一段话：
&gt; as discount for example automatically replaces <code>x^2</code> with <code>x&lt;sup&gt;2&lt;/sup&gt;</code> which interrupts the MathJax rendering.</p>

<p>因此要换一个解析器，<a href="http://maruku.rubyforge.org/">Maruku</a> 和 <a href="http://kramdown.rubyforge.org/">Kramdown</a> 都可以，由于Maruku主页PR=4，Kramdown的主页PR=5，我选择了Kramdown。</p>

<p><strong>用Kramdown代替Rdiscount</strong><br />
修改Gemfile，增加一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">gem</span> <span class="s1">&#39;kramdown&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.14&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>很多博客都说要配套安装coderay这个gem，其实是没有必要的，只要代码块以 &#8220;` 开始和结束，自带的pygments就能实现代码高亮。</p>

<p>在Git Bash输入如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就会自动安装kramdown。</p>

<p>然后在_config.yml 文件中，见markdown: rdiscount 修改为  markdown: kramdown。</p>

<p>使用kramdown，感觉它的语法要求比rdiscout严格，例如每个代码块开头，必须有一个空行，否则高亮就会失败，大家可以试试看。每个标题掐面，也必须有一个开头。</p>

<p>kramdown的两种公式，display和inline，都是以<code>$$</code>开头和结尾的，display模式时，<code>$$</code>要单独占一行。这跟标准的LaTex有点不一样。参考<a href="http://kqueue.org/blog/2012/01/05/hello-world/">这里</a>。</p>

<p><strong>右击公式全屏空白</strong>：这时候右击公式，全屏空白。解决这个问题很简单，只需在 <code>sass/base/_theme.scss</code>添加”#main”即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">body <span class="o">{</span>
</span><span class="line">  &gt; div#main <span class="o">{</span>
</span><span class="line">    background: <span class="nv">$sidebar</span>-bg <span class="nv">$noise</span>-bg;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本节参考了<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Writing Math Equations on Octopress</a> 和 <a href="http://jasonllinux.github.com/blog/2012/11/06/write-latex-in-octopress/">在Octopress中使用Latex公式</a>。</p>

<h2 id="kramdown">kramdown的扩展语法</h2>
<p>kramdown扩展了标准markdown的语法，有很多使用的功能。<a href="http://kramdown.rubyforge.org/syntax.html">语法见官网文档</a>。这里选一些我常用的。</p>

<p><strong>脚注(footnote)</strong><br />
脚注定义是：<code>[^1]:</code>，数字可以改变，引用语法是<code>[^1]</code>。没有被引用到的参考文献，会被忽略掉。</p>

<p><strong>表格</strong><br />
一下是一个示例：</p>

<pre><code>|-----------------+------------+-----------------+----------------|
| Default aligned |Left aligned| Center aligned  | Right aligned  |
|-----------------|:-----------|:---------------:|---------------:|
| First body part |Second cell | Third cell      | fourth cell    |
| Second line     |foo         | **strong**      | baz            |
| Third line      |quux        | baz             | bar            |
|-----------------+------------+-----------------+----------------|
</code></pre>

<p>更详细说明见官网。</p>

<h2 id="excerpts">首页只显示部分正文(Excerpts)</h2>
<p>Octopress中，可以使用 <code>&lt;!--more--&gt;</code>，这样首页只显示一部分正文，并在每篇文章底下加一个Read on超链接。</p>

<h2 id="section-2">插入图片</h2>
<p>使用<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>。</p>

<p>语法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>% img <span class="o">[</span>class names<span class="o">]</span> /path/to/image <span class="o">[</span>width<span class="o">]</span> <span class="o">[</span>height<span class="o">]</span> <span class="o">[</span>title text <span class="o">[</span>alt text<span class="o">]]</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">{</span>% img http://placekitten.com/890/280 %<span class="o">}</span>
</span><span class="line"><span class="o">{</span>% img left http://placekitten.com/320/250 Place Kitten <span class="c">#2 %}</span>
</span><span class="line"><span class="o">{</span>% img right http://placekitten.com/300/500 150 250 Place Kitten <span class="c">#3 %}</span>
</span><span class="line"><span class="o">{</span>% img right http://placekitten.com/300/500 150 250 <span class="s1">&#39;Place Kitten #4&#39;</span> <span class="s1">&#39;An image of a very cute kitten&#39;</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="about-me-">添加about me 边栏</h2>
<p>编辑 source_includes\custom\asides\about.html，内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&lt;section&gt;
</span><span class="line">  &lt;h1&gt;About Me&lt;/h1&gt;
</span><span class="line">  &lt;p&gt;一句话自我介绍.&lt;/p&gt;
</span><span class="line">  &lt;p&gt;新浪微博: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://weibo.com/soulmachine&quot;</span>&gt;@soulmachine&lt;/a&gt;&lt;br/&gt;
</span><span class="line">     Twitter: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://twitter.com/#!/soulmachine&quot;</span>&gt;@soulmachine&lt;/a&gt;&lt;br/&gt;
</span><span class="line">     Other: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/soulmachine&quot;</span>&gt;Github&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://plus.google.com/103519507226474510310&quot;</span>&gt;Google+&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://www.linkedin.com/in/soulmachine&quot;</span>&gt;LinkedIn&lt;/a&gt;, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://www.quora.com/Jason-Day-2&quot;</span>&gt;Quora&lt;/a&gt;&lt;/p&gt;
</span><span class="line">  &lt;/p&gt;
</span><span class="line">&lt;/section&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在 _config.yml 的 default_asides 里添加 custom/asides/about.html。</p>

<h2 id="about">添加about页面</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake new_page<span class="o">[</span>about<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会生成 source/about/index.markdown 文件。</p>

<p>编辑该文件的内容。</p>

<p>然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h2 id="section-3">社会化分享</h2>
<p>使用addthis.com的分享按钮，在网站上获取代码，粘贴到<code>source/_includes/post/sharing.html</code>中，例如我的代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;sharing&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- AddThis Button BEGIN --&gt;</span>
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;addthis_toolbox addthis_default_style addthis_32x32_style&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_sinaweibo&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_facebook&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_twitter&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_google_plusone_share&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_delicious&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_digg&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_reddit&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_button_compact&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;a</span> <span class="na">class=</span><span class="s">&quot;addthis_counter addthis_bubble_style&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=undefined&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="c">&lt;!-- AddThis Button END --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在_config.yml 中，将twitter, google+ 和facebook like的按钮设置为false，取消显示，因为 AddThis 已经集成了这三者。</p>

<h2 id="section-4">社会化评论</h2>
<p><del>启用Disqus，填入 short name即可。</del>Disqus在国外流行，在国内的加载速度太慢，而且只有twitter, facebook, g+，没有照顾到国内的用户习惯，因此替换成国内的<a href="www.duoshuo.com">多说</a>。参考这篇博客 <a href="http://ihavanna.org/Internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">为 Octopress 添加多说评论系统</a>。<code>source/_includes/post/duoshuo_thread.html</code>的代码略有不同，添加了<code>data-title="我的Octopress配置"</code>，否则侧边栏的最近评论，标题为空白，感谢<a href="http://yrzhll.com/blog/2012/12/12/comment/">碟姐 - 在octopress中添加多说的最近评论</a>指出了这一点，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span> <span class="nx">Duoshuo</span> <span class="nx">Comment</span> <span class="nx">BEGIN</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;ds-thread&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">title</span><span class="o">=</span><span class="s2">&quot;我的Octopress配置&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;yanjiuyanjiu&quot;</span><span class="p">};</span>
</span><span class="line">	<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		<span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class="line">		<span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">		<span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class="line">	<span class="p">})();</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="c">&lt;!--</span> <span class="nx">Duoshuo</span> <span class="nx">Comment</span> <span class="nx">END</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>_config.yml 中的配置也略有不同： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">duoshuo_comments</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="nx">duoshuo_short_name</span><span class="o">:</span> <span class="nx">yanjiuyanjiu</span>
</span><span class="line"><span class="nx">duoshuo_asides_num</span><span class="o">:</span> <span class="mi">5</span>      <span class="err">#</span> <span class="err">侧边栏评论显示条目数</span>
</span><span class="line"><span class="nx">duoshuo_asides_avatars</span><span class="o">:</span> <span class="mi">1</span>   <span class="err">#</span> <span class="err">侧边栏评论是否显示头像</span>
</span><span class="line"><span class="nx">duoshuo_asides_time</span><span class="o">:</span> <span class="mi">1</span>      <span class="err">#</span> <span class="err">侧边栏评论是否显示时间</span>
</span><span class="line"><span class="nx">duoshuo_asides_title</span><span class="o">:</span> <span class="mi">1</span>     <span class="err">#</span> <span class="err">侧边栏评论是否显示标题</span>
</span><span class="line"><span class="nx">duoshuo_asides_admin</span><span class="o">:</span> <span class="mi">0</span>     <span class="err">#</span> <span class="err">侧边栏评论是否显示作者评论</span>
</span><span class="line"><span class="nx">duoshuo_asides_length</span><span class="o">:</span> <span class="mi">32</span>   <span class="err">#</span> <span class="err">侧边栏评论截取的长度</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-5">设置固定链接</h2>
<p>在 _config.yml 里，找到 permalink，设置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">permalink</span><span class="o">:</span> <span class="sr">/blog/</span><span class="o">:</span><span class="nx">year</span><span class="o">:</span><span class="nx">month</span><span class="o">:</span><span class="nx">day</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>效果就是<code>www.example.com/blog/20130403/</code>。模仿的是豆瓣的URL格式。</p>

<p>参考官方文档<a href="https://github.com/mojombo/jekyll/wiki/Permalinks">jekyll Permalinks</a>。</p>

<h2 id="section-6">侧边栏显示分类目录</h2>
<p>使用第三方插件 <a href="https://github.com/tokkonopapa/octopress-tagcloud">octopress-tagcloud</a>。</p>

<h2 id="section-7">友情链接</h2>
<p>在<code>source\_includes\custom\asides</code> 目录下添加一个blogroll.html文件，模仿about.html，添加一些友情链接，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="err">友情链接</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://coolshell.cn/&quot;</span><span class="o">&gt;</span><span class="err">酷壳</span><span class="nx">CoolShell</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://mindhacks.cn/&quot;</span><span class="o">&gt;</span><span class="err">刘未鹏</span><span class="nx">MIND</span> <span class="nx">HACKS</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://blog.codingnow.com/&quot;</span><span class="o">&gt;</span><span class="err">云风</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.cnblogs.com/Solstice/&quot;</span><span class="o">&gt;</span><span class="err">陈硕</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后在 _config.yml 文件中，在 default_asides 的数组中添加 <code>custom/asides/blogroll.html</code>。</p>

<h2 id="section-8">中文目录</h2>
<p>TODO</p>

<h2 id="section-9">修改字体</h2>
<p>Octopresss默认使用的是 google webfonts，见<code>source/_includes/custom/head.html</code>里的两行代码。Google Webfonts是个好东西，但遗憾的是它没有中文字体。所以你用<strong>粗体</strong>，发现并没有变粗，就是这个原因。</p>

<p>首先，将head.html中的两行代码注释掉，省去了加载字体，加快网页加载速度。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span><span class="nx">Fonts</span> <span class="nx">from</span> <span class="nx">Google</span><span class="s2">&quot;s Web font directory at http://google.com/webfonts --&gt;</span>
</span><span class="line"><span class="s2">&lt;!-- &lt;link href=&quot;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; --&gt;</span>
</span><span class="line"><span class="c">&lt;!--</span> <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic&quot;</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>参考 这篇博客 <a href="http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/">最佳 Web 中文默认字体</a>，在<code>sass/custom/_fonts.scss</code>中添加如下三行代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$heading</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span><span class="line"><span class="nx">$header</span><span class="o">-</span><span class="nx">title</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span><span class="line"><span class="nx">$header</span><span class="o">-</span><span class="nx">subtitle</span><span class="o">-</span><span class="nx">font</span><span class="o">-</span><span class="nx">family</span><span class="o">:</span> <span class="nx">arial</span><span class="p">,</span> <span class="nx">sans</span><span class="o">-</span><span class="nx">serif</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>刷新网页，可以看见中文的粗体变黑了。</p>

<h2 id="section-10">一些汉化工作</h2>
<p>在 _config.yml中，把 <code>Read on</code> 改为 “继续阅读”。
在 <code>source/_includes/custom/asides</code>目录下，将”Recent Comments”改为“最新评论”，”Categories”改为“分类目录”，将<code>source/_includes/asides/recent_posts.html</code>中”Recent Posts”改为“最新文章”。</p>

<h2 id="section-11">添加统计代码</h2>
<p>在_config.yml填入 Google Analytics Tracking ID，例如 <code>UA-7583537-4</code>。</p>

<h2 id="section-12">第三方主题和插件</h2>
<p>主题：<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a><br />
插件：<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd party plugins</a></p>

<h2 id="section-13">在一台新电脑上恢复</h2>
<p>如果换了一台电脑，怎样迅速恢复环境呢？参考 <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a>。 <strong>注意，在windows上，要首先安装python，否则，虽然所有操作可以成功，不报错误，但是你发现打开后首页一篇空白，我当时百思不得其解，因为没有任何错误信息，最后去看生成的文件，所有index.html都是0字节，就猜测应该是编译出了问题。安装python就好了，linux默认是有Python的，就没有这个问题，windows真是坑爹！以后只在windows下做编辑类的工作，编译和运行都放到Linux下。</strong></p>

<h2 id="todo">TODO</h2>
<p>修改字体大小</p>

<p>添加TAG支持</p>

<h2 id="section-14">参考资料</h2>
<ol>
  <li><a href="http://shanewfx.github.com/blog/2012/08/13/improve-blog-theme/">Octopress主题改造</a></li>
  <li></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用github + Octopress 搭建免费博客]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130401"/>
    <updated>2013-04-01T15:14:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-github-and-octoperss-to-create-a-free-blog</id>
    <content type="html"><![CDATA[<h3 id="section">前提条件</h3>
<p>注册一个github账号。</p>

<p>任何资料，都不如<a href="http://octopress.org/docs/">Octopress</a> 和<a href="https://help.github.com/categories/20/articles">Github Pages</a>的官方文档，建议首先阅读官方文档。</p>

<h3 id="github-pages">GitHub Pages快速体验</h3>
<p>在GitHub网站上，点击右上角的+号图标，创建一个新的Repo，Repository 的名字必须为 username.github.com。然后点击Settings进入该Repo的设置页面。看到”Automatic Page Generator”，说明这个Repo已经启用了GitHub Page。点击按钮进入设置。</p>

<p>在”Create a GitHub User Page”填写一些基本信息，点击右下角的”Continue to Layout”。布局就用默认的，点击绿色的”Publish”按钮。</p>

<p>大功告成，输入”username.github.com”，看到一个页面没？这就是你刚刚创建的一个页面。</p>

<!--more-->

<p>GitHub Pages分为两种类型，一种是”User and Org Pages”，一种是”Project Pages”。前者是用户的主页，一个用户仅有一个。后者是每个项目的主页。见github page官方的文档 <a href="https://help.github.com/articles/user-organization-and-project-pages">Creating Pages with the automatic generator</a>。</p>

<p>本文创建的是第一种类型。</p>

<p>这篇博客 <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 - 阮一峰的网络日志</a>  很通俗易懂，不过它创建的是第二种类型，在一个Repo上新建了一个branch，并命名为gh-pages。</p>

<p>下面正式开始折腾。</p>

<h3 id="msysgit">安装 msysgit并配置</h3>

<ul>
  <li>下载<a href="http://msysgit.github.com/">msysgit</a>, 然后双击exe文件开始安装。</li>
  <li>双击桌面图标Git Bash，启动一个shell，输入如下命令进行配置：</li>
</ul>

<p>产生公钥ssh key，默认全部回车</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh-keygen -C github-account-email -t rsa
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: username@email.com需要更换成你自己的在Github上注册的Email地址。
这样会在用户目录(C:\Documents and Settings\UserName)下产生一个.ssh文件夹，里面为对应的SSH Keys，其中id_rsa.pub是Github需要的SSH公钥文件。</p>

<p>在Github的Account Settings里选择SSH Keys，在其中将id_rsa.pub文件里内容拷贝至 其中的Key里。</p>

<p>这样以后就可以直接使用Git和GitHub了。  </p>

<p>测试一下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh -T git@github.com
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果出现 hi xxx! You’ve successfully authenticated, bug GitHub does not povide shell access。说明SSH链接成功。</p>

<p>接下来配置其他信息。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git config --global user.name github-username
</span><span class="line">git config --global user.email github-account-email
</span><span class="line">git config --global github.user github-username
</span><span class="line">git config --global credential.helper cache
</span><span class="line">git config --global credential.helper <span class="s1">&#39;cache --timeout=3600&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>本节参考了 <a href="http://www.cnblogs.com/kysnail/archive/2012/03/16/2399589.html">msysGit 安装后的配置</a>。</p>

<h3 id="repo">克隆Repo到本地</h3>
<p>在D盘新建一个文件夹，例如github。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>d:<span class="se">\g</span>ithub
</span><span class="line">git clone git@github.com:username/username.github.com.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="octopress">安装Octopress</h3>
<p>参考官方文档<a href="http://octopress.org/docs/setup/">setup</a>.<br />
<strong>安装Ruby</strong><br />
Octopress 2.0 需要 Ruby 1.9.3，安装其他版本的Ruby可能会行不通。</p>

<p>如果是Linux，使用RVM来安装Ruby，如果是Windows，则使用<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>。在这个<a href="http://rubyinstaller.org/downloads/">下载页面</a>下载Ruby 1.9.3-p392和DevKit(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe)，双击exe文件进行安装。<br />
<strong>安装DevKit</strong><br />
双击DevKit的exe文件，解压到C:\DevKit，在CMD下执行如下命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>C:<span class="se">\D</span>evKit
</span><span class="line">ruby dk.rb init
</span><span class="line">ruby dk.rb install
</span><span class="line">gem install rdiscount --platform<span class="o">=</span>ruby
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>安装Octopress</strong><br />
下载Octopress。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>d:<span class="se">\g</span>ithub
</span><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line"><span class="nb">cd </span>octopress
</span><span class="line">ruby --version  <span class="c"># Should report Ruby 1.9.3</span>
</span><span class="line">rbenv rehash  <span class="c"># 可选，如果安装了rbenv，就需要执行这一步</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>注意</strong>: rubygems.org在中国的下载速度很慢，会导致bundle install这一步下载gems的速度很慢，可能需要等待几个小时。因此需要事先切换到国内的镜像源。</p>

<p>用记事本打开octopress目录下的Gemfile，将第一行修改为</p>

<blockquote>
  <p>source “http://ruby.taobao.org”</p>
</blockquote>

<p>然后可以开始安装依赖的gems了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常的话应该可以看到一行行的Installing xxx，表示正在安装所需要的gem。</p>

<p>安装默认的Octopress主题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果这一步出现问题，则试一下 bundle update再执行 rake install。</p>

<h3 id="github">部署到GitHub</h3>
<p>将Octopress和自己的Repo关联起来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake setup_github_pages
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>编译生成JeKyll所需要的静态文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个命令主要是根据source目录的内容，编译生成JeKyll所需要的静态文件，存放到public目录下。source 目录对应着git上的source分支。</p>

<p><strong>UTF-8 编码</strong><br />
Windows预设是Big5编码,所以要想’rake generate’的时候不报编码错误,我们需要设置一下编码! 方法有两个,一个是直接在Git Bash中设置环境:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">set </span><span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span><span class="line"><span class="nb">set </span><span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还有一个是在环境变量中加入这两个变量: 右击电脑-&gt;属性，新添加LANG和LC_ALL两个环境变量，值为为zh_CN.UTF-8.</p>

<p>然后在Git Bash中做如下设置:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;export LANG LC_ALL&quot;</span> &gt; ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>预览</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a>，就可以看到效果了。</p>

<p>部署到github</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>该命令首先清空_deploy目录，然后将public目录整个拷贝过来，然后commit到github。_deploy 目录对应着master分支。</p>

<p>备份source到github</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>source 目录下保存了所有的markdown源文件，是博客的原始数据，以及一些模板文件。因此很有必要备份。用上述命令提交到github，这样就用git管理起来了，再也不用担心数据丢失了。</p>

<p><strong>终止预览</strong><br />
启用<code>rake preview</code>后，直接按<code>ctrl+c</code>无法正常终止该进程，老提示<code>终止批处理操作吗（Y/N）？</code>，这时候可以另开一个Git Bash窗口，使用<code>ps aux | grep ruby</code>命令找出<code>pid(第一个数值)</code>，然后执行<code>kill &lt;pid&gt;</code>来停止该进程(参考<a href="http://linuxabc.heroku.com/blog/octopress-on-heroku-2">octopress on heroku (二)</a>)。  </p>

<h3 id="section-1">绑定域名</h3>
<p>参考官方文档<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>。</p>

<p>非常简单，在master分支的根目录，添加一个文本文件，名字为CNAME，里面的内容就是要绑定的域名，例如本博客CNAME文件的内容是：</p>

<blockquote>
  <p>www.yanjiuyanjiu.com</p>
</blockquote>

<p>然后去DNSPod，添加一条CNAME，指向 username.github.com。例如我的为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">www	CNAME	默认	soulmachine.github.com.		-	600
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很多人喜欢去掉www，用xxx.com的形式来访问，不过大家去试一下，在浏览器输入qq.com, douban.com, baidu.com，发现都会自动跳转到www，也就是说这些大网站，目前也是用www.example.com的域名为主，因此建议大家也这样做。</p>

<p>用www, blog之类的二级域名，还有个好处是方便升级，比如新版本用www1指向，等测试完成后，改成www指向，无缝切换。</p>

<p>如何让example.com 自动变成www.example.com呢？需要用 301重定向，在DNSPod上非常简单，添加一条显性URL即可，例如我的是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">@	显性URL	默认	http://www.yanjiuyanjiu.com	-	600
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在使用Octopress的时候，每次<code>rake generate</code>, <code>rake deploy</code>后，master分支下面的CNAME文件消失了。正确的做法是，把CNAME文件放到在 source 目录下，其余的都删掉，<code>rake generate</code> 会自动拷贝到public目录下，<code>rake deploy</code>再拷贝public目录内容到_deploy目录，并提交到master分支。</p>

<h3 id="section-2">参考资料</h3>
<ol>
  <li><a href="http://corey600.github.com/blog/2013/02/28/use-github-and-octopress-create-blog/">【原创】用Github和Octopress搭建博客</a></li>
  <li><a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">试用Octopress</a></li>
  <li><a href="http://rubyer.me/blog/134/">windows下安装DevKit</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/12/21/recover-octopress/">在新Windows系统中重新部署Octopress</a></li>
  <li><a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a></li>
  <li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习的一些通俗易懂的tutorial]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130327"/>
    <updated>2013-03-27T21:50:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/some-classical-machine-learning-tutorials</id>
    <content type="html"><![CDATA[<p>以下记录了我的学习历程，按我的阅读顺序排序。</p>

<h2 id="section">距离和相似度度量</h2>
<p><a href="http://webdataanalysis.net/reference-and-source/distance-and-similarity/">距离和相似度度量 » webdataanalysis.net</a></p>

<p><a href="http://www.zhihu.com/question/19640394">欧氏距离和余弦相似度的区别是什么？ – 知乎</a></p>

<h2 id="knnk-nearest-neighbor">KNN(K Nearest Neighbor)</h2>
<p><a href="http://coolshell.cn/articles/8052.html">K Nearest Neighbor 算法 _ 酷壳 – CoolShell</a></p>

<p><a href="http://en.wikipedia.org/wiki/KNN">K-nearest neighbors algorithm – Wikipedia</a></p>

<h2 id="k-means">K-Means</h2>
<p><a href="http://coolshell.cn/articles/7779.html">K-Means 算法 _ 酷壳 – CoolShell</a></p>

<p><a href="http://en.wikipedia.org/wiki/K-means">k-means clustering – Wikipedia</a></p>

<p><a href="http://kylen314.blog.com/2012/09/10/k-means/">K-Means++ _ 愈宅屋</a></p>

<p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html">算法杂货铺——k均值聚类(K-means) – T2噬菌体 – 博客园</a></p>

<p><a href="http://blog.pluskid.org/?p=17">漫谈 Clustering (1)_ k-means « Free Mind</a></p>

<p><a href="http://www.codeproject.com/Articles/439890/Text-Documents-Clustering-using-K-Means-Algorithm">Text Documents Clustering using K-Means Algorithm – CodeProject</a></p>

<!-- more -->

<h2 id="pcaprincipal-components-analysis">PCA(Principal Components Analysis)</h2>
<p><a href="http://www.ce.yildiz.edu.tr/personal/songul/file/1097/principal_components.pdf">2002. Lindsay I Smith. A tutorial on Principal Components Analysis</a></p>

<h2 id="em-expectation-maximization">期望最大化(EM, Expectation Maximization)</h2>
<p><a href="http://www.seanborman.com/publications/EM_algorithm.pdf">2009. Sean Borman. The Expectation Maximization Algorithm A short tutorial</a></p>

<p>李航.《统计学习方法》，P155 第9章 EM算法及其推广. 2012.</p>

<h2 id="svm-support-vector-machines">支持向量机(SVM, Support Vector Machines)</h2>
<p><a href="http://cs229.stanford.edu/notes/cs229-notes3.pdf">Andrew Ng. CS229 Lecture notes Support Vector Machines</a></p>

<h2 id="crf-conditional-random-field">条件随机场(CRF, Conditional Random Field)</h2>
<p><a href="http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/">Introduction to Conditional Random Fields</a></p>

<p>李航.《统计学习方法》，P192 第11章 条件随机场. 2012.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些主流的编程竞赛网站]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130322"/>
    <updated>2013-03-22T21:57:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/some-popular-programming-contest-websites</id>
    <content type="html"><![CDATA[<p>今天把各个主流的编程网站仔细对比了一下，下面从各个角度对比一下这些编程竞赛网站。</p>

<h2 id="section">分类和排名</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="94">
<p><a name="OLE_LINK30"></a><a name="OLE_LINK1"><b>网站地址</b></a></p>
</td>
<td valign="top" width="57">
<p><b>类别</b></p>
</td>
<td valign="top" width="38">
<p><b>PR</b></p>
</td>
<td valign="top" width="60">
<p><b>ATR</b></p>
</td>
<td valign="top" width="44">
<p><b>QF</b></p>
</td>
<td valign="top" width="151">
<p><b>主办方</b></p>
</td>
<td valign="top" width="47">
<p><b>备注</b></p>
</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a name="_Hlk352791085"></a><a href="http://www.topcoder.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.topcoder.com']);">TopCoder </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>33,586</p>
</td>
<td valign="top" width="44">
<p>4167</p>
</td>
<td valign="top" width="151">
<p>TopCoder公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.codechef.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">CodeChef </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>41,217</p>
</td>
<td valign="top" width="44">
<p>5758</p>
</td>
<td valign="top" width="151">
<p>Directi公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://codeforces.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">CodeForces </a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>73,012</p>
</td>
<td valign="top" width="44">
<p>599</p>
</td>
<td valign="top" width="151">
<p>CodeForces公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.spoj.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.spoj.com']);">SPOJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>3</p>
</td>
<td valign="top" width="60">
<p>75,653</p>
</td>
<td valign="top" width="44">
<p>1520</p>
</td>
<td valign="top" width="151">
<p>Sphere Research Labs</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://poj.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://poj.org']);">POJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>7</p>
</td>
<td valign="top" width="60">
<p>364,925</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>北京大学</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://acm.zju.edu.cn" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://acm.zju.edu.cn']);">ZOJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>N/A</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>浙江大学</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://uva.onlinejudge.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://uva.onlinejudge.org']);">UVA OJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>166,991</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>University of Virginia</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://acm.sgu.ru/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://acm.sgu.ru']);">SGU OJ</a></p>
</td>
<td valign="top" width="57">
<p>ACM</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>194,881</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>Saratov State University</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="https://www.hackerrank.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.hackerrank.com']);">HackerRank</a></p>
</td>
<td valign="top" width="57">
<p>综合</p>
</td>
<td valign="top" width="38">
<p>5</p>
</td>
<td valign="top" width="60">
<p>126,192</p>
</td>
<td valign="top" width="44">
<p>56</p>
</td>
<td valign="top" width="151">
<p>InterviewStreet公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://projecteuler.net/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://projecteuler.net']);">Project Euler</a></p>
</td>
<td valign="top" width="57">
<p>数学</p>
</td>
<td valign="top" width="38">
<p>6</p>
</td>
<td valign="top" width="60">
<p>53,854</p>
</td>
<td valign="top" width="44">
<p>428</p>
</td>
<td valign="top" width="151">
<p>Project Euler公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://www.careercup.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.careercup.com']);">CareerUp</a></p>
</td>
<td valign="top" width="57">
<p>面试</p>
</td>
<td valign="top" width="38">
<p>4</p>
</td>
<td valign="top" width="60">
<p>51,089</p>
</td>
<td valign="top" width="44">
<p>654</p>
</td>
<td valign="top" width="151">
<p>CareerUp公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="94">
<p><a href="http://leetcode.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://leetcode.com']);">LeetCode</a></p>
</td>
<td valign="top" width="57">
<p>面试</p>
</td>
<td valign="top" width="38">
<p>4</p>
</td>
<td valign="top" width="60">
<p>188,196</p>
</td>
<td valign="top" width="44">
<p>N/A</p>
</td>
<td valign="top" width="151">
<p>LeetCode公司</p>
</td>
<td valign="top" width="47">&nbsp;</td>
</tr>
</tbody>
</table>

<p>说明：PR是Google PageRank的缩写；ATR是Alexa Trafic Rank的缩写，即Alexa排名；QF是Quora Followers的缩写，具体含义是在Quora上关于某Topic的follower数量，例如<a href="http://www.quora.com/CodeChef">CodeChef的topic</a> 有5758个followers。</p>

<!-- more -->

<h2 id="section-1">支持的语言</h2>
<table cellspacing="0" cellpadding="0" border="1">
<tbody>
<tr>
<td valign="top" width="72"><strong>网站</strong>
<p><strong>语言</strong></p>
</td>
<td valign="top" width="79"><strong>TopCoder</strong></td>
<td valign="top" width="47"><strong>CodeChef</strong></td>
<td valign="top" width="57"><strong>CodeForces</strong></td>
<td valign="top" width="47"><strong>SPOJ</strong></td>
<td valign="top" width="38"><strong>POJ</strong></td>
<td valign="top" width="47"><strong>ZOJ</strong></td>
<td valign="top" width="47"><strong>UVA OJ</strong></td>
<td valign="top" width="47"><strong>SGU OJ</strong></td>
<td valign="top" width="57"><strong>HackerRank</strong></td>
<td valign="top" width="57"><strong>Project Euler</strong></td>
</tr>
<tr>
<td valign="top" width="72">Java</td>
<td valign="top" width="79"><a name="OLE_LINK5"></a><a name="OLE_LINK3"></a>√</td>
<td valign="top" width="47">√<strong></strong></td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">不</td>
</tr>
<tr>
<td valign="top" width="72">C</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">限</td>
</tr>
<tr>
<td valign="top" width="72">C++</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47"><a name="OLE_LINK19"></a><a name="OLE_LINK18"></a>√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">语</td>
</tr>
<tr>
<td valign="top" width="72">Pascal</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">言</td>
</tr>
<tr>
<td valign="top" width="72">Fortran</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK9"></a><a name="OLE_LINK8"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47"><a name="OLE_LINK21"></a><a name="OLE_LINK20"></a>√</td>
<td valign="top" width="38">√</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57"><a name="OLE_LINK7"></a><a name="OLE_LINK6"></a>×</td>
<td valign="top" width="57">，</td>
</tr>
<tr>
<td valign="top" width="72">Obj-C</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">只</td>
</tr>
<tr>
<td valign="top" width="72">C#</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">需</td>
</tr>
<tr>
<td valign="top" width="72">Python 2</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">提</td>
</tr>
<tr>
<td valign="top" width="72">Python 3</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">交</td>
</tr>
<tr>
<td valign="top" width="72">Ruby</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">答</td>
</tr>
<tr>
<td valign="top" width="72">JavaScript</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">案</td>
</tr>
<tr>
<td valign="top" width="72">PHP</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK11"></a><a name="OLE_LINK10"></a>√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">VB</td>
<td valign="top" width="79">√</td>
<td valign="top" width="47"><a name="OLE_LINK28"></a><a name="OLE_LINK12"></a>×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Perl</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47"><a name="OLE_LINK22"></a>√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Go</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Scala</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Groovy</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Erlang</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57"><a name="OLE_LINK15"></a>×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Lua</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">D</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Fortran</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57"><a name="OLE_LINK4"></a>×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">CommonLisp</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47"><a name="OLE_LINK26"></a><a name="OLE_LINK25"></a>×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Clojure</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK14"></a><a name="OLE_LINK13"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Scheme</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">Haskell</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38"><a name="OLE_LINK24"></a><a name="OLE_LINK23"></a>×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">OCaml</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="57">√</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">√</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="72">其他</td>
<td valign="top" width="79">×</td>
<td valign="top" width="47"><a name="OLE_LINK17"></a><a name="OLE_LINK16"></a>√</td>
<td valign="top" width="57">×</td>
<td valign="top" width="47">√</td>
<td valign="top" width="38">×</td>
<td valign="top" width="47">×</td>
<td valign="top" width="47">&nbsp;</td>
<td valign="top" width="47">×</td>
<td valign="top" width="57">×</td>
<td valign="top" width="57">&nbsp;</td>
</tr>
</tbody>
</table>

<h2 id="section-2">大牛在哪里玩</h2>
<p><a href="http://www.codechef.com/long/ranklist/AX/?page=0">CodeChef的Long Consest 排名榜</a><br />
<a href="http://codeforces.com/ratings">CodeForces的排名榜</a></p>

<p>看看一些神牛在哪些编程网站上玩。</p>

<table cellspacing="0" cellpadding="0" border="1">
<tbody>
<tr>
<td valign="top" width="98">
<p><strong>大牛名字</strong></p>
</td>
<td valign="top" width="393">
<p><strong>在哪些网站活动</strong></p>
</td>
<td valign="top" width="100">
<p><strong>结论</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>清华 楼天城 ACRush</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=19849563" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=19849563</a> 最后活动日期14/03/13</p>
<p><a href="http://www.codechef.com/users/ACRush21" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/ACRush21</a> long contest排名第一</p>
<p><a href="http://codeforces.com/profile/ACRush" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/ACRush</a> 排名18 </p>
</td>
<td valign="top" width="100">
<p>楼教主在TopCoder, CodeChef, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 petr</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;tab=alg&amp;cr=10574855" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;tab=alg&amp;cr=10574855</a></p>
<p><a href="http://www.codechef.com/users/petr" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/petr</a> N/A</p>
<p><a href="http://codeforces.com/profile/Petr" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/Petr</a> 排名第三</p>
</td>
<td valign="top" width="100">
<p>Petr主要在TopCoder, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>波兰 tomek</p>
<p>现在Google工作</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=144400" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=144400</a></p>
<p><a href="http://www.codechef.com/users/tomek" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/tomek</a> long contest排名第六</p>
<p><a href="http://codeforces.com/profile/tomek" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/tomek</a> N/A</p>
</td>
<td valign="top" width="100">
<p>Tomek主要在TopCoder, codechef玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 Egor</p>
</td>
<td valign="top" width="393">
<p><a href="http://community.topcoder.com/tc?module=MemberProfile&amp;cr=14970299" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://community.topcoder.com']);">http://community.topcoder.com/tc?module=MemberProfile&amp;cr=14970299</a></p>
<p><a href="http://www.codechef.com/users/Egor" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/users/Egor</a> N/A</p>
<p><a href="http://codeforces.com/profile/Egor" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://codeforces.com']);">http://codeforces.com/profile/Egor</a> 排名第七</p>
</td>
<td valign="top" width="100">
<p>Egor主要在TopCoder, CodeForces玩</p>
</td>
</tr>
<tr>
<td valign="top" width="98">
<p>俄罗斯 Tourist</p>
<p>高三学生</p>
</td>
<td valign="top" width="393">
<p><a href="http://www.codechef.com/teams/view/tourist" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codechef.com']);">http://www.codechef.com/teams/view/tourist</a> N/A</p>
<p><a href="http://www.codeforces.com/profile/tourist" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.codeforces.com']);">http://www.codeforces.com/profile/tourist</a> 排名第一</p>
</td>
<td valign="top" width="100">
<p>少年天才，主要在CodeForces玩</p>
</td>
</tr>
</tbody>
</table>

<p>由于CodeForcess是俄罗斯的网站，所以俄罗斯选手几乎全部在CodeForces上玩，例如Petr, Egor, Tourist都是俄罗斯人，都在CodeForces上。
也可以发现，神牛大部分来自俄罗斯，大家或许也会联想到，俄罗斯出数学家和计算机黑客，的确如此。像楼教主，Petr属于老牌的霸主，近两年出现一个天才少年tourist，才高三，竟然在CodeForces上力压Petr，真是逆天的存在。Quora上有个问题How does it feel to beat Petr Mitrichev, Egor, ACRush in SRM? 最佳答案 It feels a lot like being Tourist. 既幽默又霸气。</p>

<h2 id="section-3">大牛们使用什么语言？</h2>
<p>来看一下高手提交的代码列表：<br />
<a href="http://codeforces.com/submissions/ACRush">http://codeforces.com/submissions/ACRush</a><br />
<a href="http://codeforces.com/submissions/Petr">http://codeforces.com/submissions/Petr</a><br />
<a href="http://codeforces.com/submissions/Egor">http://codeforces.com/submissions/Egor</a><br />
<a href="http://www.codeforces.com/submissions/tourist">http://www.codeforces.com/submissions/tourist</a></p>

<p>可以看出ACRush和Tourist使用C++，Petr和Egor使用Java。从我的亲身经验，周围参加ACM的同学大部分用C++。不过，注意一点，大部分人认为Java慢，这在五六年前是对的，但是到了在现在，JVM经过各大IT巨头的重金打造，性能已经跟C++一样持平了，至少不再有数量级上的差距。因此Java也是一个很好地选择。</p>

<h2 id="section-4">更新历史</h2>
<p>2013-04-06，从 <a href="http://blog.liancheng.info/job-hunting-in-california/">加州求职记</a> 得知了两个专门针对面试的新兴网站，<a href="http://www.careercup.com/">CareerCup</a> 和 <a href="http://leetcode.com/onlinejudge">LeetCode</a>，跟 InterviewStreet 很类似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数值计算库与科学计算库]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130226"/>
    <updated>2013-02-26T23:15:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/numerical-or-scientific-computation-library</id>
    <content type="html"><![CDATA[<h2 id="blas-">BLAS 接口</h2>
<p><a href="http://www.netlib.org/blas/">BLAS</a>, <a href="http://www.netlib.org/lapack/">LAPACK</a>, <a href="http://math-atlas.sourceforge.net/">ATLAS</a> 这些数值计算库的名字很类似，他们之间有什么关系呢？BLAS是一组线性代数运算接口，目前是事实上的标准，很多数值计算/科学计算都实现了这套接口。</p>

<p>BLAS定义了那些函数呢？可以查看<a href="http://www.netlib.org/blas/">官方文档</a>。</p>

<p>LAPACK是BLAS的第一个实现，是最老牌的数值计算库，用FORTRAN 77语言写的。LAPACK实现了BLAS接口，并扩充了一些功能。很多数值计算库/科学计算库底层调用了LAPACK。</p>

<p>很多硬件厂商都实现BLAS接口，例如<a href="http://software.intel.com/en-us/intel-mkl">Intel MKL</a>(Math Kernel Library), <a href="http://developer.amd.com/tools/cpu-development/amd-core-math-library-acml/">AMCL</a>(AMD Math Core Library)等。很多开源库也支持，例如ATLAS。</p>

<p>还有非常多的库实现了BLAS接口，见<a href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">Wikipedia BLAS</a> 的Implementations小节。</p>

<p>下面介绍一些各种语言常用的数值计算/科学计算库。</p>

<!-- more -->

<h2 id="cc">C/C++</h2>
<p>首先是Intel 的MKL 和 AMD 的AMCL，性能一流，不过是商业软件，价格昂贵。</p>

<p><a href="http://www.gnu.org/software/gsl/">GSL - GNU Scientific Library</a>，GNU实现的库，质量很高，不过是用纯C写的，用起来比较繁琐。</p>

<p><a href="http://arma.sourceforge.net/">Armadillo</a>，最新版 2013-02-20 Version 3.6.3</p>

<p><a href="http://itpp.sourceforge.net/">IT++</a>，最后版本是4.2,2010-09-21。</p>

<h2 id="java">Java</h2>
<p>这个页面<a href="http://math.nist.gov/javanumerics/">JavaNumerics page</a>专门收集了关于Java数值计算的库。</p>

<p><a href="https://code.google.com/p/java-matrix-benchmark/">java-matrix-benchmark</a>这个开源项目，比较了各类Java线性代数库的性能。</p>

<p>Java的数值计算库主要分为两类：Pure Java和Natie Wrapper。Pure Java是指用纯Java编写的，Native Wrapper是指该库底层调用了C++或Fortan编写的第三方库，上面封装了一层，提供了更有好的接口。</p>

<p>Pure Java的有：<a href="http://dsd.lbl.gov/~hoschek/colt/">Colt</a>, <a href="http://commons.apache.org/proper/commons-math/">Commons Math</a>, <a href="https://code.google.com/p/efficient-java-matrix-library/">EJML</a>, <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>, <a href="http://trove.starlight-systems.com/">Trove</a></p>

<p>Native Wrapper有：<a href="http://jblas.org">jblas</a>，<a href="https://github.com/fommil/matrix-toolkits-java">Matrix Toolkit Java</a></p>

<p>下面介绍一些影响力较大的java数值计算/科学计算库。</p>

<p><a href="http://commons.apache.org/proper/commons-math/">Commons Math</a>, 最新版本是3.1.1,2013年1月9号发布。这个库提供一些基本的数学运算，没有high-level的东西，例如矩阵，向量等，用起来会比较繁琐。</p>

<p><a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>, 最新版是Version 1.0.3 (November 9, 2012)。</p>

<p><a href="http://acs.lbl.gov/software/colt/">Colt</a>，已经不更新了，最后版本是1.2.0，2004年9月发布的。</p>

<p>Apache Mahout使用了Colt作为high performance collections，见官方<a href="https://cwiki.apache.org/MAHOUT/mahout-collections.html">这个页面</a>，说“The implementation of Mahout Collections is derived from Cern Colt”，以及quora 这个帖子<a href="http://www.quora.com/Distributed-Algorithms/What-are-the-best-resources-for-distributed-numerical-analysis-matrix-algorithms">What are the best resources for distributed numerical analysis/matrix algorithms</a>。</p>

<h2 id="python">Python</h2>
<p>目前最有影响力的莫过于<a href="http://www.numpy.org/">NumPy</a>和<a href="http://www.scipy.org/">SciPy</a>。Amazon.com上可以搜到专门讲它们的书。</p>

<p>SciPy依赖NumPy，主要是在数值计算方面调用了NumPy。</p>

<h2 id="ruby">Ruby</h2>
<p><a href="http://sciruby.com/">SciRuby</a>, 是SciPy和NumPy的克隆，目前还在开发中。</p>

<h2 id="r">R</h2>
<p>R刚开始时是统计学家开发的语言，专门用于数理统计，现在功能不断增强，内置了很多数值计算和科学计算的功能。R在数据分析领域比较火。</p>

<h2 id="scala">Scala</h2>
<p>目前用google搜索 “scala numerical computing”，能找得到的就是<a href="http://code.google.com/p/scalalab/">ScalaLab</a>了。</p>

<h2 id="matlab">Matlab</h2>
<p>最后，别忘了Matlab是支持多语言调用的。</p>

<p>可以用Matlab生成DLL，给C/C++语言调用。其实，凡是能调用DLL的语言，都可以使用这个DLL，例如Python, Ruby等。</p>

<p>可以用<a href="http://www.mathworks.cn/products/javabuilder/">Matlab JavaBuilder</a>将m文件转换为jar文件，然后在java代码中就可以调用了。</p>

<h2 id="section">如何选择</h2>
<p>本文的重点在于选择一个高性能，同时又比较易用的库，即被让我们调用，用来写程序的库，不是一个集成环境或REPL环境。因此R和Matlab不在讨论范围内。R和Matlab用来做原型或前期Data Exploration比较适合。</p>

<p>选择一个工具（语言，框架，库等），要看其是否成熟。我个人的一些判断指标，主要有</p>

<ol>
  <li>有没有大厂商的支持（作为vendor之类的）；</li>
  <li>amazon.com上能否搜到书。</li>
</ol>

<p>从厂商的支持来看，几个主要的大厂商如 Intel，AMD和Apple都开发了自己的数学库。Python则有很成熟的NumPy，在Amazon上能搜到书，例如“SciPy and NumPy”， “NumPy Cookbook”。 因此，目前来看，C++和Python是比较成熟的方案。</p>

<h2 id="section-1">参考资料</h2>
<p><a href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">Wikipedia BLAS</a><br />
<a href="http://en.wikipedia.org/wiki/LAPACK">Wikipedia LAPACK</a><br />
<a href="http://blog.henix.info/blog/blas-lapack-do-matrix-operation.html">用 BLAS/LAPACK 编写矩阵运算程序</a><br />
<a href="https://wikis.utexas.edu/display/~cdupree/BLAS,+LAPACK,+ATLAS">BLAS, LAPACK, ATLAS</a><br />
<a href="http://hi.baidu.com/luckykele2012/item/6a3b25423018c40d6dc2f090">BLAS 和 LAPACK ，以及其他常用数值计算库</a><br />
<a href="http://fdatamining.blogspot.com/2011/10/any-numerical-computing-environment-on.html">Any numerical computing environment on Java platform</a><br />
<a href="http://www.myoutsourcedbrain.com/2009/04/c-libraries-for-numerical-processing.html">C++ Libraries for Scientific Computing</a><br />
<a href="http://stackoverflow.com/questions/3121139/scientific-library-options-for-c-or-c">Scientific Library Options for C or C++</a><br />
<a href="http://programmers.stackexchange.com/questions/138643/why-is-python-used-for-high-performance-scientific-computing-but-ruby-isnt">Why is Python used for high-performance/scientific computing (but Ruby isn’t)?</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KNN与K-Means的区别]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130225"/>
    <updated>2013-02-25T23:41:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/differences-between-knn-and-kmeans</id>
    <content type="html"><![CDATA[<h2 id="knnk-nearest-neighbor">KNN(K-Nearest Neighbor)介绍</h2>
<p>Wikipedia上的<a href="http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm">KNN词条</a>中有一个比较经典的图如下：</p>

<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans1.png" /></p>

<p>KNN的算法过程是是这样的：</p>

<p>从上图中我们可以看到，图中的数据集是良好的数据，即都打好了label，一类是蓝色的正方形，一类是红色的三角形，那个绿色的圆形是我们待分类的数据。</p>

<p>如果K=3，那么离绿色点最近的有2个红色三角形和1个蓝色的正方形，这3个点投票，于是绿色的这个待分类点属于红色的三角形。</p>

<p>如果K=5，那么离绿色点最近的有2个红色三角形和3个蓝色的正方形，这5个点投票，于是绿色的这个待分类点属于蓝色的正方形。（参考 <a href="http://coolshell.cn/articles/8052.html">酷壳的 K Nearest Neighbor 算法</a>）</p>

<p>我们可以看到，KNN本质是基于一种数据统计的方法！其实很多机器学习算法也是基于数据统计的。</p>

<!-- more -->

<p>KNN是一种memory-based learning，也叫instance-based learning，属于lazy learning。即它没有明显的前期训练过程，而是程序开始运行时，把数据集加载到内存后，不需要进行训练，就可以开始分类了。</p>

<p>具体是每次来一个未知的样本点，就在附近找K个最近的点进行投票。</p>

<p>再举一个例子，Locally weighted regression (LWR)也是一种 memory-based 方法，如下图所示的数据集。</p>

<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans2.gif" /></p>

<p>用任何一条直线来模拟这个数据集都是不行的，因为这个数据集看起来不像是一条直线。但是每个局部范围内的数据点，可以认为在一条直线上。每次来了一个位置样本x，我们在X轴上以该数据样本为中心，左右各找几个点，把这几个样本点进行线性回归，算出一条局部的直线，然后把位置样本x代入这条直线，就算出了对应的y，完成了一次线性回归。</p>

<p>也就是每次来一个数据点，都要训练一条局部直线，也即训练一次，就用一次。</p>

<p>LWR和KNN是不是很像？都是为位置数据量身定制，在局部进行训练。</p>

<h2 id="k-means">K-Means介绍</h2>
<p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2013/02/022513_0955_KNNKMeans3.jpg" /></p>

<p>如图所示，数据样本用圆点表示，每个簇的中心点用叉叉表示。(a)刚开始时是原始数据，杂乱无章，没有label，看起来都一样，都是绿色的。(b)假设数据集可以分为两类，令K=2，随机在坐标上选两个点，作为两个类的中心点。(c-f)演示了聚类的两种迭代。先划分，把每个数据样本划分到最近的中心点那一簇；划分完后，更新每个簇的中心，即把该簇的所有数据点的坐标加起来去平均值。这样不断进行”划分—更新—划分—更新”，直到每个簇的中心不在移动为止。(图文来自Andrew ng的机器学习公开课)。</p>

<p>推荐关于K-Means的两篇博文，<a href="http://coolshell.cn/articles/7779.html">K-Means 算法 _ 酷壳</a>，<a href="http://blog.pluskid.org/?p=17">漫谈 Clustering (1)_ k-means pluskid</a>。</p>

<h2 id="knnk-means">KNN和K-Means的区别</h2>
<table style="border-collapse: collapse;" border="0">
<colgroup>
<col style="width: 277px;" />
<col style="width: 277px;" /></colgroup>
<tbody valign="top">
<tr>
<td style="padding-left: 7px; padding-right: 7px; border: solid 0.5pt;">
<p style="text-align: center;"><span style="font-size: 10pt;"><strong>KNN</strong></span></p>
</td>
<td style="padding-left: 7px; padding-right: 7px; border-top: solid 0.5pt; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;">
<p style="text-align: center;"><span style="font-size: 10pt;"><strong>K-Means</strong></span></p>
</td>
</tr>
<tr style="height: 85px;">
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">1.KNN是分类算法<br />
</span><p></p>
<p><span style="font-size: 10pt;">2.监督学习<br />
</span></p>
<p style="text-align: justify;"><span style="font-size: 10pt;">3.喂给它的数据集是带label的数据，已经是完全正确的数据</span></p>
</td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">1.K-Means是聚类算法<br />
</span><p></p>
<p><span style="font-size: 10pt;">2.非监督学习<br />
</span></p>
<p style="text-align: justify;"><span style="font-size: 10pt;">3.喂给它的数据集是无label的数据，是杂乱无章的，经过聚类后才变得有点顺序，先无序，后有序</span></p>
</td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">没有明显的前期训练过程，属于memory-based learning</span></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">有明显的前期训练过程</span></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">K的含义：来了一个样本x，要给它分类，即求出它的y，就从数据集中，在x附近找离它最近的K个数据点，这K个数据点，类别c占的个数最多，就把x的label设为c</span></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"><span style="font-size: 10pt;">K的含义：K是人工固定好的数字，假设数据集合可以分为K个簇，由于是依靠人工定好，需要一点先验知识</span></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"></td>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: none; border-bottom: solid 0.5pt; border-right: solid 0.5pt;"></td>
</tr>
<tr>
<td style="padding-left: 7px; padding-right: 7px; border-top: none; border-left: solid 0.5pt; border-bottom: solid 0.5pt; border-right: solid 0.5pt;" colspan="2"><span style="font-size: 10pt;">相似点：都包含这样的过程，给定一个点，在数据集中找离它最近的点。即二者都用到了NN(Nears Neighbor)算法，一般用KD树来实现NN。</span></td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VisualVM连接 tomcat 服务器时，如何配置tomcat启动JMX]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120811"/>
    <updated>2012-08-11T21:37:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/configure-tomcat-jmx-to-allow-visualvm-connect-tomcat</id>
    <content type="html"><![CDATA[<p>用VisualVM连接 tomcat 服务器时，需要让tomcat启动JMX，在catalina.sh 中添加一行代码即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">JAVA_OPTS</span><span class="o">=</span>”<span class="nv">$JAVA_OPTS</span> -Djava.rmi.server.hostname<span class="o">=</span>192.168.0.123 -Dcom.sun.management.jmxremote<span class="o">=</span><span class="nb">true</span> -Dcom.sun.management.jmxremote.port<span class="o">=</span>8086 -Dcom.sun.management.jmxremote.ssl<span class="o">=</span><span class="nb">false</span> -Dcom.sun.management.jmxremote.authenticate<span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意，用hostname -i 查看是否为127.0.01，这步非常重要,否则会连接失败，如果是，必须要配置-Djava.rmi.server.hostname。</p>

<p>参考： <br />
<a href="http://blog.tty.nl/2010/09/03/using-visualvm-to-fix-live-tomcat-and-jvm-problems/">Using VisualVM to fix live Tomcat and JVM problems</a><br />
<a href="http://blog.csdn.net/linghunhong/article/details/6438572">JVM内存监控:visualVM jconsole jstatd jmap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装和配置CentOS服务器的详细步骤]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120423"/>
    <updated>2012-04-23T20:43:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/install-and-configure-a-centos-server-from-scratch</id>
    <content type="html"><![CDATA[<p>这是我安装CentOS服务器的过程，记录下来，与大家一起分享。</p>

<h2 id="section">安装操作系统</h2>
<p>CentOS 6.2 ，CentOS-6.2-i386-bin-DVD1.iso（32位） ，CentOS-6.2-x86_64-bin-DVD1.iso（64位）</p>

<p>安装 CentOS时，选择 “Basic Server”<br />
root密码：root123<br />
CentOS 自带了ssh  </p>

<p>安装完操作系统后，添加一个用户 dev</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>useradd dev
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后密码设为 dev123</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>passwd dev
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>给予 sudo 权限</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>chmod u+w /etc/sudoers
</span><span class="line"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>vim /etc/sudoers
</span><span class="line"><span class="c"># 在root ALL=(ALL) ALL 下 添加dev ALL=(ALL) ALL</span>
</span><span class="line"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>chmod u-w /etc/sudoers
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">设置上网</h2>
<p>安装完操作系统后，还不能上网，配置DHCP方式上网：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0
</span><span class="line"><span class="nv">DEVICE</span><span class="o">=</span><span class="s2">&quot;eth0&quot;</span>
</span><span class="line"><span class="nv">HWADDR</span><span class="o">=</span><span class="s2">&quot;00:0C:29:BD:E1:19&quot;</span>
</span><span class="line"><span class="nv">NM_CONTROLLED</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class="line"><span class="nv">ONBOOT</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class="line"><span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
</span><span class="line"><span class="nv">USECTL</span><span class="o">=</span>no
</span><span class="line"><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class="line"><span class="nv">PEERDNS</span><span class="o">=</span>yes
</span><span class="line"><span class="c">#保存退出</span>
</span><span class="line">sudo service network restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>或者，配置静态IP</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">DEVICE</span><span class="o">=</span><span class="s2">&quot;eth0&quot;</span>
</span><span class="line"><span class="nv">HWADDR</span><span class="o">=</span><span class="s2">&quot;00:0C:29:10:F4:4C&quot;</span>
</span><span class="line"><span class="nv">ONBOOT</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class="line"><span class="nv">BOOTPROTO</span><span class="o">=</span>static
</span><span class="line"><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class="line"><span class="nv">IPADDR</span><span class="o">=</span>192.168.0.162
</span><span class="line"><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class="line"><span class="nv">BROADCAST</span><span class="o">=</span>192.168.0.255
</span><span class="line"><span class="nv">NETWORK</span><span class="o">=</span>192.168.0.0
</span><span class="line"><span class="c">#保存退出  </span>
</span><span class="line"><span class="c">#修改/etc/sysconfig/network</span>
</span><span class="line">sudo vim /etc/sysconfig/network
</span><span class="line"><span class="nv">NETWORKING</span><span class="o">=</span>yes
</span><span class="line"><span class="nv">HOSTNAME</span><span class="o">=</span>localhost.localdomain
</span><span class="line"><span class="nv">GATEWAY</span><span class="o">=</span>192.168.0.1
</span><span class="line"><span class="c">#保存退出，重启网络</span>
</span><span class="line">sudo service network restart
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果失败，比如IP已被占用，换一个IP试试</p>

<p>修改DNS，即时生效</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo vim /etc/resolv.conf
</span><span class="line">nameserver 192.168.0.1
</span><span class="line"><span class="c"># google提供的域名服务器</span>
</span><span class="line">nameserver 8.8.8.8
</span><span class="line">search localhost
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">安装常用软件</h2>
<p>有两种方式，方法一，去官网下载已经编译好的二进制文件，或源代码，编译安装
方法二，用yum 命令安装，安装官方yum源里已经编译好的程序包。<br />
第一种方式要敲很多命令，比yum麻烦，但是可以预先下载好文件，省略了下载的时间，整体速度比yum安装方式快很多，而且可以安装最新版。推荐第一种方式</p>

<p>第二种方式操作简单，敲打的命令少，但是往往yum源的更新速度跟不上各个软件的官网速度，用Yum安装的版本经常比较旧。</p>

<p>yum的命令形式一般是如下：<code>yum [options] [command] [package ...]</code>，其中的[options]是可选的，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。[command]为所要进行的操作，[package …]是操作的对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#yum search package-name # 在线搜索包 </span>
</span><span class="line"><span class="c">#yum list installed # 列出所有已经安装的包</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#sudo yum install package-name # 安装程序包 </span>
</span><span class="line"><span class="c">#sudo yum groupinsall group-name 安装程序组</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#sudo yum remove package-name 删除程序包</span>
</span><span class="line"><span class="c">#sudo yum groupremove group-name 删除程序组</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#yum update #全部更新</span>
</span><span class="line"><span class="c">#yum update package-name #更新程序包</span>
</span><span class="line"><span class="c">#sudo yum groupupdate groupn-name 升级程序组</span>
</span><span class="line"><span class="c">#sudo yum upgrade # 更新源列表</span>
</span><span class="line"><span class="c">#yum upgrade package-name #升级程序包</span>
</span><span class="line"><span class="c">#sudo yum clean all # 清除缓存</span>
</span><span class="line"><span class="c">#更新</span>
</span><span class="line">sudo yum update
</span><span class="line"><span class="c">#清理缓存</span>
</span><span class="line">sudo yum clean all <span class="o">&amp;&amp;</span> yum clean metadata <span class="o">&amp;&amp;</span> yum clean dbcache
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">安装编译工具</h2>

<h3 id="section-4">方法一</h3>
<p>去 http://gcc.gnu.org/ 下载源码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># TODO</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum groupinstall <span class="s2">&quot;Development Tools&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>该命令类似于 Ubuntu 下的<code>apt-get install build-essential</code>，会自动安装一下软件包：autoconf automake bison byacc cscope ctags diffstat doxygen flex gcc gcc-c++ gcc-gfortran git indent intltool libtool patchutils rcs redhat-rpm-config rpm-build subversion swig systemtap，同时安装了以下依赖包：apr, apr-util, 等等。</p>

<h2 id="jdk">安装JDK</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#删除旧的JDK</span>
</span><span class="line">yum list installed | grep jdk
</span><span class="line"><span class="c">#复制显示出来的JDK，卸载</span>
</span><span class="line">sudo yum remove java-1.6.0-openjdk.x86_64
</span><span class="line"><span class="c">#安装新的jdk</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">方法一</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#从官网下载最新版的，当前是jdk6u32</span>
</span><span class="line"><span class="c">#开始安装</span>
</span><span class="line">chmod u+x chmod u+x jdk-6u32-linux-x64-rpm.bin
</span><span class="line">sudo ./jdk-6u32-linux-x64-rpm.bin
</span><span class="line"><span class="c">#设置环境变量，.bash_profile是当前用户，/etc/profile是所有用户的</span>
</span><span class="line">sudo vim /etc/profile
</span><span class="line"><span class="c">#在末尾添加</span>
</span><span class="line"><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/java/default
</span><span class="line"><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/jre
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin
</span><span class="line"><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span>.:<span class="nv">$JAVA_HOME</span>/lib/dt.jar:<span class="nv">$JAVA_HOME</span>/lib/tools.jar
</span><span class="line"><span class="c"># 保存退出，输入以下命令使之立即生效：</span>
</span><span class="line"><span class="nb">source</span> /etc/profile
</span><span class="line"><span class="c"># 测试</span>
</span><span class="line">java -version
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">yum search jdk
</span><span class="line"><span class="c"># java-1.6.0-openjdk只包含了JRE，如果在这台机器上开发java程序，则需要安装JDK，</span>
</span><span class="line"><span class="c"># 要选择 java-1.6.0-openjdk-devel，在服务器上我们只需要运行java程序，因此选择前者</span>
</span><span class="line">sudo yum install java-1.6.0-openjdk-devel
</span><span class="line"><span class="c"># 使用 alternatives 工具设置默认JDK，参考：Installing a Java Development Kit on Red Hat Enterprise Linux</span>
</span><span class="line">/usr/sbin/alternatives --config java
</span><span class="line">/usr/sbin/alternatives --config javac
</span><span class="line"><span class="c"># 设置环境变量</span>
</span><span class="line"><span class="c"># 查询JDK路径</span>
</span><span class="line">whereis java
</span><span class="line">ll /usr/bin/java
</span><span class="line">ll /etc/alternatives/java <span class="c">#这是可以看到JDK路径了</span>
</span><span class="line">sudo vim /etc/profile
</span><span class="line"><span class="c"># 在末尾添加</span>
</span><span class="line"><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/jre-1.6.0-openjdk.x86_64
</span><span class="line"><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/jre
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin
</span><span class="line"><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span>.:<span class="nv">$JAVA_HOME</span>/lib/dt.jar:<span class="nv">$JAVA_HOME</span>/lib/tools.jar
</span><span class="line"><span class="c">#保存退出，输入以下命令使之立即生效：</span>
</span><span class="line"><span class="c"># source /etc/profile</span>
</span><span class="line"><span class="c"># 测试</span>
</span><span class="line">java -version
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="apache">安装 apache</h2>

<h3 id="section-8">方法一</h3>
<p>源码在官网 http://httpd.apache.org/ 下载。<br />
先下载apt, apr-util, pcre三个库，httpd 在编译时需要用到这三个库<br />
apr, apr-util官网 http://apr.apache.org , pcre官网为 <a href="http://pcre.org">http://pcre.org </a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 编译，安装 apr</span>
</span><span class="line">tar -jxf apr-1.4.6.tar.bz2
</span><span class="line"><span class="nb">cd </span>apr-1.4.6
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install    <span class="c"># 默认会安装到 /usr/local/apr/</span>
</span><span class="line"><span class="nb">cd</span> ~
</span><span class="line"><span class="c">#编译，安装 apr-util</span>
</span><span class="line">tar -jxf apr-util-1.4.1.tar.bz2
</span><span class="line"><span class="nb">cd </span>apr-util-1.4.1
</span><span class="line">./configure --with-apr<span class="o">=</span>/usr/local/apr/
</span><span class="line">make
</span><span class="line">sudo make install    <span class="c"># 默认会安装到 /usr/local/apr/</span>
</span><span class="line"><span class="nb">cd</span> ~
</span><span class="line"><span class="c">#编译，安装 pcre</span>
</span><span class="line">tar -jxf pcre-8.30.tar.bz2
</span><span class="line"><span class="nb">cd  </span>pcre-8.30
</span><span class="line">./configure --with-apr<span class="o">=</span>/usr/local/apr/
</span><span class="line">make
</span><span class="line"><span class="c"># By default, `make install&#39; installs the package&#39;s commands under</span>
</span><span class="line"><span class="c">#`/usr/local/bin&#39;, include files under `/usr/local/include&#39;, etc. </span>
</span><span class="line">sudo make install
</span><span class="line"><span class="nb">cd</span> ~
</span><span class="line"><span class="c">#编译，安装 apache</span>
</span><span class="line">tar -jxf httpd-2.2.22.tar.bz2
</span><span class="line"><span class="nb">cd </span>httpd-2.2.22
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install    <span class="c"># 默认会安装到/usr/local/apache2/</span>
</span><span class="line"><span class="nb">cd</span> ~
</span><span class="line"><span class="c">#添加防火墙规则，让防火墙允许 apache的端口 80通过</span>
</span><span class="line">sudo vim /etc/sysconfig/iptables
</span><span class="line"><span class="c">#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 &quot;REJECT --reject-with&quot; 的行的前面</span>
</span><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
</span><span class="line">sudo service iptables restart
</span><span class="line"><span class="c">#测试</span>
</span><span class="line">sudo /usr/local/apache2/bin/apachectl start
</span><span class="line"><span class="c">#在浏览器输入 http://ip地址 ，如果看到“It works”，说明安装成功</span>
</span><span class="line">/usr/local/apache2/bin/apachectl stop
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c">#设置为开机启动</span>
</span><span class="line"><span class="c">#将httpd注册为服务，通过chkconfig实现开机启动</span>
</span><span class="line"><span class="c">#以apachectl 为模板</span>
</span><span class="line">sudo cp /usr/local/apache2/bin/apachectl /etc/init.d/httpd
</span><span class="line">sudo vim /etc/init.d/httpd
</span><span class="line"><span class="c"># 在第一行 #!/bin/sh，添加如下一行，使其支持chkconfig命令</span>
</span><span class="line"><span class="c"># chkconfig: 2345 85 15</span>
</span><span class="line"><span class="c"># 保存，退出VIM编辑器</span>
</span><span class="line">sudo chmod u+x /etc/init.d/httpd
</span><span class="line">sudo chkconfig --add httpd
</span><span class="line">sudo chkconfig httpd on
</span><span class="line"><span class="c">#检查一下，是否添加成功</span>
</span><span class="line">chkconfig --list httpd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-9">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install httpd
</span><span class="line"><span class="c">#可选？sudo yum install httpd-devel</span>
</span><span class="line"><span class="c">#测试</span>
</span><span class="line"><span class="c">#启动 apache http server</span>
</span><span class="line">sudo service httpd start
</span><span class="line"><span class="c">#添加规则，让防火墙允许 apache的端口 80</span>
</span><span class="line">sudo vim /etc/sysconfig/iptables
</span><span class="line"><span class="c">#添加如下一行，位置必须要放在 含有 &quot;REJECT --reject-with&quot; 的行的前面</span>
</span><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
</span><span class="line">sudo service iptables restart
</span><span class="line"><span class="c">#可以在浏览器输入 http://ip地址 测试了</span>
</span><span class="line"><span class="c">#设置为开机启动</span>
</span><span class="line">sudo chkconfig httpd on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mysql">安装 mysql</h2>

<h3 id="section-10">方法一</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#去官网下载 Oracle &amp; Red Hat 6的安装包，64位为MySQL-5.5.23-1.el6.x86_64.tar，</span>
</span><span class="line"><span class="c">#32位为 MySQL-5.5.23-1.el6.i686.tar</span>
</span><span class="line">tar -xf MySQL-5.5.23-1.el6.x86_64.tar
</span><span class="line"><span class="c">#加 --force 是因为可能会与mysqllib库冲突</span>
</span><span class="line">sudo rpm -ivh --force  MySQL-server-5.5.23-1.el6.x86_64.rpm
</span><span class="line">sudo rpm -ivh MySQL-client-5.5.23-1.el6.x86_64.rpm
</span><span class="line"><span class="c"># 启动 mysql 服务器</span>
</span><span class="line">sudo service mysql start
</span><span class="line"><span class="c">#设置为开机启动</span>
</span><span class="line">sudo chkconfig mysql on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-11">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install mysql-server
</span><span class="line">sudo chgrp -R mysql /var/lib/mysql
</span><span class="line">sudo chmod -R 770 /var/lib/mysql
</span><span class="line"><span class="c"># 启动 mysql 服务器</span>
</span><span class="line">sudo service mysqld start
</span><span class="line"><span class="c">#设置为开机启动</span>
</span><span class="line">sudo chkconfig mysqld on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-12">公共的操作</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># root 初始密码为空，修改root密码</span>
</span><span class="line">mysql -u root
</span><span class="line">mysql&gt; use mysql;
</span><span class="line">mysql&gt; update user <span class="nb">set </span><span class="nv">password</span><span class="o">=</span>password<span class="o">(</span><span class="s1">&#39;root123&#39;</span><span class="o">)</span> where <span class="nv">user</span><span class="o">=</span><span class="s1">&#39;root&#39;</span> AND <span class="nv">host</span><span class="o">=</span><span class="s1">&#39;localhost&#39;</span>;
</span><span class="line">mysql&gt; flush privileges;
</span><span class="line"><span class="c"># 打开MySQL中root账户的远程登录，参考：如何打开MySQL中root账户的远程登录mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;root&quot;;</span>
</span><span class="line">mysql&gt; update user <span class="nb">set </span><span class="nv">password</span><span class="o">=</span>password<span class="o">(</span><span class="s1">&#39;root123&#39;</span><span class="o">)</span> where <span class="nv">user</span><span class="o">=</span><span class="s1">&#39;root&#39;</span> AND <span class="nv">host</span><span class="o">=</span><span class="s1">&#39;%&#39;</span>;
</span><span class="line">mysql&gt; flush privileges;
</span><span class="line">mysql&gt; quit;
</span><span class="line"><span class="c">#添加防火墙规则，让防火墙允许 mysql 的端口 3306通过</span>
</span><span class="line">sudo vim /etc/sysconfig/iptables
</span><span class="line"><span class="c">#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 &quot;REJECT --reject-with&quot; 的行的前面</span>
</span><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
</span><span class="line">sudo service iptables restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="php5">安装 php5</h2>

<h3 id="section-13">方法一</h3>
<p>TODO</p>

<h3 id="section-14">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install php php-pear
</span><span class="line"><span class="c">#重启 apache，以确保apache 加载PHP模块</span>
</span><span class="line">sudo service httpd restart
</span><span class="line"><span class="c"># 在 /var/www/html/下新建一个index.php文件，用于测试</span>
</span><span class="line"><span class="nb">cd</span> /var/www/html
</span><span class="line">sudo vim index.php
</span><span class="line"><span class="c"># 添加如下一行</span>
</span><span class="line">&lt;?php phpinfo<span class="o">()</span>; ?&gt;
</span><span class="line"><span class="c"># 在浏览器输入 http://xxx.xxx.xxx.xxx/index.php ，测试PHP是否成功安装</span>
</span><span class="line">
</span><span class="line"><span class="c"># 如果需要在PHP中支持mysql，则需要安装 php-mysql 模块</span>
</span><span class="line">sudo yum install php-mysql
</span><span class="line"><span class="c"># 如果需要在PHP中支持memcached，则需要安装 php-pecl-memcache 模块</span>
</span><span class="line">sudo yum install php-pecl-memcache
</span><span class="line"><span class="c">#安装一些常用的PHP扩展模块</span>
</span><span class="line">sudo yum install php-devel php-gd php-mbstring php-xml
</span><span class="line">
</span><span class="line"><span class="c">#可以安装一个wordpress进行测试，注意要修改文件夹权限</span>
</span><span class="line">sudo chown -R apache.apache /var/www/html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="memcached">安装 memcached</h2>

<h3 id="section-15">方法一</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># memcached依赖libevent，首先要安装 libevent</span>
</span><span class="line"><span class="c"># 去 http://libevent.org/ 下载libevent源码，然后编译，安装</span>
</span><span class="line">tar -zxf libevent-2.0.18-stable.tar.gz
</span><span class="line"><span class="nb">cd </span>libevent-2.0.18-stable
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install
</span><span class="line"><span class="c"># 对于64位操作系统(32位不需要)，还需要配置：</span>
</span><span class="line">sudo ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64//libevent-2.0.so.5
</span><span class="line"><span class="c"># 去 http://www.memcached.org/ 下载 memcached，然后编译，安装</span>
</span><span class="line">tar -zxf memcached-1.4.13.tar.gz
</span><span class="line"><span class="nb">cd </span>memcached-1.4.13
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install
</span><span class="line"><span class="c"># 启动, -p，端口,-m，内存, -u</span>
</span><span class="line">memcached -p 11211 -m 512m -u root -d
</span><span class="line"><span class="c"># 开机启动</span>
</span><span class="line"><span class="c"># centos设置开机启动有两种方式，一是把启动程序的命令添加到/etc/rc.d/rc.local文件中，二是把写好的启动脚本添加到目录/etc/rc.d/init.d/，然后使用命令chkconfig设置开机启动。第二种方式可以用 service xxx start|stop来启动或停止，所以推荐第二种。</span>
</span><span class="line"><span class="c">#将 memcached启动命令注册为一个服务</span>
</span><span class="line"><span class="nb">cd</span> /etc/init.d/
</span><span class="line">sudo vim memcached
</span><span class="line"><span class="c">#代码如下，参考：Linux中将memcached注册成服务并可以随机器启动时启动服务</span>
</span><span class="line"><span class="c">#chkconfig: 345 60 60</span>
</span><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line">start<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">        <span class="nb">echo</span> -n <span class="s2">$&quot;Starting memcached: &quot;</span>
</span><span class="line">        /usr/local/bin/memcached -p 11211 -m 512m -u root -d
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;[OK]&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">stop<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">        <span class="nb">echo</span> -n <span class="s2">$&quot;Shutting down memcached: &quot;</span>
</span><span class="line">        <span class="nv">memcached_pid_list</span><span class="o">=</span><span class="sb">`</span>pidof memcached<span class="sb">`</span>
</span><span class="line">        <span class="nb">kill</span> -9 <span class="nv">$memcached_pid_list</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;[OK]&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class="line">  start<span class="o">)</span>
</span><span class="line">        start
</span><span class="line">        ;;
</span><span class="line">  stop<span class="o">)</span>
</span><span class="line">        stop
</span><span class="line">        ;;
</span><span class="line">  restart<span class="o">)</span>
</span><span class="line">        stop
</span><span class="line">        sleep 3
</span><span class="line">        start
</span><span class="line">        ;;
</span><span class="line">    *<span class="o">)</span>
</span><span class="line">             <span class="nb">echo</span> <span class="s2">$&quot;Usage: $0 {start|stop|restart}&quot;</span>
</span><span class="line">        <span class="nb">exit </span>1
</span><span class="line"><span class="k">esac</span>
</span><span class="line"><span class="nb">exit </span>0
</span><span class="line"><span class="c">#保存退出</span>
</span><span class="line">sudo chmod u+x memcached
</span><span class="line">sudo chkconfig --add memcached
</span><span class="line">sudo chkconfig  memcached on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-16">方法二</h3>
<p>TODO</p>

<h2 id="tomcat6">安装 tomcat6</h2>

<h3 id="section-17">方法一</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 去 http://tomcat.apache.org 下载 apache-tomcat-6.0.35.tar.gz</span>
</span><span class="line">tar -zxf apache-tomcat-6.0.35.tar.gz
</span><span class="line">sudo mv apache-tomcat-6.0.35 /usr/local/
</span><span class="line"><span class="nb">cd</span> /usr/local/apache-tomcat-6.0.35/bin
</span><span class="line"><span class="c">#【可选】添加环境变量</span>
</span><span class="line">sudo vim /etc/profile
</span><span class="line"><span class="nb">export </span><span class="nv">CATALINA_HOME</span><span class="o">=</span>/usr/local/apache-tomcat-6.0.35
</span><span class="line"><span class="c">#启动 tomcat </span>
</span><span class="line">sudo ./startup.sh
</span><span class="line"><span class="c"># 在浏览器输入 http://xxx.xxx.xxx.xxx:8080/ ，如果能看见tomcat页面，则表示安装成功了</span>
</span><span class="line"><span class="c">#设置开机启动</span>
</span><span class="line"><span class="c">#将 tomcat启动命令注册为一个服务</span>
</span><span class="line"><span class="nb">cd</span> /etc/init.d/
</span><span class="line">sudo vim tomcatd
</span><span class="line"><span class="c">#代码如下</span>
</span><span class="line"><span class="c">#chkconfig: 345 60 60</span>
</span><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nv">CATALINA_HOME</span><span class="o">=</span>/usr/local/apache-tomcat-6.0.35
</span><span class="line">
</span><span class="line">start<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">        <span class="nb">echo</span> -n <span class="s2">$&quot;Starting Tomcat: &quot;</span>
</span><span class="line">        <span class="nv">$CATALINA_HOME</span>/bin/startup.sh
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;[OK]&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">stop<span class="o">()</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">        <span class="nb">echo</span> -n <span class="s2">$&quot;Shutting down Tomcat: &quot;</span>
</span><span class="line">        <span class="nv">$CATALINA_HOME</span>/bin/shutdown.sh
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;[OK]&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class="line">  start<span class="o">)</span>
</span><span class="line">        start
</span><span class="line">        ;;
</span><span class="line">  stop<span class="o">)</span>
</span><span class="line">        stop
</span><span class="line">        ;;
</span><span class="line">  restart<span class="o">)</span>
</span><span class="line">        stop
</span><span class="line">        sleep 3
</span><span class="line">        start
</span><span class="line">        ;;
</span><span class="line">    *<span class="o">)</span>
</span><span class="line">             <span class="nb">echo</span> <span class="s2">$&quot;Usage: $0 {start|stop|restart}&quot;</span>
</span><span class="line">        <span class="nb">exit </span>1
</span><span class="line"><span class="k">esac</span>
</span><span class="line"><span class="nb">exit </span>0
</span><span class="line"><span class="c">#保存退出</span>
</span><span class="line">sudo chmod u+x tomcatd
</span><span class="line">sudo chkconfig --add tomcatd
</span><span class="line">sudo chkconfig tomcatd on
</span><span class="line">
</span><span class="line"><span class="c">#添加防火墙规则，让防火墙允许 tomcat 的端口 8080 通过</span>
</span><span class="line">sudo vim /etc/sysconfig/iptables
</span><span class="line"><span class="c">#添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 &quot;REJECT --reject-with&quot; 的行的前面</span>
</span><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
</span><span class="line">sudo service iptables restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-18">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#搜索一下 tomcat包的名字</span>
</span><span class="line">yum search tomcat
</span><span class="line">sudo yum search tomcat6.noarch
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="python">安装Python</h2>

<h3 id="httpwwwpythonorg">方法一：去<a href="http://www.python.org">官网</a>下载源码，编译，安装</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#开始解压，编译，安装</span>
</span><span class="line">tar -jxf Python-3.2.3.tar.bz2
</span><span class="line"><span class="nb">cd </span>Python-3.2.3
</span><span class="line"><span class="c"># 查看一下说明, vim README</span>
</span><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line"><span class="c">#为了加快安装速度，这步可以省略</span>
</span><span class="line">make <span class="nb">test</span>
</span><span class="line"><span class="c">#卸载旧的python，注意，不能用 yum remove python，这会卸载几百个包，最终损坏系统</span>
</span><span class="line">sudo rpm -evf --nodeps python
</span><span class="line">sudo make install
</span><span class="line"><span class="c">#默认安装在 /usr/local/bin/python3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-19">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install python
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ruby">安装ruby</h2>

<h3 id="section-20">方法一</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># http://www.ruby-lang.org/en/downloads/ ，选择 &quot;Stable Snapshot&quot;</span>
</span><span class="line">tar -zxf ruby-1.9-stable.tar.gz
</span><span class="line"><span class="nb">cd  cd </span>ruby-1.9.3-p194/
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-21">方法二</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install ruby
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="go">安装go</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#去官网 http://code.google.com/p/go/downloads 下载，go1.0.1.linux-i386.tar.gz (32位)，go1.0.1.linux-amd64.tar.gz（64位）</span>
</span><span class="line">tar -zxf go1.0.1.linux-amd64.tar.gz
</span><span class="line">sudo mv go/ /usr/local/
</span><span class="line"><span class="c">#设置环境变量</span>
</span><span class="line">sudo vim /etc/profile
</span><span class="line"><span class="nb">export </span><span class="nv">GOROOT</span><span class="o">=</span>/usr/local/go
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOROOT</span>/bin
</span><span class="line"><span class="nb">source</span> /etc/profile
</span><span class="line"><span class="c">#测试一下</span>
</span><span class="line">go version
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="lua">安装lua</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 去官网下载源码，编译，安装。由于官网仅提供源码，故推荐源码编译安装方式。</span>
</span><span class="line"><span class="c"># 去官网 http://www.lua.org/ 下载源码，lua-5.2.0.tar.gz</span>
</span><span class="line">tar -zxf lua-5.2.0.tar.gz
</span><span class="line"><span class="nb">cd </span>lua-5.2.0
</span><span class="line"><span class="c"># lua 依赖 readline.h 头文件</span>
</span><span class="line">sudo yum install  readline-devel
</span><span class="line">make linux
</span><span class="line">sudo make install
</span><span class="line"><span class="c">#安装 google protobuf</span>
</span><span class="line"><span class="c">#去官网 http://code.google.com/p/protobuf/下载</span>
</span><span class="line">tar -jxf protobuf-2.4.1.tar.bz2
</span><span class="line"><span class="nb">cd </span>protobuf-2.4.1
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">sudo make install
</span><span class="line"><span class="c">#测试</span>
</span><span class="line">protoc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-22">清理安装包</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ~
</span><span class="line">rm * -rf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-23">压缩打包</h2>
<p>安装完后，可以Clone，压缩打包成一个zip文件，方便分享给别人。</p>

<p>在关机之前，有一件事需要做，</p>

<pre><code>sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0, 把HWADDR=.... 这行删掉
sudo rm /etc/udev/rules.d/70-persistent-net.rules
sudo shutdown -h now
</code></pre>

<p>如果没有执行上述命令，克隆后的虚拟机，开机后无法上网，重启网络，<code>sudo service network restart</code>也没有效果，会出现错误“Device eth0 does not seem to be present, delaying initialization.” </p>

<p>这是因为克隆后的虚拟机，它的MAC地址变了，即在它的.vmx文件里，MAC地址变了（<code>ethernet0.generatedAddress</code>这项），但是linux不知道这个变化，网络配置文件还是旧的，这样跟它的而真实mac不匹配，网络就无法启动。</p>

<p>执行上述命令，删除了<code>70-persistent-net.rules</code>后，相当于删除了旧的配置文件，在开机时会生成新的配置文件。</p>

<p>关机后，右击标签，选择”Manage-&gt;Clone”，选择”Create a full clone”，克隆完成后，关闭这台虚拟机的标签（否则文件夹里有一些临时垃圾文件），然后把文件夹压缩打包。以后就可以把这个zip包拷贝给周围的人，别人就不用经历一遍重装的过程了。</p>

<h2 id="section-24">参考资料</h2>
<p><a href="http://library.linode.com/lamp-guides/centos-6">LAMP Server on CentOS 6</a></p>

<p><a href="http://articles.slicehost.com/2008/2/6/centos-installing-apache-and-php5">CentOS - Installing Apache and PHP5</a></p>

<p><a href="http://fedorasolved.org/server-solutions/lamp-stack">Setting up a LAMP stack</a></p>

<p><a href="http://myohmy.blog.51cto.com/140917/327310">CentOS5.5使用yum来安装LAMP</a></p>

<p><a href="http://it.megocollector.com/?p=1719">Install Java JDK on CentOS without prompts using an automated script!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作 VMware ESXI 5 U盘安装盘]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120418"/>
    <updated>2012-04-18T20:17:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/create-a-bootable-vmware-esxi-5-usb-stick</id>
    <content type="html"><![CDATA[<p>有两种方法，使用 unetbootin ，或使用 LinuxLive USB Creator刻录可启动U盘。 
##使用 unetbootin
这个方法最自动化，点击两下按钮即可，但是有时候会失败(我用EXSi 5.0 的ISO失败，但是用 EXSi 5.0U1可以成功)，U盘启动不了。 </p>

<ol>
  <li>单击 光盘镜像，选择ISO文件VMware-VMvisor-Installer-5.0.0.update01-623860.x86_64.iso。 </li>
  <li>选择U盘，点击“确定”开始刻录。刻录后用U盘启动机器开始安装即可。如下图所示。
<img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2012/04/unetbootin1.jpg" /></li>
</ol>

<h2 id="linuxlive-usb-creator">使用 LinuxLive USB Creator</h2>

<ol>
  <li>格式化U盘，文件系统为FAT32，并设置为主分区，命令如下：
     # 使用管理员权限运行cmd 
     diskpart 
     list disk 
     select disk USB number （例如 select dist 1） 
     clean 
     create partition primary 
     active 
     format fs=fat32 quick 
     assign 
     exit</li>
</ol>

<!-- more -->

<ol>
  <li>下载，安装 LinuxLive USB Creator(<a href="http://www.linuxliveusb.com/">http://www.linuxliveusb.com/</a>) </li>
  <li>
    <p>按照上图中的步骤 1,2,4，选择ISO文件<code>VMware-VMvisor-Installer-5.0.0.update01-623860.x86_64.iso</code>，然后点击 5 ，开始创建U盘安装盘。等待U盘刻录结束。</p>

    <p><img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2012/04/liliusb_thumb1.png" /></p>

    <p>大功告成，是不是很简单？！ </p>
  </li>
  <li>编辑U盘根目录下的BOOT.CFG文件。注意，不要添加 “ks=usb”，因为下面会用交互模式来安装。 </li>
  <li>大功告成</li>
  <li>注意，本文主要参考了末尾的参考资料。但是不需要原文的第4步和第5步。因为用普通的 “interactive installation”安装就很方便了。第4步和第5步用于一键自动化安装，适用于大量安装的情况，这里不详细讨论。 
见文章末尾的评论，</li>
</ol>

<blockquote>
  <p>@Cesar: if you do not edit the boot.cfg with the “ks=usb” option and select a interactive installation it will work。</p>
</blockquote>

<p><strong>参考资料</strong><br />
<a href="http://www.ivobeerens.nl/2011/09/17/create-a-bootable-vmware-esxi-5-usb-stick-in-windows-and-perform-a-scripted-installation/">Create a bootable VMware ESXi 5 USB stick in Windows and perform a scripted installation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu上安装Hadoop]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120103"/>
    <updated>2012-01-03T18:54:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/hadoop-installation-on-ubuntu</id>
    <content type="html"><![CDATA[<p>本文所使用的版本是 hadoop 1.0.0，即 <a href="http://www.iteye.com/news/23874">2011年12月27日发布的1.0正式版</a>。</p>

<p>详细安装步骤如下，有大步骤，每个步骤里面有小步骤，绝大部分是必选，只有2步是可选的，粗体表示要特别注意的地方。</p>

<h2 id="vmware-workstation-">1. 用vmware workstation 新建三台虚拟机</h2>
<p>首先用vmware workstation 新建一台ubuntu server，装好操作系统，安装各种必须的软件，包括安装好hadoop。安装好后然后用浅拷贝<code>Create a linked clone</code> 克隆出两台作为slave，这样有了三台ubuntu机器。启动三台机器，假设IP分别为<code>192.168.1.131, 192.168.1.132, 192.168.1.133</code>, 131做为master 和 SecondaryNameNode, 身兼两职，132为 slave01, 133为slave02。</p>

<h2 id="section">2. 修改机器名</h2>
<p>这一步看起来貌似不必要，其实是必须的，否则最后运行wordcount等例子时，会出现“Too many fetch-failures”。因为HDFS用hostname而不是IP，来相互之间进行通信（见后面的注意1）。</p>

<ul>
  <li>
    <p>192.168.1.131上执行</p>

    <pre><code>  dev@bogon:~$ sudo vi /etc/hostname
</code></pre>
  </li>
</ul>

<p>输入<code>master</code>，重启，会发现命令提示符变为了 <code>dev@master:~$</code></p>

<p>用同样的方法，将<code>192.168.1.132</code>改为slave01，<code>192.168.1.133</code>改为slave02。</p>

<!-- more -->

<h2 id="masterhostsslave">3. 修改master的hosts文件，并拷贝到每台slave上</h2>

<pre><code>dev@master:~$ sudo vi /etc/hosts
</code></pre>

<p>添加三行内容</p>

<pre><code>192.168.1.131 master  
192.168.1.132 slave01  
192.168.1.133 slave02  
</code></pre>

<p><strong>注意一定要注释掉</strong></p>

<pre><code># 127.0.1.1      bogon.localdomain       bogon
</code></pre>

<p>最后hosts文件内容如下：</p>

<pre><code>127.0.0.1       localhost
# 127.0.1.1      bogon.localdomain       bogon
192.168.1.131 master
192.168.1.132 slave01
192.168.1.133 slave02
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
</code></pre>

<ul>
  <li>
    <p>将hosts文件拷贝到另外两台台机器上，覆盖原来的hosts文件</p>

    <pre><code>  dev@master:~$ scp /etc/hosts dev@192.168.1.132:~
  dev@master:~$ scp /etc/hosts dev@192.168.1.133:~
</code></pre>
  </li>
  <li>
    <p>在192.168.1.132上执行</p>

    <pre><code>  dev@slave01:~$ sudo mv hosts /etc/hosts
</code></pre>
  </li>
  <li>
    <p>在192.168.1.133上执行</p>

    <pre><code>  dev@slave02:~$ sudo mv hosts /etc/hosts
</code></pre>
  </li>
</ul>

<h2 id="master-">4. 配置 master 无密码登陆到所有机器（<strong>包括本机</strong>）</h2>

<pre><code>dev@master:~$ ssh-keygen -t rsa

dev@master:~$ cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys

dev@master:~$ scp .ssh/id_rsa.pub dev@192.168.1.132:~/

dev@master:~$ scp .ssh/id_rsa.pub dev@192.168.1.133:~/

dev@slave01:~$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys

dev@slave02:~$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys
</code></pre>

<p>测试一下，</p>

<pre><code>dev@master:~$ ssh slav01
</code></pre>

<p>如果登不上，试试先关闭slave01的防火墙，</p>

<pre><code>dev@slave01:~$ sudo ufw disable
</code></pre>

<h2 id="hadoop">5. 复制hadoop安装包到所有机器</h2>
<p>从hadoop.apache.org下载 hadoop-1.0.0-bin.tar.gz，上传到master中，解压，然后复制到其他机器，解压。</p>

<pre><code>dev@master:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz

dev@master:~$ scp hadoop-1.0.0-bin.tar.gz dev@192.168.1.132:~

dev@master:~$ scp hadoop-1.0.0-bin.tar.gz dev@192.168.1.133:~

dev@slave01:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz

dev@slave02:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz
</code></pre>

<h2 id="section-1">6. 编辑配置文件</h2>

<pre><code>dev@master:~$ cd hadoop-1.0.0/etc/hadoop

dev@master:~/hadoop-1.0.0/etc/hadoop$  vi hadoop-env.sh
</code></pre>

<p>仅需要设置JAVA_HOME，</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
</code></pre>

<p>core-site.xml:</p>

<pre><code>&lt;configuration&gt;
	&lt;property&gt;
		&lt;name&gt;fs.default.name&lt;/name&gt;
		&lt;value&gt;hdfs://master:9000&lt;/value&gt;
	&lt;/property&gt;
	&lt;property&gt;
		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;
		&lt;value&gt;/home/dev/hadoop_tmp/&lt;/value&gt;
	&lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>mapred-site.xml:</p>

<pre><code>&lt;configuration&gt;
	&lt;property&gt;
		&lt;name&gt;mapred.job.tracker&lt;/name&gt;
		&lt;value&gt;master:9001&lt;/value&gt;
	&lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>hdfs-site.xml:</p>

<pre><code>&lt;configuration&gt;
	&lt;property&gt;
		&lt;name&gt;dfs.replication&lt;/name&gt;
		&lt;value&gt;3&lt;/value&gt;
	&lt;/property&gt;
&lt;/configuration&gt;
</code></pre>

<p>masters:</p>

<pre><code>master
</code></pre>

<p>slaves:</p>

<pre><code>slave01
slave02
</code></pre>

<h2 id="slave">7. 将配置文件拷贝到各台slave</h2>

<pre><code>dev@master:~/hadoop-1.0.0/etc/hadoop$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.132:~/hadoop-1.0.0/etc/hadoop

dev@master:~/hadoop-1.0.0/etc/hadoop$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.133:~/hadoop-1.0.0/etc/hadoop
</code></pre>

<h2 id="hadoophomehadoophomebinpath">8. 设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH</h2>
<p>所有机器都要设置环境变量HADOOP_HOME，并将<code>$HADOOP_HOME/bin</code>加入PATH，因为master登陆到slave后，要执行<code>$HADOOP_HOME/bin</code> 下的一些命令。</p>

<pre><code>$ vi .bashrc
	
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
export HADOOP_HOME=~/hadoop-1.0.0
export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
export CLASSPATH=$CLASSPATH:$HADOOP_HOME/share/hadoop/hadoop-core-1.0.0.jar
	
export HADOOP_HOME=~/hadoop-1.0.0
	
export PATH=$PATH:$HADOOP_HOME/bin
	
$ source .bashrc
</code></pre>

<h2 id="hadoop-1">9. 运行 hadoop</h2>

<pre><code>#只需一次，下次启动不再需要格式化，只需 start-all.sh
dev@master:~$ hadoop  namenode -format）

dev@master:~$ start-all.sh
</code></pre>

<h2 id="section-2">10. 检查是否运行成功</h2>

<pre><code>dev@master:~$ jps

2615 NameNode
2767 JobTracker
2874 Jps

dev@slave01:~$ jps

3415 DataNode
3582 TaskTracker
3499 SecondaryNameNode
3619 Jps

dev@slave02:~$ jps

3741 Jps
3618 DataNode
3702 TaskTracker
</code></pre>

<h2 id="hadoop-2">11. 停止 hadoop集群</h2>

<pre><code>dev@master:~$ stop-all.sh 让 slave 节点也 可以启动 整个hadoop集群
</code></pre>

<h2 id="section-3">注意</h2>
<ol>
  <li>所有配置文件只能用hostname，不能用IP。两年前我不懂，还为此<a href="http://stackoverflow.com/questions/8702637/hadoop-conf-fs-default-name-cant-be-setted-ipport-format-directly">在stackoverflow上发了帖子</a>。hadoop会反向解析hostname，即使是用了IP，也会使用hostname 来启动TaskTracker。参考<a href="http://stackoverflow.com/questions/15230946/hdfs-lan-ip-address-hostname-resolution">hdfs LAN ip address hostname resolution</a>，<a href="http://www.makenotes.net/?p=337004">hadoop入门经验总结- 杨贵堂的博客</a>，<a href="http://51mst.iteye.com/blog/1152439">hadoop集群配置</a>。</li>
  <li>
    <p>stat-all.sh 启动后，刚刚开始，namenode的日志里有些异常，是正常的，过一两分钟就好了，如果两分钟后，还有异常不断在打印，就有问题了。datanode的日志，从一开始，正常情况下，就没有异常，如果报了异常，说明有异常，要去排除。</p>
  </li>
  <li>
    <p>masters文件，这个文件很容易被误解，它实际上存放的是secondarynamenode，而不是namenode。</p>

    <blockquote>
      <p>An HDFS instance is started on a cluster by logging in to the NameNode machine and running$HADOOP_HOME/bin/start-dfs.sh (orstart-all.sh ). This script. starts a local instance of the NameNode process, logs into every machine listed in theconf/slaves file and starts an instance of the DataNode process, and logs into every machine listed in theconf/masters file and starts an instance of the SecondaryNameNode process. Themasters file does not govern which nodes become NameNodes or JobTrackers; those are started on the machine(s) wherebin/start-dfs.sh andbin/start-mapred.sh are executed. A more accurate filename might be “secondaries,” but that’s not currently the case.</p>
    </blockquote>

    <p>参考以下三篇文章：
 <a href="http://www.cloudera.com/blog/2009/02/multi-host-secondarynamenode-configuration/">Multi-host SecondaryNameNode Configuration</a><br />
 <a href="http://blog.csdn.net/dajuezhao/article/details/5987580">SecondaryNamenode应用摘记</a>
 <a href="http://blog.csdn.net/AE86_FC/article/details/5284181">hadoop下运行多个SecondaryNameNode的配置</a></p>
  </li>
  <li>
    <p>一定要注释掉 hosts里面的 <code>#127.0.1.1      bogon.localdomain       bogon</code>，参考 <a href="http://blog.sina.com.cn/s/blog_631ffec50100w700.html">Hadoop集群机器命名机制</a>，<a href="http://blog.csdn.net/singno116/article/details/6298995">hadoop集群环境安装中的hosts 配置问题</a>。</p>
  </li>
  <li>当测试ssh是否能连通时，如果连接不上，先记得要关闭防火墙，<code>sudo ufw disable</code>，参考<a href="http://blog.csdn.net/make19830723/article/details/6230074">hadoop集群安装步骤</a>。</li>
</ol>

<h2 id="section-4">更新记录</h2>
<p>2012-01-03 针对 Ubuntu 13.04, Hadoop 1.1.2<br />
2012-01-03 针对 Ubuntu 10.04, Hadoop 1.0.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用javac命令行编译多个java文件]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20110623"/>
    <updated>2011-06-23T17:22:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-javac-to-compile-multi-java-files</id>
    <content type="html"><![CDATA[<ol>
  <li>CLASSPATH一定要具体到jar路径，例如</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span>/usr/lib/jvm/java-6-sun/lib/commons-codec.jar:/usr/lib/jvm/java-6-sun/lib/commons-httpclient-3.1.jar:/usr/lib/jvm/java-6-sun/lib/commons-logging-1.1.jar:/usr/lib/jvm/java-6-sun/lib/dt.jar:/usr/lib/jvm/java-6-sun/lib/htmlconverter.jar:/usr/lib/jvm/java-6-sun/lib/jconsole.jar:/usr/lib/jvm/java-6-sun/lib/junit-4.1.jar:/usr/lib/jvm/java-6-sun/lib/mysql-connector-java-5.1.16-bin.jar:/usr/lib/jvm/java-6-sun/lib/sa-jdi.jar:/usr/lib/jvm/java-6-sun/lib/tools.jar
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>每个java文件给出路径，最常见的是用通配符*，不支持目录递归。</p>
  </li>
  <li>
    <p>最好加上 -d，这样会在这个目录下生成class文件，而不会和java文件混在一起</p>
  </li>
</ol>

<p>看我的一个具体的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">javac -d /home/dfq/crawler/bin crawler/*.java weibo4j/*.java weibo4j/org/json/*.java weibo4j/*.java weibo4j/util/*.java weibo4j/http/*.java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行时用如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /home/dfq/crawler/bin
</span><span class="line">java -cp .:<span class="nv">$CLASSPATH</span> crawler.ManagerThread
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐给TeX新手的电子书和书籍]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20110417"/>
    <updated>2011-04-17T17:03:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/tex-resources-for-newbies</id>
    <content type="html"><![CDATA[<h2 id="ctex">CTEX自带的文档</h2>
<ol>
  <li>安装好CTEX后，c:CTEXCTeXctexdoc下的两个文档，ctex-faq.pdf和lshort-cn.pdf（即93 分钟学会 LaTeX2e）</li>
  <li>
    <p><a href="ftp://ftp.ctex.org/pub/tex/documents/bible/">ftp://ftp.ctex.org/pub/tex/documents/bible/</a> 下的 LaTeX_manual.zip
对于初学者，上面3个文档足够了，在c:CTEXCTeXctexdoc目录下的其他几个文档也非常好。</p>

    <p>如果想进一步学习，推荐下面一本书。</p>
  </li>
  <li><a href="http://www.amazon.cn/mn/detailApp/ref=sr_1_1?_encoding=UTF8&amp;s=books&amp;qid=1271499096&amp;asin=B00114JYBU&amp;sr=8-1">《LaTeX入门与提高》</a>，陈志杰，2008，高等教育出版社，卓越上有卖的。<a href="http://ishare.iask.sina.com.cn/f/7485622.html">这里有个PDF扫描版</a>。</li>
</ol>

<!-- more -->

<h2 id="section">网上的免费电子书：</h2>
<ul>
  <li><a href="http://gigapedia.com/items/104415/a-guide-to-latex--document-preparation-for-beginners-and-advanced-users--3rd-edition-">A Guide to LaTeX</a></li>
  <li>the latex companion，和第2个文档 LaTeX_manual 在同一个ftp目录下,还有<a href="http://gigapedia.com/items/3842/the-latex-companion--tools-and-techniques-for-computer-typesetting-">另一个下载地址</a>。</li>
  <li><a href="http://ftp.ctex.org/pub/tex/documents/texguru/homepage/guide.html">LaTeX2e使用手册</a></li>
  <li><a href="ftp://ftp.ctex.org/pub/tex/documents/bible/LaTeX_graphics.zip">LaTeX2e插图指南</a></li>
</ul>

<h2 id="section-1">参考资料</h2>
<ul>
  <li><a href="http://bbs.ctex.org/redirect.php?tid=31930&amp;goto=lastpost">陈志杰老师的《latex入门与提高》这本书怎么样啊？</a></li>
  <li><a href="http://bbs.ctex.org/viewthread.php?&amp;tid=1023">中国LaTeX 新用户，LaTeX中文必读教程</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于朴素贝叶斯的文本分类算法]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20100528"/>
    <updated>2010-05-28T17:15:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/text-classification-algorithm-based-on-naive-bayes</id>
    <content type="html"><![CDATA[<p>作者: 灵魂机器<br />
新浪博客：<a href="www.weibo.com/soulmachine">www.weibo.com/soulmachine</a><br />
作者博客：<a href="www.yanjiuyanjiu.com">www.yanjiuyanjiu.com</a></p>

<p><strong>摘要</strong>：常用的文本分类方法有支持向量机、K-近邻算法和朴素贝叶斯。其中朴素贝叶斯具有容易实现，运行速度快的特点，被广泛使用。本文详细介绍了朴素贝叶斯的基本原理，讨论了两种常见模型：多项式模型（MM）和伯努利模型（BM），实现了可运行的代码，并进行了一些数据测试。</p>

<p><strong>关键字</strong>：朴素贝叶斯；文本分类</p>

<p><strong>Text Classification Algorithm Based on Naive Bayes</strong><br />
<strong>Author</strong>: soulmachine<br />
<strong>Email</strong>：soulmachine@gmail.com<br />
<strong>Blog</strong>：<a href="www.yanjiuyanjiu.com">www.yanjiuyanjiu.com</a></p>

<p><strong>Abstract</strong>:Usually there are three methods for text classification: SVM、KNN and Naïve Bayes. Naïve Bayes is easy to implement and fast, so it is widely used. This article introduced the theory of Naïve Bayes and discussed two popular models: multinomial model(MM) and Bernoulli model(BM) in details, implemented runnable code and performed some data tests.</p>

<p><strong>Keywords</strong>: naïve bayes; text classification</p>

<h2 id="section">1 贝叶斯原理</h2>

<h3 id="section-1">1.1 贝叶斯公式</h3>

<p>设A、B是两个事件，且P(A)&gt;0，称 <script type="math/tex">P(Y \vert X)=\dfrac {P(XY)}{P(X)}</script> 为事件A发生的条件下事件B发生的<strong>条件概率</strong>。</p>

<p><strong>乘法公式</strong> <script type="math/tex">P(XYZ)=P(Z \vert XY)P(Y \vert X)P(X)</script><br />
<strong>全概率公式</strong>  <script type="math/tex">P(X)=P(X \vert Y_1)+ P(X \vert Y_2)+…+ P(X \vert Y_n)</script><br />
<strong>贝叶斯公式</strong>  <script type="math/tex">P(Y_i \vert X)=\dfrac{P(XY_i)}{P(X)}=\dfrac{P(X \vert Y_i)P(Y_i)}{P(X)}=\dfrac{P(X \vert Y_i)P(Y_i)}{\sum\limits _{j=1} ^{n} P(X \vert Y_j)}</script>  </p>

<p>在此处，贝叶斯公式，我们要用到的是 <script type="math/tex">P(Y_i \vert X)=\dfrac{P(X \vert Y_i)P(Y_i)}{P(X)}</script></p>

<p>以上公式，请读者参考<a href="http://book.douban.com/subject/1231189/">《概率论与数理统计（第五版）》</a>的1.4节“条件概率”（这里将原书中的A换成了X，B换成了Y），获得更深的理解。</p>

<!-- more -->

<h3 id="section-2">1.2 贝叶斯定理在分类中的应用</h3>
<p>在分类（classification）问题中，常常需要把一个事物分到某个类别。一个事物具有很多属性，把它的众多属性看做一个向量，即<script type="math/tex">x=(x_1,x_2,x_3,…,x_n)</script>，用x这个向量来代表这个事物。类别也是有很多种，用集合<script type="math/tex">Y={y_1,y_2,…y_m}</script>表示。如果x属于<script type="math/tex">y_1</script>类别，就可以给x打上<script type="math/tex">y_1</script>标签，意思是说x属于<script type="math/tex">y_1</script>类别。这就是所谓的<strong>分类(Classification)</strong>。</p>

<p>x的集合记为X，称为属性集。一般X和Y的关系是不确定的，你只能在某种程度上说x有多大可能性属于类<script type="math/tex">y_1</script>，比如说x有80%的可能性属于类<script type="math/tex">y_1</script>，这时可以把X和Y看做是随机变量，<script type="math/tex">P(Y \vert X)</script>称为Y的<strong>后验概率</strong>（posterior probability），与之相对的，P(Y)称为Y的<strong>先验概率</strong>（prior probability）<sup id="fnref:2"><a href="#fn:2" rel="footnote">1</a></sup>。</p>

<p>在训练阶段，我们要根据从训练数据中收集的信息，<strong>对X和Y的每一种组合学习后验概率<script type="math/tex">P(Y \vert X)</script>。</strong>分类时，来了一个实例x，在刚才训练得到的一堆后验概率中找出所有的<script type="math/tex">P(Y \vert x)</script>， 其中最大的那个y，即为x所属分类。根据贝叶斯公式，后验概率为<script type="math/tex">P(Y \vert X)=\dfrac{P(X \vert Y)P(Y)}{P(X)}</script></p>

<p>在比较不同Y值的后验概率时，分母P(X)总是常数，<strong>因此可以忽略</strong>。先验概率P(Y)可以通过计算训练集中属于每一个类的训练样本所占的比例容易地估计。</p>

<p>我们来举个简单的例子，让读者对上述思路有个形象的认识<sup id="fnref:3"><a href="#fn:3" rel="footnote">2</a></sup>。<br />
考虑一个医疗诊断问题，有两种可能的假设：（1）病人有癌症。（2）病人无癌症。样本数据来自某化验测试，它也有两种可能的结果：阳性和阴性。假设我们已经有先验知识：在所有人口中只有0.008的人患病。此外，化验测试对有病的患者有98%的可能返回阳性结果，对无病患者有97%的可能返回阴性结果。</p>

<p>上面的数据可以用以下概率式子表示：<br />
P(cancer)=0.008,P(无cancer)=0.992<br />
P(阳性|cancer)=0.98,P(阴性|cancer)=0.02<br />
P(阳性|无cancer)=0.03，P(阴性|无cancer)=0.97<br />
假设现在有一个新病人，化验测试返回阳性，是否将病人断定为有癌症呢？</p>

<p>在这里，Y={cancer，无cancer}，共两个类别，这个新病人是一个样本，他有一个属性阳性，可以令x=(阳性)。我们可以来计算各个类别的后验概率：<br />
P(cancer | 阳性) = P(阳性 | cancer)p(cancer)=0.98* 0.008 = 0.0078<br />
P(无cancer | 阳性) =P(阳性 | 无cancer)* p(无cancer)=0.03* 0.992 = 0.0298 <br />
因此，应该判断为无癌症。</p>

<table>
  <tbody>
    <tr>
      <td>在这个例子中，类条件概率，P(cancer</td>
      <td>阳性)和P(无cancer</td>
      <td>阳性)直接告诉了我们。</td>
    </tr>
  </tbody>
</table>

<p>一般地，对<strong>类条件概率<script type="math/tex">P(X \vert Y)</script></strong>的估计，有朴素贝叶斯分类器和贝叶斯信念网络两种方法，这里介绍朴素贝叶斯分类器。</p>

<h3 id="section-3">1.3 朴素贝叶斯分类器</h3>
<p><strong>1、条件独立性</strong><br />
给定类标号y，朴素贝叶斯分类器在估计类条件概率时假设属性之间条件独立。条件独立假设可以形式化的表达如下：<br />
$$
\prod\limits_{i=1}^{n} P(x_i  \vert Y=y)
$$
其中每个训练样本可用一个属性向量<script type="math/tex">X=(x_1,x_2,x_3,…,x_n)</script>表示，各个属性之间条件独立。</p>

<p>比如，对于一篇文章，</p>

<blockquote>
  <p>Good good study,Day day up.</p>
</blockquote>

<p>可以用一个文本特征向量来表示，<code>x=(Good, good, study, Day, day , up)</code>。一般各个词语之间肯定不是相互独立的，有一定的上下文联系。但在朴素贝叶斯文本分类时，我们假设个单词之间没有联系，可以用一个文本特征向量来表示这篇文章，这就是“朴素”的来历。</p>

<p><strong>2、朴素贝叶斯如何工作</strong><br />
<strong>有了条件独立假设，就不必计算X和Y的每一种组合的类条件概率</strong>，只需对给定的Y，计算每个<script type="math/tex">x_i</script>的条件概率。后一种方法更实用，因为它不需要很大的训练集就能获得较好的概率估计。</p>

<p><strong>3、估计分类属性的条件概率</strong><br />
<script type="math/tex">P(x_i \vert Y=y)</script>怎么计算呢？它一般根据类别y下包含属性<script type="math/tex">x_i</script>的实例的比例来估计。以文本分类为例，xi表示一个单词，<script type="math/tex">P(x_i \vert Y=y)=</script>包含该类别下包含单词的xi的文章总数/ 该类别下的文章总数。</p>

<p><strong>4、贝叶斯分类器举例</strong>
假设给定了如下训练样本数据，我们学习的目标是根据给定的天气状况判断你对PlayTennis这个请求的回答是Yes还是No。</p>

<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="95">Day</td>
<td valign="top" width="95">Outlook</td>
<td valign="top" width="95">Temperature</td>
<td valign="top" width="95">Humidity</td>
<td valign="top" width="95">Wind</td>
<td valign="top" width="95">PlayTennis</td>
</tr>
<tr>
<td valign="top" width="95">D1</td>
<td valign="top" width="95">Sunny</td>
<td valign="top" width="95">Hot</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">No</td>
</tr>
<tr>
<td valign="top" width="95">D2</td>
<td valign="top" width="95">Sunny</td>
<td valign="top" width="95">Hot</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">No</td>
</tr>
<tr>
<td valign="top" width="95">D3</td>
<td valign="top" width="95">Overcast</td>
<td valign="top" width="95">Hot</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D4</td>
<td valign="top" width="95">Rain</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D5</td>
<td valign="top" width="95">Rain</td>
<td valign="top" width="95">Cool</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D6</td>
<td valign="top" width="95">Rain</td>
<td valign="top" width="95">Cool</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">No</td>
</tr>
<tr>
<td valign="top" width="95">D7</td>
<td valign="top" width="95">Overcast</td>
<td valign="top" width="95">Cool</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D8</td>
<td valign="top" width="95">Sunny</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">No</td>
</tr>
<tr>
<td valign="top" width="95">D9</td>
<td valign="top" width="95">Sunny</td>
<td valign="top" width="95">Cool</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D10</td>
<td valign="top" width="95">Rain</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D11</td>
<td valign="top" width="95">Sunny</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D12</td>
<td valign="top" width="95">Overcast</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D13</td>
<td valign="top" width="95">Overcast</td>
<td valign="top" width="95">Hot</td>
<td valign="top" width="95">Normal</td>
<td valign="top" width="95">Weak</td>
<td valign="top" width="95">Yes</td>
</tr>
<tr>
<td valign="top" width="95">D14</td>
<td valign="top" width="95">Rain</td>
<td valign="top" width="95">Mild</td>
<td valign="top" width="95">High</td>
<td valign="top" width="95">Strong</td>
<td valign="top" width="95">No</td>
</tr>
</tbody>
</table>
<p>可以看到这里样本数据集提供了14个训练样本，我们将使用此表的数据，并结合朴素贝叶斯分类器来分类下面的新实例：<br />
x = (Outlook = Sunny,Temprature = Cool,Humidity = High,Wind = Strong)</p>

<p>在这个例子中，属性向量X=(Outlook, Temperature, Humidity, Wind)，类集合Y={Yes, No}。我们需要利用训练数据计算后验概率<script type="math/tex">P(Yes \vert x)</script>和<script type="math/tex">P(No \vert x)</script>，如果<script type="math/tex">P(Yes \vert x)>P(No \vert x)</script>，那么新实例分类为Yes，否则为No。</p>

<p>为了计算后验概率，我们需要计算先验概率P(Yes)和P(No)和类条件概率<script type="math/tex">P(x_i \vert Y)</script>。</p>

<p>因为有9个样本属于Yes，5个样本属于No，所以<script type="math/tex">P(Yes)=\dfrac{9}{14}</script>, <script type="math/tex">P(No)=\dfrac{5}{14}</script>。类条件概率计算如下：<br />
<script type="math/tex">P(Outlook = Sunny \vert Yes)=\dfrac{2}{9}　　　P(Outlook = Sunny \vert No)=\dfrac{3}{5}</script><br />
<script type="math/tex">P(Temprature = Cool  \vert Yes) =\dfrac{3}{9}　　　P(Temprature = Cool  \vert No) =\dfrac{1}{5}</script><br />
<script type="math/tex">P(Humidity = High  \vert Yes) =\dfrac{3}{9}　　　P(Humidity = High  \vert No) =\dfrac{4}{5}</script>
<script type="math/tex">P(Wind = Strong  \vert Yes) =\dfrac{3}{9}　　　P(Wind = Strong  \vert No) =\dfrac{3}{5}</script>    </p>

<p>后验概率计算如下：
$$
\begin{aligned}
P(Yes  \vert  x) &amp; = P(Outlook = Sunny \vert Yes) \times P(Temprature = Cool  \vert Yes) \newline
&amp; \times P(Humidity = High  \vert Yes) \times P(Wind = Strong  \vert Yes) \times P(Yes) \newline
&amp; =\dfrac{2}{9} \times \dfrac{3}{9} \times \dfrac{3}{9} \times \dfrac{3}{9} \times \dfrac{3}{9} \times \dfrac{9}{14}=\dfrac{2}{243}=\dfrac{9}{1701} \approx 0.00529
\end{aligned}
$$
$$
\begin{aligned}
P(No  \vert  x)&amp;= P(Outlook = Sunny \vert No) \times P(Temprature = Cool  \vert No) \newline
&amp; \times P(Humidity = High  \vert No) \times P(Wind = Strong  \vert No) \times P(No) \newline
&amp; =\dfrac{3}{5}\times \dfrac{1}{5} \times \dfrac{4}{5} \times \dfrac{3}{5} \times  \dfrac{5}{14}=\dfrac{18}{875} \approx 0.02057
\end{aligned}
$$
通过计算得出<script type="math/tex">P(No  \vert  x)> P(Yes  \vert  x)</script>，所以该样本分类为No[^3]。</p>

<p><strong>5、条件概率的m估计</strong><br />
假设有来了一个新样本 <script type="math/tex">x_1= (Outlook = Cloudy,Temprature = Cool,Humidity = High,Wind = Strong)</script>，要求对其分类。我们来开始计算，<br />
<script type="math/tex">P(Outlook = Cloudy \vert Yes)=\dfrac{0}{9}=0  P(Outlook = Cloudy  \vert No)=\dfrac{0}{5}=0</script><br />
计算到这里，大家就会意识到，这里出现了一个新的属性值，在训练样本中所没有的。如果有一个属性的类条件概率为0，则整个类的后验概率就等于0，我们可以直接得到后验概率<script type="math/tex">P(Yes  \vert  x_1)= P(No  \vert  x_1)=0</script>，这时二者相等，无法分类。</p>

<p>当训练样本不能覆盖那么多的属性值时，都会出现上述的窘境。简单的使用样本比例来估计类条件概率的方法太脆弱了，尤其是当训练样本少而属性数目又很大时。</p>

<p>解决方法是使用m估计(m-estimate)方法来估计条件概率：
$$
P(x_i \vert y_i)=\dfrac{n_c+mp}{n+m}
$$
n是类<script type="math/tex">y_j</script>中的样本总数，<script type="math/tex">n_c</script>是类<script type="math/tex">y_j</script>中取值<script type="math/tex">x_i</script>的样本数，m是称为等价样本大小的参数，而p是用户指定的参数。如果没有训练集（即n=0），则<script type="math/tex">P(x_i \vert y_i)=p</script>, 因此p可以看作是在类<script type="math/tex">y_j</script>的样本中观察属性值<script type="math/tex">x_i</script>的先验概率。等价样本大小决定先验概率和观测概率<script type="math/tex">\dfrac{n_c}{n}</script>之间的平衡[^2]。</p>

<h2 id="section-4">2 朴素贝叶斯文本分类算法</h2>
<p>现在开始进入本文的主旨部分：如何将贝叶斯分类器应用到文本分类上来。</p>

<h3 id="section-5">2.1文本分类问题</h3>
<p>在文本分类中，假设我们有一个文档d∈X，X是文档向量空间(document space)，和一个固定的类集合C={c1,c2,…,cj}，类别又称为标签。显然，文档向量空间是一个高维度空间。我们把一堆打了标签的文档集合&lt;d,c&gt;作为训练样本，&lt;d,c&gt;∈X×C。例如：<br />
&lt;d,c&gt;={Beijing joins the World Trade Organization, China}<br />
对于这个只有一句话的文档，我们把它归类到 China，即打上china标签。</p>

<p>我们期望用某种训练算法，训练出一个函数γ，能够将文档映射到某一个类别：
γ:X→C</p>

<p>这种类型的学习方法叫做有监督学习，因为事先有一个监督者（我们事先给出了一堆打好标签的文档）像个老师一样监督着整个学习过程。</p>

<p>朴素贝叶斯分类器是一种有监督学习，常见有两种模型，多项式模型(multinomial model)和伯努利模型(Bernoulli model)<sup id="fnref:4"><a href="#fn:4" rel="footnote">3</a></sup>。</p>

<h3 id="section-6">2.2 多项式模型</h3>

<h4 id="section-7">2.2.1 基本原理</h4>
<p>在多项式模型中， 设某文档<script type="math/tex">d=(t_1,t_2,…,t_k)</script>，tk是该文档中出现过的单词，允许重复，则<br />
先验概率<script type="math/tex">P(c)=</script> 类c下单词总数/整个训练样本的单词总数<br />
类条件概率<script type="math/tex">P(t_k \vert c)=</script>(类c下单词tk在各个文档中出现过的次数之和+1)/(类c下单词总数+|V|)</p>

<p>V是训练样本的单词表（即抽取单词，单词出现多次，只算一个），<code>|V|</code>则表示训练样本包含多少种单词。在这里，<code>m=|V|, p=1/|V|</code>。</p>

<p><script type="math/tex">P(t_k \vert c)=</script>可以看作是单词tk在证明d属于类c上提供了多大的证据，而P(c)则可以认为是类别c在整体上占多大比例(有多大可能性)。</p>

<h4 id="section-8">2.2.2 伪代码<sup id="fnref:1"><a href="#fn:1" rel="footnote">4</a></sup></h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//C，类别集合，D，用于训练的文本文件集合</span>
</span><span class="line"><span class="n">TrainMultiNomialNB</span><span class="o">(</span><span class="n">C</span><span class="o">,</span><span class="n">D</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// 单词出现多次，只算一个</span>
</span><span class="line">    <span class="n">V</span><span class="err">←</span><span class="n">ExtractVocabulary</span><span class="o">(</span><span class="n">D</span><span class="o">)</span>
</span><span class="line">    <span class="c1">// 单词可重复计算</span>
</span><span class="line">    <span class="n">N</span><span class="err">←</span><span class="n">CountTokens</span><span class="o">(</span><span class="n">D</span><span class="o">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">each</span> <span class="n">c</span><span class="err">∈</span><span class="n">C</span>
</span><span class="line">        <span class="c1">// 计算类别c下的单词总数</span>
</span><span class="line">        <span class="c1">// N和Nc的计算方法和Introduction to Information Retrieval上的不同，个人认为</span>
</span><span class="line">        <span class="c1">//该书是错误的，先验概率和类条件概率的计算方法应当保持一致</span>
</span><span class="line">        <span class="n">Nc</span><span class="err">←</span><span class="n">CountTokensInClass</span><span class="o">(</span><span class="n">D</span><span class="o">,</span><span class="n">c</span><span class="o">)</span>
</span><span class="line">        <span class="n">prior</span><span class="o">[</span><span class="n">c</span><span class="o">]</span><span class="err">←</span><span class="n">Nc</span><span class="o">/</span><span class="n">N</span>
</span><span class="line">        <span class="c1">// 将类别c下的文档连接成一个大字符串</span>
</span><span class="line">        <span class="n">textc</span><span class="err">←</span><span class="n">ConcatenateTextOfAllDocsInClass</span><span class="o">(</span><span class="n">D</span><span class="o">,</span><span class="n">c</span><span class="o">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">each</span> <span class="n">t</span><span class="err">∈</span><span class="n">V</span>
</span><span class="line">            <span class="c1">// 计算类c下单词t的出现次数</span>
</span><span class="line">            <span class="n">Tct</span><span class="err">←</span><span class="n">CountTokensOfTerm</span><span class="o">(</span><span class="n">textc</span><span class="o">,</span><span class="n">t</span><span class="o">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">each</span> <span class="n">t</span><span class="err">∈</span><span class="n">V</span>
</span><span class="line">            <span class="c1">//计算P(t|c)</span>
</span><span class="line">            <span class="n">condprob</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">c</span><span class="o">]</span><span class="err">←</span>
</span><span class="line">    <span class="k">return</span> <span class="n">V</span><span class="o">,</span><span class="n">prior</span><span class="o">,</span><span class="n">condprob</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">ApplyMultiNomialNB</span><span class="o">(</span><span class="n">C</span><span class="o">,</span><span class="n">V</span><span class="o">,</span><span class="n">prior</span><span class="o">,</span><span class="n">condprob</span><span class="o">,</span><span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// 将文档d中的单词抽取出来，允许重复，如果单词是全新的，在全局单词表V中都</span>
</span><span class="line">    <span class="c1">// 没出现过，则忽略掉</span>
</span><span class="line">    <span class="n">W</span><span class="err">←</span><span class="n">ExtractTokensFromDoc</span><span class="o">(</span><span class="n">V</span><span class="o">,</span><span class="n">d</span><span class="o">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">each</span> <span class="n">c</span><span class="err">∈</span><span class="n">C</span>
</span><span class="line">        <span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">]</span><span class="err">←</span><span class="n">prior</span><span class="o">[</span><span class="n">c</span><span class="o">]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">each</span> <span class="n">t</span><span class="err">∈</span><span class="n">W</span>
</span><span class="line">            <span class="k">if</span> <span class="n">t</span><span class="err">∈</span><span class="n">Vd</span>
</span><span class="line">                <span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">*=</span> <span class="n">condprob</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">c</span><span class="o">]</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">max</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">])</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-9">2.2.3 举例</h4>
<p>给定一组分类好了的文本训练数据，如下：  </p>

<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="64">docId</td>
<td valign="top" width="236">doc</td>
<td valign="top" width="126">类别In c=China?</td>
</tr>
<tr>
<td valign="top" width="64">1</td>
<td valign="top" width="236">Chinese Beijing Chinese</td>
<td valign="top" width="126">yes</td>
</tr>
<tr>
<td valign="top" width="64">2</td>
<td valign="top" width="236">Chinese Chinese Shanghai</td>
<td valign="top" width="126">yes</td>
</tr>
<tr>
<td valign="top" width="64">3</td>
<td valign="top" width="236">Chinese Macao</td>
<td valign="top" width="126">yes</td>
</tr>
<tr>
<td valign="top" width="64">4</td>
<td valign="top" width="236">Tokyo Japan Chinese</td>
<td valign="top" width="126">no</td>
</tr>
</tbody>
</table>

<p>给定一个新样本
&gt; Chinese Chinese Chinese Tokyo Japan</p>

<p>对其进行分类。该文本用属性向量表示为<code>d=(Chinese, Chinese, Chinese, Tokyo, Japan)</code>，类别集合为<code>Y={yes, no}</code>。</p>

<p>类yes下总共有8个单词，类no下总共有3个单词，训练样本单词总数为11，因此<script type="math/tex">P(yes)=\dfrac{8}{11}, P(no)=\dfrac{3}{11}</script>。类条件概率计算如下：<br />
<script type="math/tex">P(Chinese  \vert  yes)=\dfrac{5+1}{8+6}=\dfrac{6}{14}=\dfrac{3}{7}</script><br />
<script type="math/tex">P(Japan  \vert  yes)=P(Tokyo  \vert  yes)= \dfrac{0+1}{8+6}=\dfrac{1}{14}</script><br />
<script type="math/tex">P(Chinese \vert no)=\dfrac{1+1}{3+6}=\dfrac{2}{9}</script><br />
<script type="math/tex">P(Japan \vert no)=P(Tokyo \vert  no) =\dfrac{1+1}{3+6}=\dfrac{2}{9}</script><br />
分母中的8，是指yes类别下textc的长度，也即训练样本的单词总数，6是指训练样本有Chinese,Beijing,Shanghai, Macao, Tokyo, Japan 共6个单词，3是指no类下共有3个单词。</p>

<p>有了以上类条件概率，开始计算后验概率，<br />
<script type="math/tex">P(yes  \vert  d)=\left(\dfrac{3}{7}\right)^3 \times \dfrac{1}{14} \times \dfrac{1}{14} \times \dfrac{8}{11}=\dfrac{108}{184877} \approx 0.00058417</script><br />
<script type="math/tex">P(no  \vert  d)= \left(\dfrac{2}{9}\right)^3 \times \dfrac{2}{9} \times \dfrac{2}{9} \times \dfrac{3}{11}=\dfrac{32}{216513} \approx 0.00014780</script><br />
因此，这个文档属于类别china。</p>

<h3 id="section-10">2.3 伯努利模型</h3>

<h4 id="section-11">2.3.1 基本原理</h4>
<p><script type="math/tex">P(c)=</script> 类c下文件总数/整个训练样本的文件总数<br />
<script type="math/tex">P(t_k \vert c)=</script>(类c下包含单词tk的文件数+1)/(类c下单词总数+2)<br />
在这里，<script type="math/tex">m=2, p=\dfrac{1}{2}</script>。</p>

<p>后验概率的计算，也有点变化，见下面的伪代码。</p>

<h4 id="section-12">2.3.2 伪代码</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//C，类别集合，D，用于训练的文本文件集合</span>
</span><span class="line"><span class="n">TrainBernoulliNB</span><span class="o">(</span><span class="n">C</span><span class="o">,</span> <span class="n">D</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// 单词出现多次，只算一个</span>
</span><span class="line"><span class="n">V</span><span class="err">←</span><span class="n">ExtractVocabulary</span><span class="o">(</span><span class="n">D</span><span class="o">)</span>
</span><span class="line">    <span class="c1">// 计算文件总数</span>
</span><span class="line">    <span class="n">N</span><span class="err">←</span><span class="n">CountDocs</span><span class="o">(</span><span class="n">D</span><span class="o">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">each</span> <span class="n">c</span><span class="err">∈</span><span class="n">C</span>
</span><span class="line">        <span class="c1">// 计算类别c下的文件总数</span>
</span><span class="line">        <span class="n">Nc</span><span class="err">←</span><span class="n">CountDocsInClass</span><span class="o">(</span><span class="n">D</span><span class="o">,</span><span class="n">c</span><span class="o">)</span>
</span><span class="line">        <span class="n">prior</span><span class="o">[</span><span class="n">c</span><span class="o">]</span><span class="err">←</span><span class="n">Nc</span><span class="o">/</span><span class="n">N</span>
</span><span class="line">        <span class="k">for</span> <span class="n">each</span> <span class="n">t</span><span class="err">∈</span><span class="n">V</span>
</span><span class="line">            <span class="c1">// 计算类c下包含单词t的文件数</span>
</span><span class="line">            <span class="n">Nct</span><span class="err">←</span><span class="n">CountDocsInClassContainingTerm</span><span class="o">(</span><span class="n">D</span><span class="o">,</span><span class="n">c</span><span class="o">,</span><span class="n">t</span><span class="o">)</span>
</span><span class="line">            <span class="c1">//计算P(t|c)</span>
</span><span class="line">            <span class="n">condprob</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">c</span><span class="o">]</span><span class="err">←</span><span class="o">(</span><span class="n">Nct</span><span class="o">+</span><span class="mi">1</span><span class="o">)/(</span><span class="n">Nct</span><span class="o">+</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">V</span><span class="o">,</span><span class="n">prior</span><span class="o">,</span><span class="n">condprob</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">ApplyBernoulliNB</span><span class="o">(</span><span class="n">C</span><span class="o">,</span><span class="n">V</span><span class="o">,</span><span class="n">prior</span><span class="o">,</span><span class="n">condprob</span><span class="o">,</span><span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// 将文档d中单词表抽取出来，如果单词是全新的，在全局单词表V中都没出现过，</span>
</span><span class="line">    <span class="c1">// 则舍弃</span>
</span><span class="line">    <span class="n">Vd</span><span class="err">←</span><span class="n">ExtractTermsFromDoc</span><span class="o">(</span><span class="n">V</span><span class="o">,</span><span class="n">d</span><span class="o">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">each</span> <span class="n">c</span><span class="err">∈</span><span class="n">C</span>
</span><span class="line">        <span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">]</span><span class="err">←</span><span class="n">prior</span><span class="o">[</span><span class="n">c</span><span class="o">]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">each</span> <span class="n">t</span><span class="err">∈</span><span class="n">V</span>
</span><span class="line">            <span class="k">if</span> <span class="n">t</span><span class="err">∈</span><span class="n">Vd</span>
</span><span class="line">                <span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">*=</span> <span class="n">condprob</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">c</span><span class="o">]</span>
</span><span class="line">            <span class="k">else</span>
</span><span class="line">                <span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">*=</span> <span class="o">(</span><span class="mi">1</span><span class="o">-</span><span class="n">condprob</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">c</span><span class="o">])</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">max</span><span class="o">(</span><span class="n">score</span><span class="o">[</span><span class="n">c</span><span class="o">])</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-13">2.3.3 举例</h4>
<p>还是使用前面例子中的数据，不过模型换成了使用伯努利模型。</p>

<p>类yes下总共有3个文件，类no下有1个文件，训练样本文件总数为11，因此<script type="math/tex">P(yes)=\dfrac{3}{4}, P(Chinese  \vert  yes)=\dfrac{3+1}{3+2}=\dfrac{4}{5}</script><br />
<script type="math/tex">P(Japan  \vert  yes)=P(Tokyo  \vert  yes)=\dfrac{0+1}{3+2}=\dfrac{1}{5}</script><br />
<script type="math/tex">P(Beijing  \vert  yes)= P(Macao \vert yes)= P(Shanghai  \vert yes)=\dfrac{1+1}{3+2}=\dfrac{2}{5}</script><br />
<script type="math/tex">P(Chinese \vert no)=\dfrac{1+1}{1+2}=\dfrac{2}{3}</script><br />
<script type="math/tex">P(Japan \vert no)=P(Tokyo \vert  no) =\dfrac{1+1}{1+2}=\dfrac{2}{3}</script><br />
<script type="math/tex">P(Beijing \vert  no)= P(Macao \vert  no)= P(Shanghai  \vert  no)=\dfrac{0+1}{1+2}=\dfrac{1}{3}</script>  </p>

<p>有了以上类条件概率，开始计算后验概率，<br />
$$
\begin{aligned}
P(yes  \vert  d)&amp;=P(yes) \times P(Chinese \vert yes) \times P(Japan \vert yes) \times P(Tokyo \vert yes) \newline
&amp;\times (1-P(Beijing \vert yes)) \times (1-P(Shanghai \vert yes))\newline
&amp;\times (1-P(Macao \vert yes)) \newline
&amp;=\dfrac{3}{4} \times \dfrac{4}{5} \times \dfrac{1}{5} \times \dfrac{1}{5} \times (1-\dfrac{2}{5} \times (1-\dfrac{2}{5}) \times (1-\dfrac{2}{5})=\dfrac{81}{15625} \approx 0.005
\end{aligned}
$$
<script type="math/tex">P(no   \vert   d)= \dfrac{1}{4} \times \dfrac{2}{3} \times \dfrac{2}{5} \times \dfrac{2}{5} \times (1-\dfrac{1}{3}) \times (1-\dfrac{1}{3}) \times (1-\dfrac{1}{3})=\dfrac{16}{729} \approx 0.022</script><br />
因此，这个文档不属于类别china。</p>

<h3 id="section-14">2.4 两个模型的区别</h3>
<p>二者的计算粒度不一样，多项式模型以单词为粒度，伯努利模型以文件为粒度，因此二者的先验概率和类条件概率的计算方法都不同。</p>

<p>计算后验概率时，对于一个文档d，多项式模型中，只有在d中出现过的单词，才会参与后验概率计算，伯努利模型中，没有在d中出现，但是在全局单词表中出现的单词，也会参与计算，不过是作为“反方”参与的。</p>

<h2 id="section-15">3 代码详解</h2>
<p>本文附带了一个eclipse工程，有完整的源代码，以及一个微型文本训练库。</p>

<p>ChineseSpliter用于中文分词，StopWordsHandler用于判断一个单词是否是停止词，ClassifyResult用于保存结果，IntermediateData用于预处理文本语料库，TrainnedModel用于保存训练后得到的数据，NaiveBayesClassifier是基础类，包含了贝叶斯分类器的主要代码，MultiNomialNB是多项式模型，类似的，BernoulliNB是伯努利模型，二者都继承自NaiveBayesClassifier，都只重写了父类的计算先验概率，类条件概率和后验概率这3个函数。</p>

<h3 id="section-16">3.1 中文分词</h3>
<p>中文分词不是本文的重点，这里我们直接使用第三方工具，本源码使用的是<a href="http://www.jesoft.cn/">极易中文分词组件</a>，你还可以使用<a href="http://chtsai.org/">MMSEG</a>，中科院的<a href="http://ictclas.org/">ICTCLAS</a>等等。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 对给定的文本进行中文分词.</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param text</span>
</span><span class="line"><span class="cm">     *            给定的文本</span>
</span><span class="line"><span class="cm">     * @param splitToken</span>
</span><span class="line"><span class="cm">     *            用于分割的标记,如&quot;|&quot;</span>
</span><span class="line"><span class="cm">     * @return 分词完毕的文本</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">split</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">splitToken</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span> <span class="o">=</span> <span class="n">analyzer</span><span class="o">.</span><span class="na">segment</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">splitToken</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-17">3.2 停止词处理</h3>
<p>停止词(Stop Word)是指那些无意义的字或词，如“的”、“在”等。去掉文档中的停止词也是必须的一项工作,这里简单的定义了一些常见的停止词，并根据这些常用停止词在分词时进行判断。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 常用停用词. */</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">stopWordsList</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 来自 c:\Windows\System32\NOISE.CHS</span>
</span><span class="line">            <span class="s">&quot;的&quot;</span><span class="o">,</span> <span class="s">&quot;一&quot;</span><span class="o">,</span> <span class="s">&quot;不&quot;</span><span class="o">,</span> <span class="s">&quot;在&quot;</span><span class="o">,</span> <span class="s">&quot;人&quot;</span><span class="o">,</span> <span class="s">&quot;有&quot;</span><span class="o">,</span> <span class="s">&quot;是&quot;</span><span class="o">,</span> <span class="s">&quot;为&quot;</span><span class="o">,</span> <span class="s">&quot;以&quot;</span><span class="o">,</span> <span class="s">&quot;于&quot;</span><span class="o">,</span> <span class="s">&quot;上&quot;</span><span class="o">,</span> <span class="s">&quot;他&quot;</span><span class="o">,</span> <span class="s">&quot;而&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="s">&quot;后&quot;</span><span class="o">,</span> <span class="s">&quot;之&quot;</span><span class="o">,</span> <span class="s">&quot;来&quot;</span><span class="o">,</span> <span class="s">&quot;及&quot;</span><span class="o">,</span> <span class="s">&quot;了&quot;</span><span class="o">,</span> <span class="s">&quot;因&quot;</span><span class="o">,</span> <span class="s">&quot;下&quot;</span><span class="o">,</span> <span class="s">&quot;可&quot;</span><span class="o">,</span> <span class="s">&quot;到&quot;</span><span class="o">,</span> <span class="s">&quot;由&quot;</span><span class="o">,</span> <span class="s">&quot;这&quot;</span><span class="o">,</span> <span class="s">&quot;与&quot;</span><span class="o">,</span> <span class="s">&quot;也&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="s">&quot;此&quot;</span><span class="o">,</span> <span class="s">&quot;但&quot;</span><span class="o">,</span> <span class="s">&quot;并&quot;</span><span class="o">,</span> <span class="s">&quot;个&quot;</span><span class="o">,</span> <span class="s">&quot;其&quot;</span><span class="o">,</span> <span class="s">&quot;已&quot;</span><span class="o">,</span> <span class="s">&quot;无&quot;</span><span class="o">,</span> <span class="s">&quot;小&quot;</span><span class="o">,</span> <span class="s">&quot;我&quot;</span><span class="o">,</span> <span class="s">&quot;们&quot;</span><span class="o">,</span> <span class="s">&quot;起&quot;</span><span class="o">,</span> <span class="s">&quot;最&quot;</span><span class="o">,</span> <span class="s">&quot;再&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="s">&quot;今&quot;</span><span class="o">,</span> <span class="s">&quot;去&quot;</span><span class="o">,</span> <span class="s">&quot;好&quot;</span><span class="o">,</span> <span class="s">&quot;只&quot;</span><span class="o">,</span> <span class="s">&quot;又&quot;</span><span class="o">,</span> <span class="s">&quot;或&quot;</span><span class="o">,</span> <span class="s">&quot;很&quot;</span><span class="o">,</span> <span class="s">&quot;亦&quot;</span><span class="o">,</span> <span class="s">&quot;某&quot;</span><span class="o">,</span> <span class="s">&quot;把&quot;</span><span class="o">,</span> <span class="s">&quot;那&quot;</span><span class="o">,</span> <span class="s">&quot;你&quot;</span><span class="o">,</span> <span class="s">&quot;乃&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="s">&quot;它&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="c1">// 来自网络</span>
</span><span class="line">            <span class="s">&quot;要&quot;</span><span class="o">,</span> <span class="s">&quot;将&quot;</span><span class="o">,</span> <span class="s">&quot;应&quot;</span><span class="o">,</span> <span class="s">&quot;位&quot;</span><span class="o">,</span> <span class="s">&quot;新&quot;</span><span class="o">,</span> <span class="s">&quot;两&quot;</span><span class="o">,</span> <span class="s">&quot;中&quot;</span><span class="o">,</span> <span class="s">&quot;更&quot;</span><span class="o">,</span> <span class="s">&quot;我们&quot;</span><span class="o">,</span> <span class="s">&quot;自己&quot;</span><span class="o">,</span> <span class="s">&quot;没有&quot;</span><span class="o">,</span> <span class="s">&quot;“&quot;</span><span class="o">,</span> <span class="s">&quot;”&quot;</span><span class="o">,</span>
</span><span class="line">            <span class="s">&quot;，&quot;</span><span class="o">,</span> <span class="s">&quot;（&quot;</span><span class="o">,</span> <span class="s">&quot;）&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span> <span class="o">};</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 判断一个词是否是停止词.</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param word</span>
</span><span class="line"><span class="cm">     *            要判断的词</span>
</span><span class="line"><span class="cm">     * @return 是停止词，返回true，否则返回false</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isStopWord</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stopWordsList</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">stopWordsList</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-18">3.3 预处理数据</h3>
<p>我们这里使用<a href="http://www.sogou.com/labs/dl/c.html">搜狗的文本分类语料库</a>作为训练样本，把SogouC.reduced.20061102.tar.gz解压到D盘，目录结构为</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">D:<span class="se">\R</span>educed
</span><span class="line">         |-- C000008
</span><span class="line">         |-- C000010
</span><span class="line">         |-- C000013
</span><span class="line">         |-- C000014
</span><span class="line">         |-- C000016
</span><span class="line">         |-- C000020
</span><span class="line">         |-- C000022
</span><span class="line">         |-- C000023
</span><span class="line">         |-- C000024
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>IntermediateData.java主要用于处理文本数据，将所需要的信息计算好，存放到数据库文件中。</p>

<p>中间数据文件主要保存了如下信息，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 单词X在类别C下出现的总数. */</span>
</span><span class="line">	<span class="kd">public</span> <span class="n">HashMap</span><span class="o">[]</span> <span class="n">filesOfXC</span><span class="o">;</span>
</span><span class="line">	<span class="cm">/** 给定分类下的文件数目. */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">filesOfC</span><span class="o">;</span>
</span><span class="line">    <span class="cm">/** 根目录下的文件总数. */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">files</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/** 单词X在类别C下出现的总数 */</span>
</span><span class="line">	<span class="kd">public</span> <span class="n">HashMap</span><span class="o">[]</span> <span class="n">tokensOfXC</span><span class="o">;</span>
</span><span class="line">    <span class="cm">/** 类别C下所有单词的总数. */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">tokensOfC</span><span class="o">;</span>
</span><span class="line">    <span class="cm">/** 整个语料库中单词的总数. */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">tokens</span><span class="o">;</span>
</span><span class="line">    <span class="cm">/** 整个训练语料所出现的单词. */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">vocabulary</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们使用命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">IntermediateData d:<span class="se">\R</span>educed<span class="se">\ </span>gbk d:<span class="se">\r</span>educed.db
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将文本训练库的信息计算好，保存到中间文件中。以后的阶段，我们都不再需要文本语料库了，只需要reduced.db。</p>

<h3 id="section-19">3.3 训练</h3>
<p>基本的框架代码都在NaiveBayesClassifier中，MultiNomialNB和BernoulliNB都只是重新实现(override)了这三个函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 计算先验概率P(c). */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">calculatePc</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/** 计算类条件概率P(x|c). */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">calculatePxc</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 计算文本属性向量X在类Cj下的后验概率P(Cj|X).</span>
</span><span class="line"><span class="cm">     * </span>
</span><span class="line"><span class="cm">     * @param x</span>
</span><span class="line"><span class="cm">     *            文本属性向量</span>
</span><span class="line"><span class="cm">     * @param cj</span>
</span><span class="line"><span class="cm">     *            给定的类别</span>
</span><span class="line"><span class="cm">     * @return 后验概率</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">calcProd</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">cj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>训练函数如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">train</span><span class="o">(</span><span class="n">String</span> <span class="n">intermediateData</span><span class="o">,</span> <span class="n">String</span> <span class="n">modelFile</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    	<span class="c1">// 加载中间数据文件</span>
</span><span class="line">    	<span class="n">loadData</span><span class="o">(</span><span class="n">intermediateData</span><span class="o">);</span>
</span><span class="line">    	
</span><span class="line">    	<span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TrainnedModel</span><span class="o">(</span><span class="n">db</span><span class="o">.</span><span class="na">classifications</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">    	
</span><span class="line">    	<span class="n">model</span><span class="o">.</span><span class="na">classifications</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">classifications</span><span class="o">;</span>
</span><span class="line">    	<span class="n">model</span><span class="o">.</span><span class="na">vocabulary</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">vocabulary</span><span class="o">;</span>
</span><span class="line">    	<span class="c1">// 开始训练</span>
</span><span class="line">    	<span class="n">calculatePc</span><span class="o">();</span>
</span><span class="line">    	<span class="n">calculatePxc</span><span class="o">();</span>
</span><span class="line">    	<span class="n">db</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    	
</span><span class="line">    	<span class="k">try</span> <span class="o">{</span>
</span><span class="line">    		<span class="c1">// 用序列化，将训练得到的结果存放到模型文件中</span>
</span><span class="line">            <span class="n">ObjectOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span>
</span><span class="line">                    <span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="n">modelFile</span><span class="o">));</span>
</span><span class="line">            <span class="n">out</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
</span><span class="line">            <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们使用命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">MultiNomialNB –t d:<span class="se">\r</span>educed.db d:<span class="se">\r</span>educed.mdl
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>开始训练，得到的模型文件保存在reduced.mdl中。</p>

<h3 id="section-20">3.4 分类</h3>
<p>有了模型文件，就可以用它来进行分类了。</p>

<p>可以使用命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">MultiNomialNB d:<span class="se">\r</span>educed.mdl d:<span class="se">\t</span>emp.txt gbk
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>对文本文件temp.txt进行分类。</p>

<p>还可以将当初训练出这个模型文件的文本库，进行分类，看看正确率有多少，即“吃自己的狗食”，命令行如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">MultiNomialNB -r d:<span class="se">\r</span>educed<span class="se">\ </span>gbk d:<span class="se">\r</span>educed.mdl
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>分类函数如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 对给定的文本进行分类.</span>
</span><span class="line"><span class="cm"> * </span>
</span><span class="line"><span class="cm"> * @param text</span>
</span><span class="line"><span class="cm"> *            给定的文本</span>
</span><span class="line"><span class="cm"> * @return 分类结果</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">classify</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">String</span><span class="o">[]</span> <span class="n">terms</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="c1">// 中文分词处理(分词后结果可能还包含有停用词）</span>
</span><span class="line"><span class="n">terms</span> <span class="o">=</span> <span class="n">textSpliter</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="s">&quot; &quot;</span><span class="o">).</span><span class="na">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class="line">    <span class="c1">// 去掉停用词，以免影响分类</span>
</span><span class="line">    <span class="n">terms</span> <span class="o">=</span> <span class="n">ChineseSpliter</span><span class="o">.</span><span class="na">dropStopWords</span><span class="o">(</span><span class="n">terms</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">double</span> <span class="n">probility</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class="line">    <span class="c1">// 分类结果</span>
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">ClassifyResult</span><span class="o">&gt;</span> <span class="n">crs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ClassifyResult</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">model</span><span class="o">.</span><span class="na">classifications</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// 计算给定的文本属性向量terms在给定的分类Ci中的分类条件概率</span>
</span><span class="line">        <span class="n">probility</span> <span class="o">=</span> <span class="n">calcProd</span><span class="o">(</span><span class="n">terms</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class="line">        <span class="c1">// 保存分类结果</span>
</span><span class="line">        <span class="n">ClassifyResult</span> <span class="n">cr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassifyResult</span><span class="o">();</span>
</span><span class="line">         <span class="n">cr</span><span class="o">.</span><span class="na">classification</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="na">classifications</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="c1">// 分类</span>
</span><span class="line">        <span class="n">cr</span><span class="o">.</span><span class="na">probility</span> <span class="o">=</span> <span class="n">probility</span><span class="o">;</span> <span class="c1">// 关键字在分类的条件概率</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;In process....&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">classifications</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;：&quot;</span> <span class="o">+</span> <span class="n">probility</span><span class="o">);</span>
</span><span class="line">        <span class="n">crs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cr</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 找出最大的元素</span>
</span><span class="line">    <span class="n">ClassifyResult</span> <span class="n">maxElem</span> <span class="o">=</span> <span class="o">(</span><span class="n">ClassifyResult</span><span class="o">)</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span>
</span><span class="line">            <span class="n">crs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="kd">final</span> <span class="n">ClassifyResult</span> <span class="n">m1</span> <span class="o">=</span> <span class="o">(</span><span class="n">ClassifyResult</span><span class="o">)</span> <span class="n">o1</span><span class="o">;</span>
</span><span class="line">                    <span class="kd">final</span> <span class="n">ClassifyResult</span> <span class="n">m2</span> <span class="o">=</span> <span class="o">(</span><span class="n">ClassifyResult</span><span class="o">)</span> <span class="n">o2</span><span class="o">;</span>
</span><span class="line">                    <span class="kd">final</span> <span class="kt">double</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">m1</span><span class="o">.</span><span class="na">probility</span> <span class="o">-</span> <span class="n">m2</span><span class="o">.</span><span class="na">probility</span><span class="o">;</span>
</span><span class="line">                    <span class="k">if</span> <span class="o">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                    <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">maxElem</span><span class="o">.</span><span class="na">classification</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>测试正确率的函数getCorrectRate()，核心代码就是对每个文本文件调用classify()，将得到的类别和原始的类别比较，经过统计后就可以得到百分比。</p>

<p>更多细节请读者阅读<a href="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2010/05/NaiveBayesClassifier.zip">源代码</a>。</p>

<h2 id="section-21">参考文献</h2>

<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>Pang-Ning Tan, Michael Steinbach, Vipin Kumar, 《<a href="http://book.douban.com/subject/1786120/">数据挖掘导论</a>》，北京：人民邮电出版社，2007，第140~145页。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>石志伟, 吴功宜, “<a href="http://d.wanfangdata.com.cn/Conference_5615512.aspx">基于朴素贝叶斯分类器的文本分类算法</a>”, 第一届全国信息检索与内容安全学术会议，2004<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>洞庭散人，“<a href="http://www.cnblogs.com/phinecos/archive/2008/10/21/1315948.html">基于朴素贝叶斯分类器的文本分类算法（上）</a>”，“<a href="http://www.cnblogs.com/phinecos/archive/2008/10/21/1316044.html">基于朴素贝叶斯分类器的文本分类算法（下）</a>”，2008<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>Christopher D. Manning, Prabhakar Raghavan, Hinrich Schütze, <a href="http://nlp.stanford.edu/IR-book/">Introduction to Information Retrieval</a>, Cambridge University Press, 2008, chapter 13, Text classification and Naive Bayes.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java使用imageio 读写图像]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20100401"/>
    <updated>2010-04-01T16:53:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/read-and-write-images-using-java-imageio</id>
    <content type="html"><![CDATA[<p>Java中进行图像I/O（即读图片和写图片，不涉及到复杂图像处理）有三个方法：</p>

<ol>
  <li>Java Image I/O API，支持常见图片，从Java 2 version 1.4.0开始就内置了。
主页：<a href="http://java.sun.com/javase/6/docs/technotes/guides/imageio/index.html">http://java.sun.com/javase/6/docs/technotes/guides/imageio/index.html</a></li>
  <li>JAI 中的 Image I/O Tools，支持更多图片类型，例如JPEG-LS, JPEG2000, 和 TIFF。
主页：<a href="https://jai-imageio.dev.java.net/">https://jai-imageio.dev.java.net/</a>。JAI 是一个关于图像处理的框架，很庞大，
其中仅仅jai-imageio是关于图像I/O的，其他的可以不看。</li>
  <li>JAI的com.sun.media.jai.codec 也有一定的图像解码能力</li>
</ol>

<p>当然，还有众多的java开源工具包可以读写图像，例如JIMI, JMagic等，但JDK目前本身能
够读写图片，就用JDK的，开发和部署方便，不需要额外下载jar包。</p>

<p>由于JAI是Java新加入的，很多组件不是正式规范，JDK不自带，因此开发和部署需要额外
安装，安装文件在官网<a href="https://jai.dev.java.net/">https://jai.dev.java.net/</a>下载得到。</p>

<p>如果你仅仅想读取常见格式的图片，不需要用JAI这么高级这么庞大的东西，
用Java Image I/O API即可。</p>

<p>下面重点介绍 Java Image I/O API。</p>

<p>Java Image I/O API 主要在 javax.imageio 下面。JDK已经内置了常见图片格式的插件，
但它提供了插件体系结构，第三方也可以开发插件支持其他图片格式。</p>

<!--more-->

<p>下面这段代码可以展示，JDK内置支持的图片格式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">javax.imageio.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class="line"><span class="n">String</span> <span class="n">readFormats</span><span class="o">[]</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">getReaderFormatNames</span><span class="o">();</span>
</span><span class="line"><span class="n">String</span> <span class="n">writeFormats</span><span class="o">[]</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">getWriterFormatNames</span><span class="o">();</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">“</span><span class="nl">Readers:</span>  <span class="err">”</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">readFormats</span><span class="o">));</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">“</span><span class="nl">Writers:</span>  <span class="err">”</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">writeFormats</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主页上有一个文档，Java Image I/O API Guide，很通俗易懂，可以让你快速上手。以下
内容主要来自这个文档的第3章。</p>

<h1 id="io">第3章 编写图像I/O程序</h1>
<p>##3.1 读写图片
javax.imageio.ImageIO类提供了一组静态方法进行最简单的图像I/O操作。
读取一个标准格式(GIF, PNG, or JPEG)的图片很简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="err">“</span><span class="nl">c:</span><span class="n">imagesmyimage</span><span class="o">.</span><span class="na">gif</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="n">BufferedImage</span> <span class="n">bi</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Java Image I/O API 会自动探测图片的格式并调用对应的插件进行解码，当安装了一个新
插件，新的格式会被自动理解，程序代码不需要改变。</p>

<p>写图片同样简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BufferedImage</span> <span class="n">bi</span><span class="o">;</span>
</span><span class="line"><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="err">“</span><span class="nl">c:</span><span class="n">imagesmyimage</span><span class="o">.</span><span class="na">png</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="n">ImageIO</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">im</span><span class="o">,</span> <span class="err">“</span><span class="n">png</span><span class="err">”</span><span class="o">,</span> <span class="n">f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">3.2 更进一步</h2>
<p>上一节谈到的方法对于简单程序已经足够了。不过，Java Image I/O API 提供了为编写复
杂程序的能力。为了利用API的高级特性，应用程序应当直接使用类ImageReader 和
ImageWriter。</p>

<h2 id="imagereader-">3.3 ImageReader 类</h2>
<p>与其用ImageIO类来进行所有的解码操作，不如用ImageIO类去得到一个ImageReader对象，
再用这个对象去进行读操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Iterator</span> <span class="n">readers</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">getImageReadersByFormatName</span><span class="o">(</span><span class="err">“</span><span class="n">gif</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="n">ImageReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageReader</span><span class="o">)</span><span class="n">readers</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ImageReader对象也可以基于文件内容、文件后缀或MIME类型获得。这个用于查找和初始
化ImageReader对象的机制用到了javax.imageio.spi.ImageReaderSpi类，它可以在不用初
始化插件的情况下获得插件的信息。”service provider interfaces” (SPIs)将会在下一
章详细讨论。一旦获得了一个ImageReader对象，必须给它是指一个输入源。大部分
ImageReader对象可以从ImageInputStream类输入源读取数据，ImageInputStream是Image
I/O API定义的专用输入源。</p>

<p>获得一个ImageInputStream 是简单的。给定一个File或InputStream，一个
ImageInputStream对象可以通过调用如下函数产生：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Object</span> <span class="n">source</span><span class="o">;</span> <span class="c1">// File or InputStream</span>
</span><span class="line"><span class="n">ImageInputStream</span> <span class="n">iis</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">createImageInputStream</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一旦有了输入源，可以把它与一个ImageReader对象关联起来：
reader.setInput(iis, true);</p>

<p>如果输入源文件包含多张图片，而程序不保证按顺序读取时，第二个参数应该设置为
false。对于那些只允许存储一张图片的文件格式，永远传递true是合理的。</p>

<p>当ImageReader对象有了输入源后，我们就可以获取图片信息而不用把整张图片数据都读入
内存。例如，调用reader.getImageWidth(0)可以让我们获得文件中第一张图片的宽度。一
个好的插件会试图解码文件的必要部分，去获得图片的宽度，而不用读取任何一个像素。</p>

<p>为读取图片，可以调用reader.read(imageIndex), imageIndex是文件（当包含多张图片时）
中图片的索引。这与上一节调用ImageIO.read()产生的结果相同。</p>

<h3 id="imagereadparam">3.3.1 ImageReadParam</h3>
<p>如果需要更多的控制，可以向read()方法传递一个ImageReadParam类型的参数。一个
ImageReadParam对象可以让程序更好的利用内存。它不仅允许指定一个感兴趣的区域，还
可以指定一个抽样因子，用于向下采样。</p>

<p>例如，为了只解码图片的左上角的1/4，程序可以先获取一个合适的ImageReadParam对象：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">ImageReadParam</span> <span class="n">param</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getDefaultReadParam</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来，指定图片区域：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.awt.Rectangle</span><span class="o">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">imageIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">half_width</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getImageWidth</span><span class="o">(</span><span class="n">imageIndex</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">half_height</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getImageHeight</span><span class="o">(</span><span class="n">imageIndex</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
</span><span class="line"><span class="n">Rectangle</span> <span class="n">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rectangle</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">half_width</span><span class="o">,</span> <span class="n">half_height</span><span class="o">);</span>
</span><span class="line"><span class="n">param</span><span class="o">.</span><span class="na">setSourceRegion</span><span class="o">(</span><span class="n">rect</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，读取图片：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BufferedImage</span> <span class="n">bi</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">imageIndex</span><span class="o">,</span> <span class="n">param</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果是一张新图片，宽和高都只有原图片的一半。</p>

<p>另一个例子，为了读取每三个像素中的一个，产生一个原图片1/9大小的图片，可以用
ImageReadParam指定抽样因子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">param</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getDefaultImageParam</span><span class="o">();</span>
</span><span class="line"><span class="n">param</span><span class="o">.</span><span class="na">setSourceSubsampling</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="n">BufferedImage</span> <span class="n">bi3</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">param</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="iioparamcontroller">3.3.2 IIOParamController</h3>
<p>插件有时会提供一个IIOParamController类，这是可选的。略。</p>

<h3 id="section-1">3.3.3 读多图片文件</h3>
<p>ImageReader 中所有与图片打交道的方法都有一个imageIndex 参数，这个参数用于读取多
图片文件中的一张。</p>

<p>ImageReader.getNumImages()返回多图片文件中的图片个数。这个方法有一个boolean参数，
allowSearch。有的图片格式，典型的GIF，没有提供任何获取文件中的图片个数方法，除
非读取整个进行解析。这样代价很高，因此设置allowSearch为false可以让方法直接返回
-1，而不是实际的图片个数。如果此参数是true，则该方法总会返回文件中实际的图片个
数。</p>

<p>即使在不知道文件中图片个数的情况下，仍可以调用read(imageIndex); 如果索引值过大，
该方法会抛出IndexOutOfBoundsException异常。因此，程序可以递增索引去获取图片，
直到异常。</p>

<h3 id="section-2">3.3.4 读缩略图</h3>
<p>有的图片格式允许一个（或多个）小的预览图，与主图片一起存储在文件中。这些
“缩略图”对于快速识别图片很有用，不用解码整个图片。</p>

<p>程序可以调用如下代码，探测一张图片有多少张缩略图：
reader.getNumThumbnails(imageIndex);</p>

<p>如果存在缩略图，可以调用如下代码获取：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">thumbailIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="n">BufferedImage</span> <span class="n">bi</span><span class="o">;</span>
</span><span class="line"><span class="n">bi</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readThumbnail</span><span class="o">(</span><span class="n">imageIndex</span><span class="o">,</span> <span class="n">thumbnailIndex</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="imagewriter-">3.4 ImageWriter 类</h2>
<p>就像我们可以用ImageIO 的一个方法获取某种图片格式的ImageReader对象一样，我们也可
以获取ImageWriter对象：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Iterator</span> <span class="n">writers</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">getImageWritersByFormatName</span><span class="o">(</span><span class="err">“</span><span class="n">png</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="n">ImageWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageWriter</span><span class="o">)</span><span class="n">writers</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">
</span><span class="line"><span class="err">一旦获取了一个</span><span class="n">ImageWriter</span><span class="err">对象，必须给它设置一个输出源</span><span class="n">ImageOutputStream</span><span class="err">。</span>
</span><span class="line"><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="err">“</span><span class="nl">c:</span><span class="n">imagesmyimage</span><span class="o">.</span><span class="na">png</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="n">ImageOutputStream</span> <span class="n">ios</span> <span class="o">=</span> <span class="n">ImageIO</span><span class="o">.</span><span class="na">createImageOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="na">setOutput</span><span class="o">(</span><span class="n">ios</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，可以把图片写入到输出源：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BufferedImage</span> <span class="n">bi</span><span class="o">;</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bi</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">3.4.1 写多图片文件</h3>
<p>IIOImage类用于存储图片，缩略图或元信息的引用。下一节将讨论Metadata，目前，我们
简单地给Metadata相关参数传递null。
ImageWriter 类有一个方法write()，用于从IIOImage创建一个新文件，还有一个方法
writeInsert()，用于向一个已存在文件添加一个IIOImage对象。通过调用这两者，可以创
建一个多图片文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BufferedImage</span> <span class="n">first_bi</span><span class="o">,</span> <span class="n">second_bi</span><span class="o">;</span>
</span><span class="line"><span class="n">IIOImage</span> <span class="n">first_IIOImage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IIOImage</span><span class="o">(</span><span class="n">first_bi</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="n">IIOImage</span> <span class="n">second_IIOImage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IIOImage</span><span class="o">(</span><span class="n">second_bi</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">first_IIOImage</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">canInsertImage</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="na">writeInsert</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">second_IIOImage</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">“</span><span class="n">Writer</span> <span class="n">can</span><span class="err">’</span><span class="n">t</span> <span class="n">append</span> <span class="n">a</span> <span class="n">second</span> <span class="n">image</span><span class="o">!</span><span class="err">”</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="metadata">3.5  处理 Metadata</h2>
<p>所有与像素无关的信息，都属于在Metadata。javax.imageio.metadata 包含了用于访问
Metadata的类和接口。</p>

<p>Image I/O API 将stream metadata 和image metadata区别对待。stream metadata与一个
文件中存储了多张图片有关，image metadata只与单个图片有关。如果一个文件只包含一张
图片，那么就只存在image metadata。</p>

<p>可以通过调用ImageReader.getStreamMetadata 和 getImageMetadata(int imageIndex)来
获取metadata。这些方法会返回一个实现了IIOMetadata接口的对象，该对象会被向上转化
为ImageReader类型，</p>

<h2 id="section-4">3.6 编码转换</h2>
<p>略</p>

<h2 id="section-5">3.7 事件监听</h2>
<p>略</p>
]]></content>
  </entry>
  
</feed>
